; ModuleID = 'cat.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%seg_0_LOAD_1720_type = type <{ [8 x i8], [8 x i8], [8 x i8], i8*, [4 x i8], [4 x i8], [4 x i8], [8 x i8], [24 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [8 x i8], [24 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], i8*, [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], i8*, [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [8 x i8], [40 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], i8*, [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [44 x i8], [4 x i8], [8 x i8], [4 x i8], [140 x i8], [24 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [8 x i8], [16 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [1020 x i8], [4 x i8], [12 x i8], [4 x i8], [76 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [23 x i8], [9 x i8], [896 x i8], [8 x i8], [8 x i8], [756 x i8], [4 x i8], [324 x i8], [4 x i8], [32 x i8], [4 x i8], [152 x i8], [4 x i8], [108 x i8], [4 x i8], [76 x i8], [4 x i8], [76 x i8], [4 x i8], [212 x i8], [4 x i8], [148 x i8], [4 x i8], [628 x i8], [4 x i8], [676 x i8], [4 x i8], [12 x i8], [4 x i8], [60 x i8], [4 x i8], [12 x i8], [4 x i8], [52 x i8], [4 x i8], [148 x i8], [4 x i8], [464 x i8], [4 x i8], [520 x i8], [4 x i8], [12 x i8], [4 x i8], [12 x i8], [4 x i8], [188 x i8], [4 x i8], [40 x i8], [4 x i8], [128 x i8], [4 x i8], [156 x i8], [4 x i8], [236 x i8], [4 x i8], [460 x i8], [4 x i8], [84 x i8], [4 x i8], [148 x i8], [4 x i8], [84 x i8], [4 x i8], [244 x i8], [4 x i8], [36 x i8], [4 x i8], [20 x i8], [4 x i8], [604 x i8], [4 x i8], [140 x i8], [4 x i8], [188 x i8], [4 x i8], [108 x i8], [4 x i8], [20 x i8], [4 x i8], [52 x i8], [4 x i8], [332 x i8], [4 x i8], [860 x i8], [4 x i8], [188 x i8], [4 x i8], [28 x i8], [4 x i8], [124 x i8], [4 x i8], [140 x i8], [4 x i8], [732 x i8], [4 x i8], [492 x i8], [4 x i8], [28 x i8], [4 x i8], [28 x i8], [4 x i8], [60 x i8], [4 x i8], [28 x i8], [4 x i8], [172 x i8], [4 x i8], [236 x i8], [4 x i8], [60 x i8], [4 x i8], [108 x i8], [4 x i8], [28 x i8], [4 x i8], [44 x i8], [4 x i8], [28 x i8], [4 x i8], [76 x i8], [4 x i8], [136 x i8], [4 x i8], [256 x i8], [4 x i8], [44 x i8], [4 x i8], [92 x i8], [4 x i8], [220 x i8], [4 x i8], [44 x i8], [4 x i8], [28 x i8], [4 x i8], [44 x i8], [4 x i8], [28 x i8], [4 x i8], [28 x i8], [4 x i8], [364 x i8], [4 x i8], [316 x i8], [4 x i8], [140 x i8], [4 x i8], [316 x i8], [4 x i8], [92 x i8], [4 x i8], [140 x i8], [4 x i8], [108 x i8], [4 x i8], [108 x i8], [4 x i8], [204 x i8], [4 x i8], [12 x i8], [4 x i8], [60 x i8], [4 x i8], [44 x i8], [4 x i8], [60 x i8], [4 x i8], [76 x i8], [4 x i8], [108 x i8], [4 x i8], [92 x i8], [4 x i8], [24 x i8], [4 x i8], [204 x i8], [4 x i8], [88 x i8], [4 x i8], [132 x i8], [4 x i8], [220 x i8], [4 x i8], [92 x i8], [4 x i8], [1068 x i8], [4 x i8], [60 x i8], [4 x i8], [44 x i8], [4 x i8], [8 x i8], [4 x i8], [32 x i8], [4 x i8], [9 x i8], [3 x i8], [9 x i8], [11 x i8], [367 x i8], [1 x i8], [28 x i8], [1 x i8], [4 x i8], [1 x i8], [8 x i8], [6 x i8], [72 x i8], [8 x i8], [40 x i8], [8 x i8], [604 x i8], [4 x i8], [44 x i8], [4 x i8], [192 x i8], [8 x i8], [108 x i8], [4 x i8], [87 x i8], [1 x i8], [96 x i8], [1 x i8], [26 x i8], [1 x i8], [12 x i8], [1 x i8], [38 x i8], [17 x i8], [1060 x i8], [28 x i8], [4 x i8], [125 x i8], [1 x i8], [20 x i8], [1 x i8], [42 x i8], [7 x i8], [204 x i8], [4 x i8], [68 x i8], [4 x i8], [84 x i8], [4 x i8], [100 x i8], [4 x i8], [60 x i8], [4 x i8], [104 x i8], [24 x i8], [63 x i8], [1 x i8], [66 x i8], [2 x i8], [628 x i8], [4 x i8], [4 x i8], [32 x i8], [8 x i8], [4 x i8], [4 x i8], [52 x i8], [4 x i8], [16 x i8], [8 x i8], [16 x i8], [4 x i8], [152 x i8], [4 x i8], [16 x i8], [4 x i8], [16 x i8], [4 x i8], [44 x i8], [4 x i8], [16 x i8], [4 x i8], [104 x i8], [4 x i8], [388 x i8], [4 x i8], [16 x i8], [4 x i8], [16 x i8], [4 x i8], [16 x i8], [4 x i8], [228 x i8], [4 x i8], [60 x i8], [4 x i8], [16 x i8], [4 x i8], [16 x i8], [4 x i8], [16 x i8], [4 x i8], [72 x i8], [4 x i8], [16 x i8], [4 x i8], [44 x i8], [4 x i8], [16 x i8], [4 x i8], [16 x i8], [4 x i8], [72 x i8], [4 x i8], [16 x i8], [4 x i8], [16 x i8], [4 x i8], [16 x i8], [4 x i8], [16 x i8], [4 x i8], [16 x i8], [4 x i8], [16 x i8], [8 x i8], [404 x i8], [4 x i8], [100 x i8], [4 x i8], [64 x i8], [4 x i8], [248 x i8], [4 x i8], [60 x i8], [4 x i8], [188 x i8], [4 x i8], [132 x i8], [4 x i8], [88 x i8], [8 x i8], [16 x i8], [8 x i8] }>
%seg_207a70__init_array_10_type = type <{ [2672 x i8], i8*, i8*, i8*, [16 x i8], [4 x i8], [4 x i8], i8*, [16 x i8], [4 x i8], [4 x i8], i8*, [16 x i8], [4 x i8], [4 x i8], i8*, [16 x i8], [4 x i8], [4 x i8], i8*, [16 x i8], [4 x i8], [4 x i8], i8*, [16 x i8], [4 x i8], [4 x i8], i8*, [16 x i8], [4 x i8], [4 x i8], i8*, [16 x i8], [4 x i8], [4 x i8], i8*, [16 x i8], [4 x i8], [36 x i8], i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, [8 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [12 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [84 x i8], [4 x i8], [20 x i8], i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, [8 x i8], i8*, [20 x i8], [4 x i8], i8*, i8*, i8*, [4 x i8], [28 x i8], [4 x i8], [52 x i8], [4 x i8], [4 x i8], i8*, [8 x i8], [4 x i8], [4 x i8], i8*, [80 x i8], [336 x i8] }>
%struct.Memory = type opaque

@__mcsema_reg_state = thread_local(initialexec) global %struct.State zeroinitializer
@seg_0_LOAD_1720 = internal constant %seg_0_LOAD_1720_type <{ [8 x i8] c"\7FELF\02\01\01\00", [8 x i8] zeroinitializer, [8 x i8] c"\03\00>\00\01\00\00\00", i8* bitcast (void ()* @start to i8*), [4 x i8] c"@\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\F8\81\00\00", [8 x i8] zeroinitializer, [24 x i8] c"@\008\00\09\00@\00\1C\00\1B\00\06\00\00\00\05\00\00\00@\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"@\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"@\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\F8\01\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\F8\01\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"\03\00\00\00\04\00\00\008\02\00\00", [4 x i8] zeroinitializer, [4 x i8] c"8\02\00\00", [4 x i8] zeroinitializer, [4 x i8] c"8\02\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\1C\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\1C\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\01\00\00\00", [4 x i8] zeroinitializer, [8 x i8] c"\01\00\00\00\05\00\00\00", [24 x i8] zeroinitializer, [4 x i8] c"\D0y\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\D0y\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\00\00 \00", [4 x i8] zeroinitializer, [12 x i8] c"\01\00\00\00\06\00\00\00pz\00\00", [4 x i8] zeroinitializer, i8* bitcast (i8** @data_207a70 to i8*), [4 x i8] c"pz \00", [4 x i8] zeroinitializer, [4 x i8] c"P\06\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\F0\07\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\00\00 \00", [4 x i8] zeroinitializer, [12 x i8] c"\02\00\00\00\06\00\00\00\18|\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\18| \00", [4 x i8] zeroinitializer, [4 x i8] c"\18| \00", [4 x i8] zeroinitializer, [4 x i8] c"\F0\01\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\F0\01\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"\04\00\00\00\04\00\00\00T\02\00\00", [4 x i8] zeroinitializer, [4 x i8] c"T\02\00\00", [4 x i8] zeroinitializer, [4 x i8] c"T\02\00\00", [4 x i8] zeroinitializer, [4 x i8] c"D\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"D\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\04\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"P\E5td\04\00\00\00dk\00\00", [4 x i8] zeroinitializer, i8* @data_6b64, [4 x i8] c"dk\00\00", [4 x i8] zeroinitializer, [4 x i8] c"t\02\00\00", [4 x i8] zeroinitializer, [4 x i8] c"t\02\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\04\00\00\00", [4 x i8] zeroinitializer, [8 x i8] c"Q\E5td\06\00\00\00", [40 x i8] zeroinitializer, [4 x i8] c"\10\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"R\E5td\04\00\00\00pz\00\00", [4 x i8] zeroinitializer, i8* bitcast (i8** @data_207a70 to i8*), [4 x i8] c"pz \00", [4 x i8] zeroinitializer, [4 x i8] c"\90\05\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\90\05\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\01\00\00\00", [4 x i8] zeroinitializer, [44 x i8] c"/lib64/ld-linux-x86-64.so.2\00\04\00\00\00\10\00\00\00\01\00\00\00GNU\00", [4 x i8] zeroinitializer, [8 x i8] c"\03\00\00\00\02\00\00\00", [4 x i8] zeroinitializer, [140 x i8] c"\04\00\00\00\14\00\00\00\03\00\00\00GNU\00t~RK\C2\0D3\CE%\EDJ\EA\10\8E0%\E5\C3\B7\8F\03\00\00\00=\00\00\00\02\00\00\00\07\00\00\00\12\01\D2$\12)\08V`A\00\0E \00\00\00=\00\00\00A\00\00\00H\00\00\00\04\8B&\A4(\1D\8C\1C\10\8AM#\C9MB#\BCPv\9E\ACK\E3\C0\96\A0\89\97F-\E4\DE\CE,cr\E4bA\F59\F2\8B\1C2\C4\F7\12*\D4\B8\D3\1C\EDc*?\04K\86", [24 x i8] zeroinitializer, [8 x i8] c"@\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"b\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"7\02\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"z\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\DF\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"1\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\1E\03\00\00 \00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\80\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\AB\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\A5\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\F6\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"*\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\F2\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\1A\02\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"H\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\9E\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\CA\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"X\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\88\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c")\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"@\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\1D\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\D8\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\81\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"{\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"+\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\B5\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\F0\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\08\02\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\F5\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"(\02\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\C3\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\01\02\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c":\03\00\00 \00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"#\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\9D\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"1\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\0B\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"H\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\D1\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\94\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"i\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"r\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\D4\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\1F\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\12\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\EA\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"R\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\D6\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"!\02\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"W\02\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\FC\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\81\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\A4\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\08\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"I\03\00\00 \00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"8\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"i\00\00\00\12\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"\DB\01\00\00\22\00\00\00", [16 x i8] zeroinitializer, [8 x i8] c"T\01\00\00\12\00\00\00", [16 x i8] zeroinitializer, [12 x i8] c"d\02\00\00\11\00\18\00`\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"8\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"\16\01\00\00\11\00\19\00\C8\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"\91\02\00\00\11\00\10\00\80g\00\00", [4 x i8] zeroinitializer, [4 x i8] c"(\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"\A4\02\00\00\11\00\15\00\C0{ \00", [4 x i8] zeroinitializer, [4 x i8] c"X\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"<\02\00\00\11\00\19\00\C0\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"\82\02\00\00\11\00\10\00@\\\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\04\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"\86\00\00\00!\00\19\00\D8\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"\B7\02\00\00\11\00\18\00@\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\04\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"G\02\00\00\11\00\19\00\D8\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"\B6\01\00\00!\00\19\00\C0\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"t\01\00\00\11\00\19\00\E0\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"9\00\00\00\11\00\19\00\D0\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\04\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"z\02\00\00\11\00\18\008\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"\C4\02\00\00\11\00\19\00\10\81 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [12 x i8] c"\D1\02\00\00\11\00\10\00\E0j\00\00", [4 x i8] zeroinitializer, [4 x i8] c"/\00\00\00", [4 x i8] zeroinitializer, [1020 x i8] c"\00libc.so.6\00fflush\00__printf_chk\00setlocale\00mbrtowc\00strncmp\00optind\00strrchr\00dcgettext\00error\00__stack_chk_fail\00iswprint\00realloc\00abort\00_exit\00program_invocation_name\00__ctype_get_mb_cur_max\00posix_fadvise\00calloc\00strlen\00ungetc\00memset\00__errno_location\00read\00memcmp\00getpagesize\00__fprintf_chk\00stdout\00lseek\00memcpy\00fclose\00malloc\00mbsinit\00__uflow\00nl_langinfo\00__ctype_b_loc\00getenv\00__freading\00stderr\00ioctl\00fscanf\00getopt_long\00__fxstat\00fileno\00fwrite\00__fpending\00program_invocation_short_name\00fdopen\00__cxa_finalize\00memmove\00bindtextdomain\00strcmp\00__libc_start_main\00stpcpy\00fseeko\00fputs_unlocked\00free\00__progname\00__progname_full\00__cxa_atexit\00quote_quoting_options\00Version\00_IO_stdin_used\00quoting_style_vals\00quoting_style_args\00exit_failure\00program_name\00version_etc_copyright\00GLIBC_2.3\00GLIBC_2.3.4\00GLIBC_2.14\00GLIBC_2.4\00GLIBC_2.2.5\00_ITM_deregisterTMCloneTable\00__gmon_start__\00_ITM_registerTMCloneTable\00\00\00\00\02\00\02\00\02\00\02\00\02\00\02\00\00\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\03\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\00\00\04\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\05\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\02\00\05\00\00\00\02\00\02\00\02\00\06\00\01\00\02\00\01\00\01\00\02\00\01\00\02\00\01\00\02\00\02\00\02\00\02\00\01\00\01\00\01\00", [4 x i8] zeroinitializer, [12 x i8] c"\01\00\05\00\01\00\00\00\10\00\00\00", [4 x i8] zeroinitializer, [76 x i8] c"\13ii\0D\00\00\06\00\E7\02\00\00\10\00\00\00t\19i\09\00\00\05\00\F1\02\00\00\10\00\00\00\94\91\96\06\00\00\04\00\FD\02\00\00\10\00\00\00\14ii\0D\00\00\03\00\08\03\00\00\10\00\00\00u\1Ai\09\00\00\02\00\12\03\00\00", [4 x i8] zeroinitializer, [4 x i8] c"pz \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\10(\00\00", [4 x i8] zeroinitializer, [4 x i8] c"xz \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\D0'\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\80z \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"z]\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\A0z \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\8A]\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\C0z \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\91]\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\E0z \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\9F]\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\00{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\B0]\00\00", [4 x i8] zeroinitializer, [4 x i8] c" { \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\BA]\00\00", [4 x i8] zeroinitializer, [4 x i8] c"@{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\C4]\00\00", [4 x i8] zeroinitializer, [4 x i8] c"`{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\CD]\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\80{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\D2]\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\C0{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\E1b\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\C8{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\E9b\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\D0{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\EFb\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\D8{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\FCb\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\E0{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\09c\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\E8{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\1Dc\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\F0{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\1Fc\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\F8{ \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\02c\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\00| \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\E7\\\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\08| \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"'c\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\08\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\08\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"(\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"!\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"0\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\1C\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"8\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"{b\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\A0\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\B0\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\B8\80 \00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c" \81 \00", [4 x i8] zeroinitializer, [4 x i8] c"\D8\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\06\00\00\00\07\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\E0\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\06\00\00\00\1D\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\E8\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\06\00\00\00\22\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\F0\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\06\00\00\008\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\F8\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\06\00\00\00;\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\C0\80 \00", [4 x i8] zeroinitializer, [8 x i8] c"\05\00\00\00A\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\C8\80 \00", [4 x i8] zeroinitializer, [8 x i8] c"\05\00\00\00>\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\D0\80 \00", [4 x i8] zeroinitializer, [8 x i8] c"\05\00\00\00H\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\D8\80 \00", [4 x i8] zeroinitializer, [8 x i8] c"\05\00\00\00E\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\E0\80 \00", [4 x i8] zeroinitializer, [8 x i8] c"\05\00\00\00G\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c" ~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\01\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"(~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\02\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"0~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\03\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"8~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\04\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"@~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\05\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"H~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\06\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"P~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\08\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"X~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\09\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"`~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\0A\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"h~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\0B\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"p~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\0C\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"x~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\0D\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\80~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\0E\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\88~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\0F\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\90~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\10\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\98~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\11\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\A0~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\12\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\A8~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\13\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\B0~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\14\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\B8~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\15\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\C0~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\16\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\C8~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\17\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\D0~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\18\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\D8~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\19\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\E0~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\1A\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\E8~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\1B\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\F0~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\1C\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\F8~ \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\1E\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\00\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00\1F\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\08\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00 \00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\10\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00!\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\18\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00#\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c" \7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00$\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"(\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00%\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"0\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00&\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"8\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00'\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"@\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00(\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"H\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00)\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"P\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00*\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"X\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00+\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"`\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00,\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"h\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00-\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"p\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00.\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"x\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00/\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\80\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\000\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\88\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\001\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\90\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\002\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\98\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\003\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\A0\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\004\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\A8\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\005\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\B0\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\006\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\B8\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\007\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\C0\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\009\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\C8\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00:\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\D0\7F \00", [4 x i8] zeroinitializer, [8 x i8] c"\07\00\00\00<\00\00\00", [8 x i8] zeroinitializer, [23 x i8] c"H\83\EC\08H\8B\05\BDh \00H\85\C0t\02\FF\D0H\83\C4\08\C3", [9 x i8] zeroinitializer, [896 x i8] c"\FF5\CAf \00\FF%\CCf \00\0F\1F@\00\FF%\CAf \00h\00\00\00\00\E9\E0\FF\FF\FF\FF%\C2f \00h\01\00\00\00\E9\D0\FF\FF\FF\FF%\BAf \00h\02\00\00\00\E9\C0\FF\FF\FF\FF%\B2f \00h\03\00\00\00\E9\B0\FF\FF\FF\FF%\AAf \00h\04\00\00\00\E9\A0\FF\FF\FF\FF%\A2f \00h\05\00\00\00\E9\90\FF\FF\FF\FF%\9Af \00h\06\00\00\00\E9\80\FF\FF\FF\FF%\92f \00h\07\00\00\00\E9p\FF\FF\FF\FF%\8Af \00h\08\00\00\00\E9`\FF\FF\FF\FF%\82f \00h\09\00\00\00\E9P\FF\FF\FF\FF%zf \00h\0A\00\00\00\E9@\FF\FF\FF\FF%rf \00h\0B\00\00\00\E90\FF\FF\FF\FF%jf \00h\0C\00\00\00\E9 \FF\FF\FF\FF%bf \00h\0D\00\00\00\E9\10\FF\FF\FF\FF%Zf \00h\0E\00\00\00\E9\00\FF\FF\FF\FF%Rf \00h\0F\00\00\00\E9\F0\FE\FF\FF\FF%Jf \00h\10\00\00\00\E9\E0\FE\FF\FF\FF%Bf \00h\11\00\00\00\E9\D0\FE\FF\FF\FF%:f \00h\12\00\00\00\E9\C0\FE\FF\FF\FF%2f \00h\13\00\00\00\E9\B0\FE\FF\FF\FF%*f \00h\14\00\00\00\E9\A0\FE\FF\FF\FF%\22f \00h\15\00\00\00\E9\90\FE\FF\FF\FF%\1Af \00h\16\00\00\00\E9\80\FE\FF\FF\FF%\12f \00h\17\00\00\00\E9p\FE\FF\FF\FF%\0Af \00h\18\00\00\00\E9`\FE\FF\FF\FF%\02f \00h\19\00\00\00\E9P\FE\FF\FF\FF%\FAe \00h\1A\00\00\00\E9@\FE\FF\FF\FF%\F2e \00h\1B\00\00\00\E90\FE\FF\FF\FF%\EAe \00h\1C\00\00\00\E9 \FE\FF\FF\FF%\E2e \00h\1D\00\00\00\E9\10\FE\FF\FF\FF%\DAe \00h\1E\00\00\00\E9\00\FE\FF\FF\FF%\D2e \00h\1F\00\00\00\E9\F0\FD\FF\FF\FF%\CAe \00h \00\00\00\E9\E0\FD\FF\FF\FF%\C2e \00h!\00\00\00\E9\D0\FD\FF\FF\FF%\BAe \00h\22\00\00\00\E9\C0\FD\FF\FF\FF%\B2e \00h#\00\00\00\E9\B0\FD\FF\FF\FF%\AAe \00h$\00\00\00\E9\A0\FD\FF\FF\FF%\A2e \00h%\00\00\00\E9\90\FD\FF\FF\FF%\9Ae \00h&\00\00\00\E9\80\FD\FF\FF\FF%\92e \00h'\00\00\00\E9p\FD\FF\FF\FF%\8Ae \00h(\00\00\00\E9`\FD\FF\FF\FF%\82e \00h)\00\00\00\E9P\FD\FF\FF\FF%ze \00h*\00\00\00\E9@\FD\FF\FF\FF%re \00h+\00\00\00\E90\FD\FF\FF\FF%je \00h,\00\00\00\E9 \FD\FF\FF\FF%be \00h-\00\00\00\E9\10\FD\FF\FF\FF%Ze \00h.\00\00\00\E9\00\FD\FF\FF\FF%Re \00h/\00\00\00\E9\F0\FC\FF\FF\FF%Je \00h0\00\00\00\E9\E0\FC\FF\FF\FF%Be \00h1\00\00\00\E9\D0\FC\FF\FF\FF%:e \00h2\00\00\00\E9\C0\FC\FF\FF\FF%2e \00h3\00\00\00\E9\B0\FC\FF\FF\FF%*e \00h4\00\00\00\E9\A0\FC\FF\FF\FF%\22e \00h5\00\00\00\E9\90\FC\FF\FF\FF%\1Ae \00h6\00\00\00\E9\80\FC\FF\FF", [8 x i8] c"\FF%2e \00f\90", [8 x i8] zeroinitializer, [756 x i8] c"SH\8D5lA\00\00\BA\05\00\00\001\FF\E8<\FD\FF\FFH\89\C3\E8\A4\FC\FF\FF\8B0H\89\DA\BF\01\00\00\001\C0\E8\13\FF\FF\FF\0F\1F\00AWAVI\89\F6AUATE1\E4USH\81\ECX\01\00\00H\89t$H\89|$PdH\8B\04%(\00\00\00H\89\84$H\01\00\001\C0\E8\18\FF\FF\FFI\8B>\89\C3\E8\CE\12\00\00H\8D5\B8L\00\00\BF\06\00\00\00\E8\8D\FE\FF\FFH\8D5\82A\00\00H\8D=mA\00\00\E8\9A\FC\FF\FFH\8D=aA\00\00\E8n\FC\FF\FFH\8D='\11\00\00\E8\82@\00\00\C6D$6\00\C6D$U\00\C6D$V\00\C6\84$\8D\00\00\00\00\C6D$7\00f\0F\1FD\00\00H\8Bt$H\8B|$PH\8D\0D\D0^ \00H\8D\15]A\00\00E1\C0\E8\A1\FC\FF\FF\83\F8\FF\0F\84\EB\00\00\00\83\F8b\0F\84\C8\00\00\00~%\83\F8stj~P\83\F8ut\C1\0F\8C\BE\00\00\00\83\F8v\0F\85\DB\0A\00\00\C6D$6\01\EB\AB\0F\1F\00\83\F8At\18~M\83\F8Et\1C\83\F8T\0F\85\BC\0A\00\00A\BC\01\00\00\00\EB\8BA\BC\01\00\00\00\C6D$6\01\C6D$U\01\E9v\FF\FF\FF\83\F8et\EC\83\F8n\0F\85\91\0A\00\00\C6D$7\01\E9^\FF\FF\FF\C6D$V\01\E9T\FF\FF\FF=}\FF\FF\FF\89D$0\0F\854\0A\00\00H\83\EC\08H\8B=bd \00H\8B\0D\CBc \00j\00L\8D\0Dx@\00\00L\8D\05\85@\00\00H\8D\15F@\00\00H\8D5\C5?\00\001\C0\E8\1E4\00\001\FF\E8\C7\FD\FF\FF\C6\84$\8D\00\00\00\01\EB\95A\BC\01\00\00\00\C6D$6\01\E9\ED\FE\FF\FF\89D$0H\8D\84$\B0\00\00\00\BE\01\00\00\00\BF\01\00\00\00H\89\C2H\89\84$\80\00\00\00\E8\C7\FC\FF\FF\85\C0\0F\88\F7\09\00\00L\8B\BC$\E8\00\00\00H\B8\00\00\FE\FF\FF\FF\FF\1FHc\0D\D6c \00\C6\84$\8E\00\00\00\00\C6\84$\8C\00\00\00\01I\8D\97\00\00\FE\FFH\89L$XH9\C2\B8\00\00\02\00L\0FG\F8Hc\C3H\89D$hH\8B\84$\B0\00\00\00H\89\84$\90\00\00\00H\8B\84$\B8\00\00\00H\89\84$\98\00\00\00\8B\84$\C8\00\00\00%\00\F0\00\00\89\84$\88\00\00\00\0F\B6D$7\0AD$U9L$P\88\84$\8F\00\00\00H\8D\05RE\00\00H\89\05yc \00\0F\8E\9E\08\00\00H\8BD$HH\8BL$XH\8B\04\C8H\89\05^c \00H\8D=)E\00\00\B9\02\00\00\00H\89\C6\F3\A6\0F\97\C3\0F\92\C2)\D3\0F\BE\DB\85\DB\0F\85\CB\04\00\00\C7\05,c \00", [4 x i8] zeroinitializer, [324 x i8] c"\C6\84$\8E\00\00\00\01H\8B\94$\80\00\00\00\89\DE\BF\01\00\00\00\E8\BC\FB\FF\FF\85\C0\0F\88\A4\06\00\00H\8B\8C$\E8\00\00\00H\B8\00\00\FE\FF\FF\FF\FF\1F\89\DFH\8D\91\00\00\FE\FFH9\C2\B8\00\00\02\00H\0FF\C11\D21\F6\B9\02\00\00\00H\89D$8\E8*\0F\00\00\81\BC$\88\00\00\00\00\80\00\00\0F\84\C6\05\00\00\80\BC$\8F\00\00\00\00H\8BD$hL\8Dp\FFu\14D\0F\B6l$6E\09\E5D\0Al$V\0F\84\EA\06\00\00H\8B\\$hH\8Bl$8H\89\DFH\01\EF\E8\9D3\00\00I\89\C5H\89D$pJ\8DD;\12H\8D<\A8\E8\873\00\00H\89\C1H\89D$x1\D2L\01\F1M\01\EE\8B5Qb \00H\89\C8E\89\E5\C6D$T\01H\F7\F3L\89\F0\89t$\04A\83\F5\01H)\D11\D2H\F7\F3L\89\F0J\8D49M\89\FEH\89L$ I\89\CFH\89t$\10H)\D0H\8DX\01H\89D$\18H\89D$\08\0F\B6\84$\8D\00\00\00H\89\\$@\83\F0\01\88D$WH\8D\84$\AC\00\00\00H\89D$`\0F\1F\80", [4 x i8] zeroinitializer, [32 x i8] c"L9|$\10\0F\86\B8\01\00\00H;\\$\08\0F\86\0D\02\00\00\80|$T\00\C7\84$\AC\00", [4 x i8] zeroinitializer, [152 x i8] c"\00\00\0F\85\A4\02\00\00L\89\FBH+\\$ \0F\85\D9\02\00\00\8B\1D\A4a \00H\8BT$8H\8Bt$\18\89\DF\E8\DF+\00\00H\83\F8\FF\0F\84\CC\03\00\00H\85\C0\0F\84c\04\00\00H\8B|$\18H\8B\\$@H\01\F8H\89D$\08\C6\00\0AH\89\F8\0F\B6(@\80\FD\0A\0F\84w\FF\FF\FF\8B|$\04\85\FFx\1E\80|$7\00t\17\E8s\08\00\00H\8B5|` \00L\89\FF\E8T\F8\FF\FFI\89\C7\80|$6\00t%\EBU\0F\1F\84\00", [4 x i8] zeroinitializer, [108 x i8] c"E\84\E4t\1C\B8^I\00\00I\83\C7\02fA\89G\FEH\83\C3\01\0F\B6k\FF@\80\FD\09t\DF@\80\FD\0A\0F\84\C5\00\00\00A\88/I\83\C7\01\EB\DF\0F\1F@\00@\80\FD~w2A\88/I\83\C7\01H\83\C3\01\0F\B6k\FF@\80\FD\1Fw\E5@\80\FD\09uGE\84\EDtBA\C6\07\09I\83\C7\01\EB\DD\0F\1F\84\00", [4 x i8] zeroinitializer, [76 x i8] c"@\80\FD\7FtJ\B9M-\00\00@\80\FD\9FfA\89\0FvS@\80\FD\FF\0F\84Y\01\00\00\83\C5\80I\83\C7\03A\88o\FF\EB\A9\0F\1F@\00@\80\FD\0AtJ\83\C5@A\C6\07^I\83\C7\02A\88o\FF\EB\8Ef\0F\1F\84\00", [4 x i8] zeroinitializer, [76 x i8] c"\BE^?\00\00I\83\C7\02fA\89w\FE\E9r\FF\FF\FF\0F\1FD\00\00\83\ED@A\C6G\02^I\83\C7\04A\88o\FF\E9X\FF\FF\FF\0F\1F\00L9|$\10\8BD$0\89D$\04\0F\87H\FE\FF\FFH\8Bl$ \0F\1F\84\00", [4 x i8] zeroinitializer, [212 x i8] c"L\89\F2H\89\EE\BF\01\00\00\00\E8\A0\0C\00\00I9\C6\0F\85\FE\04\00\00L\01\F5M\89\F9I)\E9M9\CEv\D9L\8B|$ L\89\CAH\89\EEL\89L$(L\89\FF\E8\E1\F8\FF\FFH;\\$\08L\8BL$(O\8D<\0F\0F\87\F3\FD\FF\FF\83D$\04\01H\8DS\01\8BD$\04\85\C0~L\83\F8\01t\13\80|$V\00\C7D$\04\02\00\00\00\0F\85\BC\00\00\00\80|$W\00t-\80|$7\00t&H\89T$(\E8\AC\06\00\00H\8B5\B5^ \00L\89\FF\E8\8D\F6\FF\FFH\8BT$(I\89\C7\0F\1FD\00\00\80|$U\00I\8DG\01t5A\C6\07$I\83\C7\02\C6\00\0AH\89\D8H\89\D3\E9\DB\FD\FF\FF\0F\1F\80", [4 x i8] zeroinitializer, [148 x i8] c"\BA^?\00\00I\83\C7\04fA\89W\FE\E9J\FE\FF\FF\0F\1FD\00\00H\89\C6L\89\F8I\89\F7\EB\C8\0F\1FD\00\00\8B\1D\0E_ \00H\8BT$`1\C0\BE\1BT\00\00\89\DF\E8\C7\F6\FF\FF\85\C0xSD\8B\84$\AC\00\00\00E\85\C0\0F\85B\FD\FF\FF\E9)\FD\FF\FF\0F\1FD\00\00\0F\B6+H\89\D3\E9l\FD\FF\FFL\8B|$ H\89\DA\BF\01\00\00\00L\89\FE\E8X\0B\00\00H9\C3\0F\84\09\FD\FF\FF\E8\8A\F8\FF\FFf.\0F\1F\84\00", [4 x i8] zeroinitializer, [628 x i8] c"\E8;\F5\FF\FF\8B\08\83\F9_A\0F\94\C2\83\F9&w\13H\BA\00\00H\02@\00\00\00H\D3\EA\83\E2\01A\09\D2E\84\D2\0F\84\B0\03\00\00\C6D$T\00\E9t\FF\FF\FF1\F6H\89\C71\C0\E8\8B\F7\FF\FF\85\C0\89\C3\89\05U^ \00\0F\89+\FB\FF\FFH\8B\15L^ \00\BE\03\00\00\001\FF\E8\98&\00\00H\89\C3\E8\D0\F4\FF\FF\8B0H\8D\15\BB?\00\00H\89\D91\FF1\C0\E8;\F7\FF\FF\C6\84$\8C\00\00\00\00H\83D$X\01H\8BD$X9D$P\0F\8F\93\FA\FF\FF\80\BC$\8E\00\00\00\00\0F\85\0D\02\00\00\0F\B6\84$\8C\00\00\00\83\F0\01H\8B\8C$H\01\00\00dH3\0C%(\00\00\00\0F\B6\C0\0F\85\AE\03\00\00H\81\C4X\01\00\00[]A\\A]A^A_\C3H\8B\15\BA] \001\FFL\89\F8\BE\03\00\00\00M\89\F7I\89\C6\E8\FD%\00\00H\89\C3\E85\F4\FF\FF\8B0H\8D\15 ?\00\001\FF1\C0H\89\D9\E8\A0\F6\FF\FFL+t$ \0F\85R\01\00\00\8BD$\04E1\D2\89\05h] \00H\8B|$xD \94$\8C\00\00\00\E8\D6\F3\FF\FFH\8B|$p\E8\CC\F3\FF\FFH\8B5M] \00H\8D=\18?\00\00\B9\02\00\00\00\F3\A6\0F\84\1E\FF\FF\FF\8B=/] \00\E8\06\F5\FF\FF\85\C0\0F\89\0B\FF\FF\FF\E9\CE\FE\FF\FFL\89\F8M\89\F7H\89\C3H+\\$ \0F\85\02\01\00\00\8BD$\04A\BA\01\00\00\00\89\05\F5\\ \00\EB\8BH\8B\84$\90\00\00\00H9\84$\B0\00\00\00\0F\85$\FA\FF\FFH\8B\84$\98\00\00\00H9\84$\B8\00\00\00\0F\85\0E\FA\FF\FF\8B=\C5\\ \001\F6\BA\01\00\00\00\E8U\F4\FF\FFH;\84$\E0\00\00\00\0F\8D\EE\F9\FF\FFH\8B\15\A8\\ \00\BE\03\00\00\001\FF\E8\F4$\00\00H\8D5\CC8\00\00H\89\C3\BA\05\00\00\001\FF\E8\AE\F3\FF\FFH\89\D9H\89\C21\F61\FF1\C0\E8\8D\F5\FF\FF\C6\84$\8C\00\00\00\00\E9\14\FF\FF\FFH\8B\15a\\ \00\BE\03\00\00\001\FF\E8\AD$\00\00H\89\C3\E8\E5\F2\FF\FF\8B0H\8D\15\D0=\00\00H\89\D91\FF1\C0\E8P\F5\FF\FF\C6\84$\8C", [4 x i8] zeroinitializer, [676 x i8] c"\E9\D7\FE\FF\FFH\8Bt$ L\89\F2\BF\01\00\00\00\E8\B1\08\00\00I9\C6\0F\84\93\FE\FF\FF\E9T\FD\FF\FFH\8Bt$ H\89\DA\BF\01\00\00\00\E8\91\08\00\00H9\C3\0F\84\E3\FE\FF\FF\E94\FD\FF\FF1\FF\E8\BC\F3\FF\FF\85\C0\0F\89\E4\FD\FF\FFH\8D5@8\00\00\BA\05\00\00\001\FF\E8\F1\F2\FF\FFH\89\C3\E8Y\F2\FF\FF\8B0H\89\DA\BF\01\00\00\001\C0\E8\C8\F4\FF\FFH\8BD$8I9\C7I\0FC\C7J\8D<0H\89\C5\E8\B0,\00\00I\01\C6H\89D$p1\D2L\89\F0L\89\F3H\F7t$hH)\D3\EB\1EH\85\C0tpH\89\C2H\89\DE\BF\01\00\00\00\E8\01\08\00\00I9\C6\0F\85\05\01\00\00\8B=V[ \00H\89\EAH\89\DE\E8\97%\00\00H\83\F8\FFI\89\C6u\C8H\8B\15?[ \00\BE\03\00\00\001\FF\E8\8B#\00\00H\89\C3\E8\C3\F1\FF\FF\8B0H\8D\15\AE<\00\00H\89\D91\FF1\C0\E8.\F4\FF\FFD \AC$\8C\00\00\00\E9\AB\FD\FF\FFA\BD\01\00\00\00\EB\EBH\8D5F6\00\00\BA\05\00\00\001\FF\E8\16\F2\FF\FFH\89\C3\E8~\F1\FF\FF\8B0H\89\DA\BF\01\00\00\001\C0\E8\ED\F3\FF\FFH\8D\05\A0<\00\00\E9k\F7\FF\FFH\8B5\C2Z \00\BF\04\00\00\00D\88T$\08H\89D$\10M\89\F7\E8\03\22\00\00H\8D5\F96\00\00\BA\05\00\00\001\FFH\89\C3\E8\BD\F1\FF\FFL\8B\\$\10H\89\C2H\89\D91\C01\FFA\8B3\E8\96\F3\FF\FF\8BD$\04D\0F\B6T$\08\89\05fZ \00\E9\F9\FC\FF\FF=~\FF\FF\FFu31\FF\E8\03\02\00\00H\8D5\A05\00\00\BA\05\00\00\001\FF\E8p\F1\FF\FFH\89\C3\E8\D8\F0\FF\FF\8B0H\89\DA\BF\01\00\00\001\C0\E8G\F3\FF\FF\BF\01\00\00\00\E8\CD\01\00\00\E8x\F1\FF\FFH\8D5@6\00\00\BA\05\00\00\001\FF\E85\F1\FF\FFH\89\C3\E8\9D\F0\FF\FF\8B0H\89\DA\BF\01\00\00\001\C0\E8\0C\F3\FF\FFf.\0F\1F\84\00\00\00\00\00f\901\EDI\89\D1^H\89\E2H\83\E4\F0PTL\8D\05\CA4\00\00H\8D\0DS4\00\00H\8D=\CC\F3\FF\FF\FF\15\A6X \00\F4\0F\1FD\00\00H\8D=yY \00UH\8D\05qY \00H9\F8H\89\E5t\19H\8B\05zX \00H\85\C0t\0D]\FF\E0f.\0F\1F\84\00", [4 x i8] zeroinitializer, [12 x i8] c"]\C3\0F\1F@\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [60 x i8] c"H\8D=9Y \00H\8D52Y \00UH)\FEH\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\18H\8B\05AX \00H\85\C0t\0C]\FF\E0f\0F\1F\84\00", [4 x i8] zeroinitializer, [12 x i8] c"]\C3\0F\1F@\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [52 x i8] c"\80=\11Y \00\00u/H\83=\17X \00\00UH\89\E5t\0CH\8B=\1AX \00\E8\CD\F2\FF\FF\E8H\FF\FF\FF\C6\05\E9X \00\01]\C3\0F\1F\80", [4 x i8] zeroinitializer, [148 x i8] c"\F3\C3f\0F\1FD\00\00UH\89\E5]\E9f\FF\FF\FFf\0F\1FD\00\00H\8B\0D\01X \00H\8D\05\F3W \00\EB\0DH\83\E8\01\C6@\010H9\C1w\13\0F\B6\10\80\FA8\7F\EB\83\C2\01\88\10\C3\0F\1FD\00\00H\8D\05\B9W \00H9\C1v,H\8DQ\FF\C6A\FF1H\89\15\BDW \00H\8B\05\BEW \00H9\D0v\0BH\83\E8\01H\89\05\AEW \00\F3\C3\0F\1F@\00\C6\05\81W \00>H\89\CA\EB\D7f\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [464 x i8] c"ATU\BA\05\00\00\00S\89\FDH\83\C4\80H\8B\1DZX \00dH\8B\04%(\00\00\00H\89D$x1\C0\85\FFt.H\8D5\0F5\00\001\FF\E8H\EF\FF\FFH\8B=\01X \00H\89\C2H\89\D9\BE\01\00\00\001\C0\E8\8F\F1\FF\FF\89\EF\E8h\F1\FF\FFH\8D5\095\00\001\FF\E8\1A\EF\FF\FFH\89\DAH\89\C6\BF\01\00\00\001\C0\E8\D8\F0\FF\FFH\8B\1D\A9W \00H\8D5\0A5\00\00\BA\05\00\00\001\FF\E8\EE\EE\FF\FFH\89\DEH\89\C7\E8\D3\EF\FF\FFH\8B\1D\84W \00H\8D5\155\00\00\BA\05\00\00\001\FF\E8\C9\EE\FF\FFH\89\DEH\89\C7\E8\AE\EF\FF\FFH\8B\1D_W \00H\8D5(5\00\00\BA\05\00\00\001\FF\E8\A4\EE\FF\FFH\89\DEH\89\C7\E8\89\EF\FF\FFH\8B\1D:W \00H\8D5S6\00\00\BA\05\00\00\001\FF\E8\7F\EE\FF\FFH\89\DEH\89\C7\E8d\EF\FF\FFH\8B\1D\15W \00H\8D5\067\00\00\BA\05\00\00\001\FF\E8Z\EE\FF\FFH\89\DEH\89\C7\E8?\EF\FF\FFH\8B\1D\F0V \00H\8D5\117\00\00\BA\05\00\00\001\FF\E85\EE\FF\FFH\89\DEH\89\C7\E8\1A\EF\FF\FFH\8B\1D\13W \00H\8D5$7\00\00\BA\05\00\00\001\FF\E8\10\EE\FF\FFH\89\D9H\89\DAH\89\C6\BF\01\00\00\001\C0H\8D\1Dx2\00\00\E8\C4\EF\FF\FFH\8D\05!2\00\00H\8D\0D[2\00\00H\8D\15h2\00\00H\89\\$@H\8D\1D\032\00\00H\C7D$`\00\00\00\00H\89\04$H\8D\05\F51\00\00H\89L$0H\89T$PH\C7D$h", [4 x i8] zeroinitializer, [520 x i8] c"H\89D$\08H\8D\05N2\00\00H\89D$\10H\8D\05\DA1\00\00H\89D$\18H\8D\05\E41\00\00H\89D$ H\8D\05\E21\00\00H\89D$(H\89D$8H\89D$HH\89D$XH\89\E0\0F\1FD\00\00H\83\C0\10H\8B8H\85\FFt\0C\B9\04\00\00\00H\89\DE\F3\A6u\E8L\8B`\081\FF\BA\05\00\00\00H\8D5\C91\00\00M\85\E4\0F\84\C1\00\00\00\E8(\ED\FF\FFH\8D\0D\B96\00\00H\8D\15\C41\00\00H\89\C6\BF\01\00\00\001\C0\E8\DB\EE\FF\FF1\F6\BF\05\00\00\00\E8\BF\EE\FF\FFH\85\C0t\1CH\8D5\AB1\00\00\BA\03\00\00\00H\89\C7\E8f\EC\FF\FF\85\C0\0F\85\07\01\00\00H\8D5\DF6\00\001\FF\BA\05\00\00\00\E8\CB\EC\FF\FFH\8D\0D\F40\00\00H\8D\15U6\00\00H\89\C6\BF\01\00\00\001\C0\E8~\EE\FF\FFI9\DCH\8D\0D\F40\00\00H\8D\1D~<\00\00H\0FD\D9H\8D5\BA6\00\001\FF\BA\05\00\00\00\E8\86\EC\FF\FFH\89\D9H\89\C6L\89\E2\BF\01\00\00\001\C0\E8A\EE\FF\FF\E9=\FD\FF\FF\E8g\EC\FF\FFH\8D\0D\F85\00\00H\8D\15\031\00\00H\89\C6\BF\01\00\00\001\C0\E8\1A\EE\FF\FF1\F6\BF\05\00\00\00\E8\FE\ED\FF\FFH\85\C0t\18H\8D5\EA0\00\00\BA\03\00\00\00H\89\C7\E8\A5\EB\FF\FF\85\C0uCH\8D5\226\00\00\BA\05\00\00\001\FFL\8D%<0\00\00H\8D\1DU0\00\00\E8\00\EC\FF\FFH\8D\0D)0\00\00H\8D\15\8A5\00\00H\89\C6\BF\01\00\00\001\C0\E8\B3\ED\FF\FF\E9E\FF\FF\FFL\8D%\070\00\00H\8D5\905\00\001\FF\BA\05\00\00\00\E8\C4\EB\FF\FFH\8D\15\ED/\00\00H\89\C6\BF\01\00\00\001\C0\E8~\ED\FF\FF\E9\CB\FE\FF\FFf\0F\1F\84\00", [4 x i8] zeroinitializer, [12 x i8] c"H\89=\81T \00\C3\0F\1F\84\00", [4 x i8] zeroinitializer, [12 x i8] c"@\88=iT \00\C3\0F\1F\84\00", [4 x i8] zeroinitializer, [188 x i8] c"USH\83\EC\08H\8B=\1BT \00\E8~(\00\00\85\C0t\16\E8\D5\EA\FF\FF\80=>T \00\00H\89\C3t\1C\838 u\17H\8B=\0DT \00\E8X(\00\00\85\C0uFH\83\C4\08[]\C3H\8D5Z/\00\001\FF\BA\05\00\00\00\E8*\EB\FF\FFH\8B=\0BT \00H\89\C5H\85\FFt(\E8\16\1C\00\00\8B3H\8D\15m5\00\00H\89\C1I\89\E81\FF1\C0\E8\EE\EC\FF\FF\8B=\18S \00\E8\83\EA\FF\FF\8B3H\8D\15N5\00\00H\89\C11\FF1\C0\E8\CE\EC\FF\FF\EB\DEf.\0F\1F\84\00\00\00\00\00f\90\E9\8B\EB\FF\FF\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [40 x i8] c"H\85\FFt\1BS\89\F3\E8\E3\EB\FF\FF\89\D91\D21\F6[\89\C7\E9e\EB\FF\FF\0F\1FD\00\00\F3\C3f.\0F\1F\84\00", [4 x i8] zeroinitializer, [128 x i8] c"\0F\1F@\00AUATUSH\83\EC\08H\85\D2tbA\89\FDH\89\F5H\89\D3E1\E4\EB\13\0F\1F\00H\85\C0t3I\01\C4H\01\C5H)\C3t\14H\89\DAH\89\EED\89\EF\E8\D2\1D\00\00H\83\F8\FFu\DCH\83\C4\08L\89\E0[]A\\A]\C3f\0F\1FD\00\00\E8\A3\E9\FF\FF\C7\00\1C\00\00\00H\83\C4\08L\89\E0[]A\\A]\C3E1\E4\EB\CEf.\0F\1F\84\00", [4 x i8] zeroinitializer, [156 x i8] c"H\85\FFStq\BE/\00\00\00H\89\FB\E8]\EA\FF\FFH\85\C0tOH\8DP\01H\89\D1H)\D9H\83\F9\06~?H\8Dp\FAH\8D=}4\00\00\B9\07\00\00\00\F3\A6u+H\8D=u4\00\00\B9\03\00\00\00H\89\D6H\89\D3\F3\A6@\0F\97\C6\0F\92\C1@8\CEu\0BH\8DX\04H\89\1DIR \00H\89\1D\92R \00H\89\1DSR \00[\C3H\8B\0DRR \00H\8D=\F33\00\00\BA7\00\00\00\BE\01\00\00\00\E8\CC\EB\FF\FF\E8\D7\E8\FF\FF\0F\1F\80", [4 x i8] zeroinitializer, [236 x i8] c"USH\89\FD\89\F3H\83\EC\08\E8P'\00\00\0F\B6\10\83\E2\DF\80\FAUtu\80\FAGt H\8D\05\044\00\00H\8D\15\FF3\00\00\83\FB\09H\0FE\C2H\83\C4\08[]\C3\0F\1F@\00\0F\B6P\01\83\E2\DF\80\FABu\D4\80x\021u\CE\80x\038u\C8\80x\040u\C2\80x\053u\BC\80x\060u\B6\80x\07\00u\B0\80}\00`H\8D\05\A93\00\00H\8D\15\A63\00\00H\0FE\C2H\83\C4\08[]\C3\0F\1F\00\0F\B6P\01\83\E2\DF\80\FATu\84\0F\B6P\02\83\E2\DF\80\FAF\0F\85t\FF\FF\FF\80x\03-\0F\85j\FF\FF\FF\80x\048\0F\85`\FF\FF\FF\80x\05\00\0F\85V\FF\FF\FF\80}\00`H\8D\05G3\00\00H\8D\15D3\00\00H\0FE\C2H\83\C4\08[]\C3f\0F\1F\84\00", [4 x i8] zeroinitializer, [460 x i8] c"AWAVE\89\C7AUATI\89\FEUSD\89\CBI\89\F5H\89\CD\83\E3\02H\81\EC\B8\00\00\00H\8B\84$\F0\00\00\00H\89T$\10D\89D$\08D\89L$xH\89D$ H\8B\84$\F8\00\00\00H\89D$hH\8B\84$\00\01\00\00H\89D$`dH\8B\04%(\00\00\00H\89\84$\A8\00\00\001\C0\E8\1F\E8\FF\FFA\83\FF\0AH\89D$X\0F\87\AF\11\00\00H\8D\0D\193\00\00D\89\FAHc\04\91H\01\C8\FF\E0\C6D$\0E\01\C6D$|\00E1\E4H\C7D$P\00\00\00\00\C6D$\0F\01\C6D$\0D\00H\8D\05\832\00\00H\C7D$\18\01\00\00\00E1\FF\C7D$\08\02\00\00\00H\89D$HE1\DBH\89\E8E\89\E0L\89\DDI\89\C3f\0F\1FD\00\00I9\EBA\0F\95\C4I\83\FB\FFu\0DH\8BD$\10\80<(\00A\0F\95\C4E\84\E4\0F\84U\06\00\00\83|$\08\02H\8B|$\10L\8D\0C/\0F\95\C0\22D$\0DA\89\C2\0F\84\A7\00\00\00H\8BD$\18H\85\C0\0F\84)\04\00\00I\83\FB\FFH\8D\\\05\00u.H\83\F8\01v(D\88D$8D\88T$0L\89L$(\E8D\E7\FF\FFD\0F\B6D$8D\0F\B6T$0I\89\C3L\8BL$(L9\DBD\88T$(\0F\87\B2\05\00\00H\8BT$\18H\8Bt$HL\89\CFL\89\\$@D\88D$8L\89L$0\E8\C1\E7\FF\FF\85\C0L\8BL$0D\0F\B6D$8L\8B\\$@\0F\85y\05\00\00\80|$\0F\00D\0F\B6T$(\0F\85}\0F\00\00\0F\1F\84\00", [4 x i8] zeroinitializer, [84 x i8] c"A\0F\B6\19\80\FB~\0F\87\1B\03\00\00H\8D\0D\E81\00\00\0F\B6\D3Hc\04\91H\01\C8\FF\E0E1\D2I\83\FB\01\0F\95\C0I\83\FB\FFu\0CH\8BD$\10\80x\01\00\0F\95\C0\83|$\08\02\0F\94\C2\84\C0\0F\84L\02\00\00E1\E41\C0\0F\1F\80", [4 x i8] zeroinitializer, [148 x i8] c"\80|$\0D\01\0F\85\0F\01\00\00\84\D2\0F\85\07\01\00\00H\8Bt$ H\85\F6t\14\89\DA\C0\EA\05\0F\B6\D2\8B\14\96\0F\A3\DA\0F\82J\01\00\00E\84\D2\0F\85A\01\00\00\83\F0\01H\83\C5\01D!\C0\84\C0t M9\FDv\05C\C6\04>'I\8DG\01I9\C5v\06C\C6D>\01'I\83\C7\02E1\C0M9\EFs\04C\88\1C>\0F\B6|$\0EI\83\C7\01\B8\00\00\00\00E\84\E4\0FD\F8@\88|$\0E\E91\FE\FF\FFf\0F\1F\84\00", [4 x i8] zeroinitializer, [84 x i8] c"E1\D2\8BD$\08\83\F8\02\0F\84\B8\05\00\00\83\F8\05\0F\84o\05\00\00\83\F8\02\BB?\00\00\00\0F\94\C2E1\E41\C0\E9:\FF\FF\FFf\90E1\D2\83|$\08\02\0F\84\02\05\00\00D\88d$|1\D21\C0\BB'\00\00\00\E9\17\FF\FF\FF\0F\1F\80", [4 x i8] zeroinitializer, [244 x i8] c"\BA\09\00\00\00\BBt\00\00\00\83|$\08\02\0F\94\C0\22D$\0F\0F\85J\01\00\00\80|$\0D\00ue\89\D3E1\E41\C0\80|$\0F\00\0F\85\EE\FE\FF\FF\E9\07\FF\FF\FFf\0F\1FD\00\00\BA\08\00\00\00\BBb\00\00\00\EB\D0\0F\1F@\00\83|$\08\02\0F\84\CD\03\00\00\80|$\0D\00\0F\84\12\02\00\00\80|$\0F\00\0F\84\07\02\00\00H\83|$\18\00\0F\85\B6\03\00\00\BB\\\00\00\00f\0F\1FD\00\00E1\E4\83|$\08\02\0F\94\C2\80|$\0F\00\89\D0\0F\85P\08\00\00D\89\C0\83\F0\01 \D0t/M9\FDv\05C\C6\04>'I\8DW\01I9\D5v\06C\C6D>\01$I\8DW\02I9\D5v\06C\C6D>\02'I\83\C7\03A\89\C0M9\FDv\05C\C6\04>\\I\83\C7\01H\83\C5\01\E9\88\FE\FF\FF\0F\1F\84\00", [4 x i8] zeroinitializer, [36 x i8] c"\80|$\0D\00\0F\85\C8\01\00\001\D2\F6D$x\01\0F\84\13\FF\FF\FFH\83\C5\01\E9\B7\FC\FF\FF\0F\1F\80", [4 x i8] zeroinitializer, [20 x i8] c"\83|$\08\02\0F\94\C21\C0\E9\E1\FD\FF\FFf\0F\1F\84\00", [4 x i8] zeroinitializer, [604 x i8] c"\BA\07\00\00\00\BBa\00\00\00\E9\D5\FE\FF\FF\90\83|$\08\02\0F\94\C2H\85\ED\0F\85\AB\FD\FF\FF\0F\B6D$\0F \D0\0F\84\AA\FD\FF\FFL\89\DD\C7D$\08\02\00\00\00\E9\FB\06\00\00f\90\83|$\08\02\0F\94\C2E1\E4\EB\D4\0F\1F\00\83|$\08\02\BB \00\00\00\0F\94\C2\EB\C2\90\BA\0D\00\00\00\BBr\00\00\00\E9c\FE\FF\FF\90\BA\0C\00\00\00\BBf\00\00\00\E9e\FE\FF\FF\90\BA\0B\00\00\00\BBv\00\00\00\E9U\FE\FF\FF\90\BA\0A\00\00\00\BBn\00\00\00\E93\FE\FF\FF\90E1\D2\0F\1FD\00\00H\83|$X\01\0F\85\A4\03\00\00L\89\\$8D\88D$0D\88T$(\E8\F8\E5\FF\FFH\8B\08\0F\B6\D3D\0F\B6T$(D\0F\B6D$0L\8B\\$8\BF\01\00\00\00\0F\B7\04Qf%\00@A\0F\95\C4\0F\94\C0\22D$\0D\84\C0\0F\85\92\09\00\00\83|$\08\02\0F\94\C2\E9\CC\FC\FF\FF\0F\1F@\00A\0F\B6\19\80\FB~w\87H\8D\0DX0\00\00\0F\B6\D3Hc\04\91H\01\C8\FF\E0\0F\1F@\00E1\D2\80|$\0D\00\0F\85\F0\FD\FF\FFf\90\BA\\\00\00\00\BB\\\00\00\00\E9\95\FD\FF\FF\90\BA\0C\00\00\00E1\D2\BBf\00\00\00\E9\82\FD\FF\FFf\0F\1FD\00\00\BA\0A\00\00\00E1\D2\BBn\00\00\00\E9X\FD\FF\FFf\0F\1FD\00\00\BBa\00\00\00\E9\C6\FD\FF\FFf\0F\1FD\00\00E1\D2\83|$\08\02\0F\94\C2\80|$\0F\00\0F\85\94\0B\00\00D\89\C0L\89\F9\83\F0\01 \D0t-M9\FDv\05C\C6\04>'I\8DO\01I9\CDv\06C\C6D>\01$I\8DO\02I9\CD\0F\870\06\00\00I\8DO\03A\89\C0I9\CDv\05A\C6\04\0E\\\83|$\08\02L\8Dy\01\0F\84\00\06\00\00H\8DE\01L9\D8s\19H\8BD$\10\0F\B6D(\01\88D$(\83\E80<\09\0F\86.\08\00\00D\89\E0\BB0\00\00\00E1\E4\E9\AD\FB\FF\FF\0F\1FD\00\00\83|$\08\02E\89\D4\0F\94\C2E1\D21\C0\E9\93\FB\FF\FF\0F\1F\00\83|$\08\02\0F\94\C2E1\D2\E9\C0\FD\FF\FF\0F\1F\84\00", [4 x i8] zeroinitializer, [140 x i8] c"\83|$\08\02\0F\94\C2E1\D2E1\E4\E9\AE\FD\FF\FF\0F\1FD\00\00\83|$\08\02E\89\D4\BB \00\00\00\0F\94\C2E1\D2\E9\91\FD\FF\FF\BA\0D\00\00\00E1\D2\BBr\00\00\00\E90\FC\FF\FFf\0F\1FD\00\00\BBv\00\00\00\E9\9E\FC\FF\FFf\0F\1FD\00\00\BA\09\00\00\00E1\D2\BBt\00\00\00\E9\08\FC\FF\FFf\0F\1FD\00\00\BBb\00\00\00\E9v\FC\FF\FFf\0F\1FD\00\00E1\D2\E9\98\FA\FF\FF\0F\1F\84\00", [4 x i8] zeroinitializer, [188 x i8] c"\80|$\0F\00\0F\85e\09\00\00H\83\C5\01D\89\C0E1\E4\BB\\\00\00\00\E9\0D\FB\FF\FF\90\83|$\08\02\0F\B6\\$\0FE\89\C4L\89\DD\0F\94\C2\89\D8M\85\FF\0F\94\C1!\D0 \C8\0F\85a\0A\00\00\89\D8\83\F0\01 \C2\0F\84j\09\00\00\80|$|\00\0F\84]\09\00\00\80|$\0E\00\0F\85\F5\09\00\00M\85\ED\0F\94\C0H\83|$P\00\0F\95\C2 \D0\0F\84\1D\0A\00\00L\8Bl$PH\8D\1Dr+\00\00A\C6\06'\C7D$\08\02\00\00\00A\BF\01\00\00\00H\C7D$\18\01\00\00\00\C6D$\0F\00H\89\\$H\88D$|\E9\DA\F8\FF\FF\0F\1F\80", [4 x i8] zeroinitializer, [108 x i8] c"\80|$\0F\00\0F\85\A5\08\00\00M\85\ED\0F\84\FC\03\00\001\D2H\83|$P\00\0F\85\EE\03\00\00L\89l$PI\83\C7\031\C0D\88d$|E1\C0I\89\D5\BB'\00\00\00\E9\17\FA\FF\FFf\0F\1FD\00\00\F6D$x\04t!H\8DM\02L9\D9s\18H\8BD$\10\80|(\01?\0F\84\8A\07\00\00\0F\1F\84\00", [4 x i8] zeroinitializer, [20 x i8] c"1\D2E1\E41\C0\BB?\00\00\00\E9\A7\F9\FF\FF\0F\1F\80", [4 x i8] zeroinitializer, [52 x i8] c"\80|$\0F\00\0F\85\1D\08\00\00E1\E41\C0\BB?\00\00\00\E9\B7\F9\FF\FFf\0F\1FD\00\00H\8D\84$\A0\00\00\00I\83\FB\FFH\C7\84$\A0\00\00\00", [4 x i8] zeroinitializer, [332 x i8] c"H\89D$(u-H\8B|$\10D\88D$@D\88T$8L\89L$0\E8\C0\DF\FF\FFD\0F\B6D$@D\0F\B6T$8I\89\C3L\8BL$0H\8D\84$\9C\00\00\001\C9\88\\$~D\88D$}H\89\CBL\89\8C$\88\00\00\00H\89D$8D\88T$\7FL\89\BC$\80\00\00\00L\89t$@L\89l$pL\89\\$0H\8BD$\10L\8Dt\1D\00H\8BT$0H\8BL$(H\8B|$8N\8D,0L)\F2L\89\EE\E8\A5\1B\00\00H\85\C0I\89\C7tNH\83\F8\FF\0F\84\18\06\00\00H\83\F8\FE\0F\84\9A\05\00\00\83|$\08\02\0F\94\C0\22D$\0F\0F\85\97\01\00\00\8B\BC$\9C\00\00\00\E8k\E1\FF\FFH\8B|$(\85\C0\B8\00\00\00\00D\0FD\E0L\01\FB\E8C\E1\FF\FF\85\C0t\82D\89\E2H\89\DFD\0F\B6D$}\83\F2\01\0F\B6\\$~D\0F\B6T$\7F\22T$\0DL\8B\BC$\80\00\00\00L\8Bt$@L\8Bl$pL\8B\\$0H\83\FF\01\0F\86\FB\05\00\00H\89\F91\F6D\0F\B6L$\0FH\01\E9H\8B|$\10\E9\B6\00\00\00\0F\1F\84\00", [4 x i8] zeroinitializer, [860 x i8] c"\83|$\08\02\0F\94\C0E\84\C9\0F\85\AF\04\00\00D\89\C6\83\F6\01@ \F0t/M9\FDv\05C\C6\04>'I\8Dw\01I9\F5v\06C\C6D>\01$I\8Dw\02I9\F5v\06C\C6D>\02'I\83\C7\03A\89\C0M9\FDv\05C\C6\04>\\I\8DG\01I9\C5v\0D\89\D8\C0\E8\06\83\C00C\88D>\01I\8DG\02I9\C5v\10\89\D8\C0\E8\03\83\E0\07\83\C00C\88D>\02\83\E3\07H\83\C5\01I\83\C7\03\83\C30H9\CD\0F\83\E5\F7\FF\FF\89\D6M9\FDv\04C\88\1C>\0F\B6\1C/I\83\C7\01\84\D2\0F\85J\FF\FF\FF\89\F0\83\F0\01D!\C0E\84\D2t\0EM9\FDv\05C\C6\04>\\I\83\C7\01H\83\C5\01H9\CD\0F\83~\F7\FF\FF\84\C0\0F\84\F8\03\00\00M9\FDv\05C\C6\04>'I\8DG\01I9\C5v\06C\C6D>\01'I\83\C7\02E1\D2E1\C0\EB\92\0F\1FD\00\00I\83\FF\01\0F\84_\FE\FF\FFH\8B|$\10J\8D\0C?J\8DT7\01N\8D\041\EB\0Ff\90H\83\C2\01I9\D0\0F\84<\FE\FF\FF\0F\B6\0A\83\E9[\80\F9!w\E8\BE\01\00\00\00H\D3\E6H\89\F1H\BE+\00\00\00\02\00\00\00H\85\F1t\CEL\8Bt$@L\8Bl$pH\8Bl$0\C7D$\08\02\00\00\00\80|$\0D\00t\10\84\C0\B8\04\00\00\00\0FDD$\08\89D$\08H\83\EC\08H\89\E9L\89\EE\FFt$h\FFt$xL\89\F7j\00D\8B\8C$\98\00\00\00D\8BD$(H\8BT$0A\83\E1\FD\E8.\F4\FF\FFH\83\C4 I\89\C7H\8B\9C$\A8\00\00\00dH3\1C%(\00\00\00L\89\F8\0F\85\00\06\00\00H\81\C4\B8\00\00\00[]A\\A]A^A_\C3\0F\1F\00L\89\DD\E9y\FF\FF\FFM9\FDv\05C\C6\04>'I\8DG\01I9\C5v\06C\C6D>\01\\I\8DG\02I9\C5\0F\86\EC\05\00\00L\89\EAC\C6D>\02'L\8Bl$P\E9\D9\FB\FF\FFD\89\E0\BB0\00\00\00E1\E4\E9\00\F6\FF\FFC\C6D>\02'\E9\C5\F9\FF\FF\85\DB\0F\85'\F4\FF\FF\C6D$\0D\01M\85\ED\0F\85\90\05\00\00H\8D\05\BC&\00\00H\C7D$P\00\00\00\00\C6D$\0E\01\C6D$|\00E1\E4\C6D$\0F\00H\C7D$\18\01\00\00\00H\89D$HA\BF\01\00\00\00\C7D$\08\02\00\00\00\E9\16\F4\FF\FF\0F\1F\00\85\DB\0F\85\F5\03\00\00M\85\ED\0F\84%\02\00\00A\C6\06\22\C6D$\0E\01E1\E4\C6D$|\00H\C7D$P\00\00\00\00H\8D\05I&\00\00\C6D$\0F\00\C6D$\0D\01H\C7D$\18\01\00\00\00A\BF\01\00\00\00H\89D$H\E9\BE\F3\FF\FFH\8D\05\1F&\00\00\C6D$\0E\01\C6D$|\00E1\E4H\C7D$P\00\00\00\00\C6D$\0F\01\C6D$\0D\01H\C7D$\18\01\00\00\00E1\FFH\89D$H\C7D$\08\05\00\00\00\E9y\F3\FF\FF\C6D$\0E\01\C6D$|\00E1\E4H\C7D$P", [4 x i8] zeroinitializer, [188 x i8] c"\C6D$\0F\00E1\FF\C6D$\0D\01H\C7D$\18\00\00\00\00H\C7D$H\00\00\00\00\E9?\F3\FF\FF\83|$\08\0AtVH\8D5\9D%\00\001\FF\BA\05\00\00\00\E8\D2\DA\FF\FFH\89\C1H\89D$hH\8D\05\82%\00\00H9\C1\0F\84\98\03\00\00H\8D5p%\00\001\FF\BA\05\00\00\00\E8\A7\DA\FF\FFH\89\C1H\89D$`H\8D\05U%\00\00H9\C1\0F\84\83\03\00\00E1\FF\85\DB\0F\84\C1\01\00\00\85\DBH\8B\\$`\0F\95D$\0FE1\E4H\89\DF\E8\8D\DA\FF\FFH\89\\$HH\89D$\18\C6D$\0E\01\C6D$|\00H\C7D$P", [4 x i8] zeroinitializer, [28 x i8] c"\C6D$\0D\01\E9\99\F2\FF\FF\C6D$\0E\01\C6D$|\00E1\E4H\C7D$P", [4 x i8] zeroinitializer, [124 x i8] c"\C6D$\0F\00E1\FF\C6D$\0D\00H\C7D$\18\00\00\00\00H\C7D$H\00\00\00\00\E9_\F2\FF\FF\C6D$\0E\01\C6D$|\00E1\E4H\C7D$P\00\00\00\00\C6D$\0F\01\C6D$\0D\01\E9\1A\F2\FF\FFM9\FDv\05C\C6\04>0H\8DA\02I9\C5v\06A\C6D\0E\020D\89\E0L\8Dy\03E1\E4\BB0\00\00\00\E9b\F3\FF\FFf.\0F\1F\84\00", [4 x i8] zeroinitializer, [140 x i8] c"\0F\B6\\$\0FL\89\DD\88\\$\0D\E9\A8\FC\FF\FF\0F\B6T$\0DE1\E4\E9\02\FB\FF\FFE1\D2\E9\B7\FB\FF\FFH\C7D$P\00\00\00\00\C6D$\0E\01E1\E4\C6D$|\00\E9\DA\FD\FF\FFL\8B\\$0L\89\F6L\89\E9H\89\D8H\89\DFD\0F\B6D$}\0F\B6\\$~L\8B\8C$\88\00\00\00L9\DED\0F\B6T$\7FL\8B\BC$\80\00\00\00L\8Bt$@L\8Bl$ps&\809\00u\10\EB\1F\0F\1F\80", [4 x i8] zeroinitializer, [732 x i8] c"A\80<\01\00t\0EH\83\C0\01H\8DT\05\00I9\D3w\EBH\89\C7\0F\B6T$\0DE1\E4\E9a\FA\FF\FFH\89\DFD\0F\B6D$}\0F\B6\\$~D\0F\B6T$\7FL\8B\BC$\80\00\00\00E1\E4L\8Bt$@L\8Bl$pL\8B\\$0\0F\B6T$\0D\E9)\FA\FF\FFH\8BT$h\0F\B6\02\84\C0\0F\84/\FE\FF\FF\0F\1F\00M9\FDv\04C\88\04>I\83\C7\01B\0F\B6\04:\84\C0u\EA\E9\11\FE\FF\FF\89\D0\E9U\F5\FF\FF\0F\B6\1C\08\80\FB>\0F\87q\F8\FF\FFH\B8\00\00\00\00\82\A3\00pH\0F\A3\D8\0F\83]\F8\FF\FF\80|$\0F\00\0F\85\E4\01\00\00M9\FDv\05C\C6\04>?I\8DG\01I9\C5v\06C\C6D>\01\22I\8DG\02I9\C5v\06C\C6D>\02\22I\8DG\03I9\C5v\06C\C6D>\03?I\83\C7\041\D2E1\E41\C0H\89\CD\E9\C0\F1\FF\FF\85\DB\0F\84\88\01\00\00H\8D\05\C6\22\00\00\C6D$\0E\01\C6D$|\00E1\E4H\C7D$P\00\00\00\00\C6D$\0F\01\C6D$\0D\00H\C7D$\18\01\00\00\00E1\FFH\89D$H\E9&\F0\FF\FF\0F\1F\00L\89\DD\0F\B6D$\0F\E9\CC\FA\FF\FFH\8D\05w\22\00\00\C6D$\0E\01\C6D$|\00E1\E4H\C7D$P\00\00\00\00\C6D$\0F\01\C6D$\0D\01H\C7D$\18\01\00\00\00E1\FFH\89D$H\E9\D9\EF\FF\FF\89\D0H\8B\\$HH\85\DBt,\84\C0t(\0F\B6\0BH\89\D8\84\C9t\1EL\89\FAL)\F8I9\D5v\04A\88\0C\16H\83\C2\01\0F\B6\0C\10\84\C9u\EBI\89\D7M9\FD\0F\86\9E\FA\FF\FFC\C6\04>\00\E9\94\FA\FF\FF\83|$\08\02\0F\B6\\$\0FL\89\DD\0F\94\C0\88\\$\0D\E9+\FA\FF\FF\8Bt$\08H\89\CF\E8\A6\ED\FF\FFH\89D$h\E9R\FC\FF\FF\8Bt$\08H\89\CF\E8\90\ED\FF\FFH\89D$`\E9g\FC\FF\FF\0F\B6\\$\0FL\89\DD\89\D0\88\\$\0D\E9\EC\F9\FF\FFH\83\EC\08A\B8\05\00\00\00L\89\D9\FFt$h\FFt$xL\89\F7\FFt$8D\8B\8C$\98\00\00\00H\8BT$0H\8Bt$p\E80\EE\FF\FFH\83\C4 I\89\C7\E9\FD\F9\FF\FF\0F\B6D$|\E9\16\FF\FF\FF\C7D$\08\02\00\00\00\E9\96\F9\FF\FF\E8\B8\D6\FF\FF\C6D$\0D\00\E9o\FA\FF\FFL\89\DD\E9\96\F9\FF\FF\C6D$\0E\011\C0E1\E4H\C7D$P\00\00\00\00\E9\A2\F5\FF\FFL\89\EAL\8Bl$P\E9\F3\F5\FF\FF\E8\AC\D5\FF\FFf\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [492 x i8] c"AWAVLc\FFAUATI\89\D6USH\89\CDH\83\EC(H\89t$\08\E8\8F\D5\FF\FFI\89\C5\8B\00E\85\FFH\8B\1D\90> \00\89D$\18\0F\88g\01\00\00D9=w> \00\7FbA\81\FF\FE\FF\FF\7F\0F\87V\01\00\00E\8Dg\01H\8D\05u> \00Ic\F4H\C1\E6\04H9\C3\0F\84\15\01\00\00H\89\DF\E8\1D\10\00\00H\89\C3H\89\05C> \00Hc=4> \00D\89\E21\F6)\FAH\C1\E7\04Hc\D2H\01\DFH\C1\E2\04\E8\22\D6\FF\FFD\89%\13> \00\8BE\04I\C1\E7\04H\83\EC\08L\01\FBL\8D}\08D\8BE\00L\8B\1BL\8Bc\08L\89\F1\83\C8\01\89D$$\FFu0A\89\C1\FFu(AWL\89\DEH\8BT$(L\89\E7L\89\\$0\E8\D4\EC\FF\FFH\83\C4 L\8B\\$\10I9\C3wgH\8Dp\01H\8D\05;> \00I9\C4H\893t\12L\89\E7H\89t$\10\E8v\D4\FF\FFH\8Bt$\10H\89\F7H\89t$\10\E8\04\0F\00\00H\83\EC\08H\89C\08D\8BE\00\FFu0\FFu(L\89\F1AWD\8BL$<H\89\C7H\8BT$(H\8Bt$0I\89\C4\E8c\EC\FF\FFH\83\C4 \8BD$\18A\89E\00H\83\C4(L\89\E0[]A\\A]A^A_\C3\0F\1FD\00\001\FF\E8\09\0F\00\00f\0Fo\05A= \00H\89\C3H\89\05'= \00\0F\11\00\E9\DC\FE\FF\FF\E8\FA\D3\FF\FF\E8\D5\10\00\00\0F\1FD\00\00ATUSH\89\FB\E8\F4\D3\FF\FFD\8B H\89\C5H\8D\05w> \00H\85\DB\BE8\00\00\00H\0FD\D8H\89\DF\E8S\10\00\00D\89e\00[]A\\\C3f.\0F\1F\84\00", [4 x i8] zeroinitializer, [28 x i8] c"H\8D\05I> \00H\85\FFH\0FD\F8\8B\07\C3\0F\1FD\00\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [28 x i8] c"H\8D\05)> \00H\85\FFH\0FD\F8\897\C3\0F\1FD\00\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [60 x i8] c"H\8D\05\09> \00H\85\FF\89\F1H\0FD\F8\89\F0\83\E1\1F\C0\E8\05\0F\B6\C0H\8D|\87\08\8B7\89\F0\D3\E81\C2\83\E0\01\83\E2\01\D3\E21\F2\89\17\C3\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [28 x i8] c"H\8D\05\C9= \00H\85\FFH\0FD\F8\8BG\04\89w\04\C3\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [172 x i8] c"H\8D\05\A9= \00H\85\FFH\0FD\F8H\85\F6\C7\07\0A\00\00\00t\0EH\85\D2t\09H\89w(H\89W0\C3H\83\EC\08\E8\E0\D2\FF\FFAWAVH\8D\05u= \00AUATI\89\FDUSL\89\C3I\89\F6I\89\D7H\83\EC\18M\85\C0H\0FD\D8H\89L$\08\E8\BE\D2\FF\FFD\8B H\89\C5H\8DC\08H\83\EC\08D\8BK\04\FFs0D\8B\03\FFs(L\89\FAPH\8BL$(L\89\F6L\89\EF\E8\9F\EA\FF\FFD\89e\00H\83\C48[]A\\A]A^A_\C3f\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [236 x i8] c"AWAVH\8D\05\F5< \00AUATI\89\D4USH\89\CBI\89\FEI\89\F7H\83\EC8H\85\C9H\0FD\D81\ED\E8A\D2\FF\FFM\85\E4I\89\C5\8B\00@\0F\94\C5\0Bk\04L\8DS\08H\83\EC\08D\8B\03L\89\F9\89D$\14\FFs0L\89\F2\FFs(AR1\F6A\89\E91\FFL\89T$@\E8\14\EA\FF\FFH\8Dp\01H\89D$HH\83\C4 H\89\F7H\89t$\18\E8j\0C\00\00H\89D$\10H\83\EC\08\FFs0\FFs(L\8BT$8A\89\E9D\8B\03L\89\F9L\89\F2H\89\C7ARH\8Bt$8\E8\CB\E9\FF\FF\8BD$,H\83\C4 M\85\E4A\89E\00t\09L\8B\\$(M\89\1C$H\8BD$\10H\83\C48[]A\\A]A^A_\C3\0F\1F\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [60 x i8] c"H\89\D11\D2\E9\06\FF\FF\FFf\0F\1FD\00\00\8B\05r: \00ATL\8B%q: \00US\83\F8\01~+\83\E8\02I\8D\\$\18H\C1\E0\04I\8Dl\04(f\0F\1F\84\00", [4 x i8] zeroinitializer, [108 x i8] c"H\8B;H\83\C3\10\E8\14\D1\FF\FFH9\EBu\EFI\8B|$\08H\8D\1D\B3: \00H9\DFt\17\E8\F9\D0\FF\FFH\C7\05.: \00\00\01\00\00H\89\1D/: \00H\8D\1D : \00I9\DCt\0FL\89\E7\E8\D3\D0\FF\FFH\89\1D\FC9 \00[\C7\05\E99 \00\01\00\00\00]A\\\C3\0F\1F\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [28 x i8] c"H\8D\0DY; \00H\C7\C2\FF\FF\FF\FF\E9\0D\FB\FF\FF\0F\1F\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [44 x i8] c"H\8D\0D9; \00\E9\F4\FA\FF\FF\0F\1F@\00H\8D\0D); \00H\89\FEH\C7\C2\FF\FF\FF\FF1\FF\E9\D8\FA\FF\FF\0F\1F\84\00", [4 x i8] zeroinitializer, [28 x i8] c"H\8D\0D\09; \00H\89\F2H\89\FE1\FF\E9\BC\FA\FF\FFf\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [76 x i8] c"H\83\ECHH\89\D0dH\8B\14%(\00\00\00H\89T$81\D2\83\FE\0Ath\894$H\89\E1H\C7\C2\FF\FF\FF\FFH\89\C6H\C7D$\04\00\00\00\00H\C7D$\0C\00\00\00\00H\C7D$\14\00\00\00\00H\C7D$\1C", [4 x i8] zeroinitializer, [136 x i8] c"H\C7D$$\00\00\00\00H\C7D$,\00\00\00\00\C7D$4\00\00\00\00\E8A\FA\FF\FFH\8BL$8dH3\0C%(\00\00\00u\0AH\83\C4H\C3\E8\C7\CF\FF\FF\E8\92\D0\FF\FFf\90H\83\ECHH\89\D0H\89\CAdH\8B\0C%(\00\00\00H\89L$81\C9\83\FE\0Ata\894$H\89\E1H\89\C6H\C7D$\04\00\00\00\00H\C7D$\0C\00\00\00\00H\C7D$\14\00\00\00\00H\C7D$\1C", [4 x i8] zeroinitializer, [256 x i8] c"H\C7D$$\00\00\00\00H\C7D$,\00\00\00\00\C7D$4\00\00\00\00\E8\B5\F9\FF\FFH\8BT$8dH3\14%(\00\00\00u\0AH\83\C4H\C3\E8;\CF\FF\FF\E8\06\D0\FF\FFf\0F\1FD\00\00H\89\F2\89\FE1\FF\E9\D4\FE\FF\FF\0F\1F@\00H\89\D1H\89\F2\89\FE1\FF\E9Q\FF\FF\FF\90H\83\ECH\89\D1dH\8B\04%(\00\00\00H\89D$81\C0H\8B\05\C39 \00I\89\E0\83\E1\1Ff\0Fo\05\859 \00H\89D$0\89\D0\0F)\04$\C0\E8\05\0F\B6\C0M\8DL\80\08f\0Fo\05w9 \00\0F)D$\10f\0Fo\05z9 \00\0F)D$ A\8B\11\89\D0\D3\E8\F7\D0\83\E0\01\D3\E0L\89\C11\D0H\89\F2H\89\FEA\89\011\FF\E8\F2\F8\FF\FFH\8Bt$8dH34%(\00\00\00u\05H\83\C4H\C3\E8H\CF\FF\FF\0F\1F\84\00", [4 x i8] zeroinitializer, [44 x i8] c"@\0F\BE\D6H\C7\C6\FF\FF\FF\FF\E9P\FF\FF\FF\BA:\00\00\00H\C7\C6\FF\FF\FF\FF\E9?\FF\FF\FF\0F\1FD\00\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [92 x i8] c"\BA:\00\00\00\E9&\FF\FF\FFf\0F\1FD\00\00H\83\ECHH\89\D0dH\8B\14%(\00\00\00H\89T$81\D2\83\FE\0Ath\894$H\89\E1H\C7\C2\FF\FF\FF\FFH\89\C6H\C7D$\04\00\00\00\00H\C7D$\0C\00\00\00\04H\C7D$\14\00\00\00\00H\C7D$\1C", [4 x i8] zeroinitializer, [220 x i8] c"H\C7D$$\00\00\00\00H\C7D$,\00\00\00\00\C7D$4\00\00\00\00\E8!\F8\FF\FFH\8BL$8dH3\0C%(\00\00\00u\0AH\83\C4H\C3\E8\A7\CD\FF\FF\E8r\CE\FF\FFf\90H\83\ECHI\89\C9H\8B\0Db8 \00f\0Fo\05*8 \00dH\8B\04%(\00\00\00H\89D$81\C0\0F)\04$H\85\F6H\89L$0\C7\04$\0A\00\00\00f\0Fo\05\0F8 \00\0F)D$\10f\0Fo\05\128 \00\0F)D$ t2H\85\D2t-H\89t$(H\89T$0H\89\E1L\89\C2L\89\CE\E8\8E\F7\FF\FFH\8B|$8dH3<%(\00\00\00u\0AH\83\C4H\C3\E8\14\CD\FF\FF\E8\DF\CD\FF\FF\0F\1FD\00\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [44 x i8] c"I\C7\C0\FF\FF\FF\FF\E9T\FF\FF\FF\0F\1F@\00H\89\D1I\C7\C0\FF\FF\FF\FFH\89\F2H\89\FE1\FF\E99\FF\FF\FFf\0F\1F\84\00", [4 x i8] zeroinitializer, [28 x i8] c"I\89\C8H\89\D1H\89\F2H\89\FE1\FF\E9\1D\FF\FF\FF\0F\1F\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [44 x i8] c"H\8D\0D\895 \00\E9\04\F7\FF\FF\0F\1F@\00H\8D\0Dy5 \00H\89\F2H\89\FE1\FF\E9\EC\F6\FF\FFf\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [28 x i8] c"H\8D\0DY5 \00H\C7\C2\FF\FF\FF\FF\E9\CD\F6\FF\FF\0F\1F\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [28 x i8] c"H\8D\0D95 \00H\89\FEH\C7\C2\FF\FF\FF\FF1\FF\E9\A8\F6\FF\FF\0F\1F\84\00", [4 x i8] zeroinitializer, [364 x i8] c"AUATA\89\FDUSI\89\F4H\89\D3H\83\EC\08\0F\1FD\00\00H\89\DAL\89\E6D\89\EF\E8\8A\CD\FF\FFH\85\C0H\89\C5y\22\E8\1D\CC\FF\FF\8B\00\83\F8\04t\DEH\81\FB\00\E0\FF\7Fv\0D\83\F8\16u\08\BB\00\E0\FF\7F\EB\C9\90H\83\C4\08H\89\E8[]A\\A]\C3f\90AUATA\89\FDUSI\89\F4H\89\D3H\83\EC\08\0F\1FD\00\00H\89\DAL\89\E6D\89\EF\E8\0A\CC\FF\FFH\85\C0H\89\C5y\22\E8\BD\CB\FF\FF\8B\00\83\F8\04t\DE\83\F8\16u\11H\81\FB\00\E0\FF\7Fv\08\BB\00\E0\FF\7F\EB\C9\90H\83\C4\08H\89\E8[]A\\A]\C3f\90AWAVAUATM\89\CCUSH\89\FDL\89\C3H\83\EC(H\85\F6\0F\84\90\00\00\00I\89\D0H\8D\15~\1B\00\00I\89\C91\C0H\89\F1\BE\01\00\00\00\E8D\CE\FF\FFH\8D5x\1B\00\001\FF\BA\05\00\00\00\E8\D1\CB\FF\FFH\8D\15\8A\1E\00\00H\89\C1A\B8\E1\07\00\00\BE\01\00\00\00H\89\EF1\C0\E8\12\CE\FF\FFH\8D5\D3\1B\00\001\FF\BA\05\00\00\00\E8\9F\CB\FF\FFH\89\EEH\89\C7\E8\84\CC\FF\FFI\83\FC\09\0F\87*\03\00\00H\8D\15\03\1E\00\00Jc\04\A2H\01\D0\FF\E0f.\0F\1F\84\00", [4 x i8] zeroinitializer, [316 x i8] c"I\89\C8H\89\D1H\8D\15\F7\1A\00\00\BE\01\00\00\001\C0\E8\B7\CD\FF\FF\E9n\FF\FF\FFf\90L\8BK8H\8BC\10H\8D5\D9\1C\00\00L\8BC\08\BA\05\00\00\001\FFL\8Bk0L\8Bc(L\89L$\10L\8B{ L\8Bs\18H\89\04$L\89D$\08H\8B\1B\E8\10\CB\FF\FFH\83\EC\08L\8BL$\18H\89\D9H\89\C2H\89\EF\BE\01\00\00\001\C0AQAUATAWAVL\8BL$0L\8BD$8\E8>\CD\FF\FFH\83\C40H\83\C4([]A\\A]A^A_\C3\0F\1F\00L\8BS@L\8BK8H\8D5\81\1C\00\00H\8BC\10L\8BC\08\BA\05\00\00\00L\8Bk0L\8Bc(L\8B{ L\8Bs\18H\8B\1BL\89T$\18L\89L$\10H\89\04$L\89D$\081\FF\E8\7F\CA\FF\FFL\8BT$\18AR\E9g\FF\FF\FF\0F\1F\00H\8B\1BH\8D5\05\1A\00\00\BA\05\00\00\001\FF\E8Z\CA\FF\FFH\83\C4(H\89\D9H\89\EF[]A\\A]A^A_H\89\C2\BE\01\00\00\001\C0\E9\97\CC\FF\FF\0F\1F\80", [4 x i8] zeroinitializer, [140 x i8] c"L\8Bc\08H\8D5\D4\19\00\00H\8B\1B\BA\05\00\00\001\FF\E8\16\CA\FF\FFH\83\C4(M\89\E0H\89\D9H\89\EFH\89\C2\BE\01\00\00\00[]A\\A]A^A_1\C0\E9P\CC\FF\FFL\8Bk\10L\8Bc\08H\8D5\A7\19\00\00H\8B\1B\BA\05\00\00\001\FF\E8\D2\C9\FF\FFH\83\C4(M\89\E9M\89\E0H\89\D9H\89\EFH\89\C2[]A\\A]A^A_\BE\01\00\00\001\C0\E9\09\CC\FF\FFf\0F\1F\84\00", [4 x i8] zeroinitializer, [316 x i8] c"H\8D5\91\1A\00\00\BA\05\00\00\001\FFL\8Bs\18L\8Bk\10L\8Bc\08H\8B\1B\E8~\C9\FF\FFH\83\EC\08AVH\89\C2M\89\E9M\89\E0H\89\D9H\89\EF\BE\01\00\00\001\C0\E8\BD\CB\FF\FFXZH\83\C4([]A\\A]A^A_\C3\0F\1F@\00L\8B{ H\8D5U\1A\00\00\BA\05\00\00\001\FFL\8Bs\18L\8Bk\10L\8Bc\08H\8B\1B\E8\22\C9\FF\FFAW\EB\A4f\0F\1FD\00\00L\8BC\08L\8Bc(H\8D5I\1A\00\00L\8B{ L\8Bs\18\BA\05\00\00\00L\8Bk\101\FFH\8B\1BL\89\04$\E8\EA\C8\FF\FFH\83\EC\08M\89\E9ATAWAVL\8BD$ H\89\D9H\89\C2H\89\EF\BE\01\00\00\001\C0\E8#\CB\FF\FFH\83\C4 H\83\C4([]A\\A]A^A_\C3L\8BK\10L\8Bk0H\8D5\09\1A\00\00L\8Bc(L\8B{ \BA\05\00\00\00L\8Bs\18L\8BC\081\FFL\89L$\08H\8B\1BL\89\04$\E8y\C8\FF\FFAUATAWAVL\8BL$(\EB\8Df.\0F\1F\84\00", [4 x i8] zeroinitializer, [92 x i8] c"L\8BS@L\8BK8\BA\05\00\00\00H\8BC\10L\8BC\08H\8D5D\1A\00\00L\8Bk0L\8Bc(L\8B{ L\8Bs\18L\89T$\18L\89L$\10H\89\04$L\89D$\08H\8B\1B\E9\93\FD\FF\FF\E8t\C7\FF\FF\0F\1F@\00E1\C9I\838\00t\12\0F\1F\80", [4 x i8] zeroinitializer, [140 x i8] c"I\83\C1\01K\83<\C8\00u\F5\E9\D0\FB\FF\FFH\83\EChM\89\C2E1\C9dH\8B\04%(\00\00\00H\89D$X1\C0I\89\E0\0F\1F\00A\8B\02\83\F8/wBA\89\C3M\03Z\10\83\C0\08A\89\02I\8B\03H\85\C0K\89\04\C8t\0AI\83\C1\01I\83\F9\0Au\D5\E8\80\FB\FF\FFH\8BD$XdH3\04%(\00\00\00u\05H\83\C4h\C3\E8\B6\C7\FF\FFM\8BZ\08I\8DC\08I\89B\08\EB\BD\0F\1F\84\00", [4 x i8] zeroinitializer, [108 x i8] c"USA\BA \00\00\00E1\DBH\81\EC\B8\00\00\00dH\8B\04%(\00\00\00H\89D$x1\C0H\8D\84$\D0\00\00\00L\89\84$\A0\00\00\00H\8D\9C$\D0\00\00\00L\8DD$ L\89\8C$\A8\00\00\00\C7D$\08 \00\00\00H\89D$\10H\8D\84$\80\00\00\00E1\C9H\89D$\18H\89\C5f\0F\1F\84\00", [4 x i8] zeroinitializer, [108 x i8] c"A\83\FA/wVD\89\D0A\BB\01\00\00\00A\83\C2\08H\01\E8H\8B\00H\85\C0K\89\04\C8t\0AI\83\C1\01I\83\F9\0Au\D4E\84\DBu$\E8\AA\FA\FF\FFH\8BD$xdH3\04%(\00\00\00u\0AH\81\C4\B8\00\00\00[]\C3\E8\DB\C6\FF\FFD\89T$\08\EB\D5H\89\D8H\83\C3\08\EB\B1\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [204 x i8] c"SH\8D5j\16\00\00\BA\05\00\00\001\FF\E8|\C6\FF\FFH\8D\15l\16\00\00H\89\C6\BF\01\00\00\001\C0\E86\C8\FF\FFH\8D5l\16\00\00\BA\05\00\00\001\FF\E8S\C6\FF\FFH\8D\0D\E4\0F\00\00H\8D\15\EF\0A\00\00H\89\C6\BF\01\00\00\001\C0\E8\06\C8\FF\FFH\8B\1D\D7. \00H\8D5h\18\00\001\FF\BA\05\00\00\00\E8\1C\C6\FF\FFH\89\DEH\89\C7[\E9\00\C7\FF\FFSH\89\FB\E8G\C7\FF\FFH\85\C0u\05H\85\DBu\02[\C3\E86\02\00\00f\0F\1FD\00\00H\89\F8H\F7\E6H\89\C7\0F\90\C0H\85\FFx\0A\0F\B6\C0H\85\C0u\02\EB\C5H\83\EC\08\E8\0C\02\00\00f\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [12 x i8] c"\EB\AE\0F\1F@\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [60 x i8] c"H\85\F6SH\89\F3u\05H\85\FFu\1AH\89\DE\E8:\C7\FF\FFH\85\C0u\05H\85\DBu\11[\C3f\0F\1FD\00\00\E8\D3\C4\FF\FF1\C0[\C3\E8\BA\01\00\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [44 x i8] c"H\89\F0H\F7\E2H\89\C6\0F\90\C0H\85\F6x\0A\0F\B6\C0H\85\C0u\02\EB\A5H\83\EC\08\E8\8C\01\00\00f\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [60 x i8] c"H\85\FFI\89\D1H\8B\0Et51\D2H\B8TUUUUUUUI\F7\F1H9\C8v<H\89\C8H\D1\E8H\8DL\08\01H\89\0EI\0F\AF\C9H\89\CE\E9W\FF\FF\FF\0F\1F\80", [4 x i8] zeroinitializer, [76 x i8] c"H\85\C9t#H\89\C8I\F7\E1\0F\90\C2H\85\C0\0F\B6\D2x\05H\85\D2t\CFH\83\EC\08\E8\1C\01\00\00\0F\1F@\001\D2\B8\80\00\00\00E1\C0I\F7\F1H\85\C0A\0F\94\C0I\8D\0C\00\EB\C3\0F\1F@\00f.\0F\1F\84\00", [4 x i8] zeroinitializer, [108 x i8] c"H\85\FFH\8B\06t(H\BASUUUUUUUH9\D0w*H\89\C2H\D1\EAH\8DD\02\01H\89\06H\89\C6\E9\D3\FE\FF\FF\0F\1F\00H\85\C0\BA\80\00\00\00H\0FD\C2H\85\C0y\E1H\83\EC\08\E8\A6\00\00\00f\0F\1FD\00\00SH\89\FB\E8G\FE\FF\FFH\89\DA1\F6H\89\C7[\E9\C9\C4\FF\FFf\0F\1F\84\00", [4 x i8] zeroinitializer, [92 x i8] c"H\89\F8H\83\EC\08H\F7\E6\0F\90\C2H\85\C0x\17\0F\B6\D2H\85\D2u\0F\E8!\C5\FF\FFH\85\C0t\05H\83\C4\08\C3\E8R\00\00\00f\90USH\89\FDH\89\F7H\89\F3H\83\EC\08\E8\EC\FD\FF\FFH\83\C4\08H\89\DAH\89\EE[]H\89\C7\E9\08\C5\FF\FF\0F\1F\84\00", [4 x i8] zeroinitializer, [24 x i8] c"SH\89\FB\E8\F7\C3\FF\FFH\89\DFH\8Dp\01[\EB\BDf.\0F\1F\84", [4 x i8] zeroinitializer, [204 x i8] c"\00\0F\1F\00H\8D5\A8\16\00\00H\83\EC\08\BA\05\00\00\001\FF\E8\A9\C3\FF\FF\8B=\C3+ \00H\8D\15\00\0E\00\00H\89\C11\F61\C0\E8\80\C5\FF\FF\E8\EB\C2\FF\FFf.\0F\1F\84\00\00\00\00\00\90AUATI\89\F5USH\89\FBI\89\D4H\83\EC\18dH\8B\04%(\00\00\00H\89D$\081\C0H\8DD$\04H\85\FFH\0FD\D8H\89\DF\E8\99\C3\FF\FFH\83\F8\FDH\89\C5v M\85\E4t\1B1\FF\E8\C4\00\00\00\84\C0u\10A\0F\B6E\00\BD\01\00\00\00\89\03\0F\1F@\00H\8BT$\08dH3\14%(\00\00\00H\89\E8u\0BH\83\C4\18[]A\\A]\C3\E8-\C3\FF\FFf.\0F\1F\84", [4 x i8] zeroinitializer, [88 x i8] c"\00\0F\1F\00ATUH\89\FDS\E8\84\C2\FF\FF\8B]\00H\89\EFI\89\C4\E8\16\05\00\00\83\E3 \85\DBu\17\85\C0t\0AM\85\E4\B8\FF\FF\FF\FFt9[]A\\\C3\0F\1F@\00\85\C0u\1C\E8\1F\C2\FF\FF\C7\00\00\00\00\00\B8\FF\FF\FF\FF[]A\\\C3\0F\1F\80", [4 x i8] zeroinitializer, [132 x i8] c"[\B8\FF\FF\FF\FF]A\\\C3f\0F\1FD\00\00\E8\F3\C1\FF\FF\838\09[]A\\\0F\95\C0\0F\B6\C0\F7\D8\C3\0F\1F\00H\83\EC\081\F6\E8%\C4\FF\FFH\89\C2\B8\01\00\00\00H\85\D2t\1FH\8D=Q\15\00\00\B9\02\00\00\00H\89\D6\F3\A6@\0F\97\C6\0F\92\C11\C0@8\CEu\09H\83\C4\08\C3\0F\1F@\00H\8D=+\15\00\00\B9\06\00\00\00H\89\D6\F3\A6\0F\95\C0H\83\C4\08\C3\0F\1F\80", [4 x i8] zeroinitializer, [220 x i8] c"AWAV\BF\0E\00\00\00AUATUSH\81\EC\A8\00\00\00dH\8B\04%(\00\00\00H\89\84$\98\00\00\001\C0\E8B\C3\FF\FFL\8B=\13, \00H\85\C0H\89\C3H\8D\05\AF\11\00\00H\0FD\D8M\85\FFu\1F\E9\90\00\00\00L\89\FF\E8\D8\C1\FF\FFI\8Dl\07\01H\89\EF\E8\CB\C1\FF\FFL\8D|\05\01A\0F\B6/@\84\EDt)L\89\FEH\89\DF\E8\A2\C2\FF\FF\85\C0t\0D@\80\FD*u\C8A\80\7F\01\00u\C1L\89\FF\E8\99\C1\FF\FFI\8D\\\07\01\80;\00H\8D\05r\14\00\00H\0FD\D8H\8B\8C$\98\00\00\00dH3\0C%(\00\00\00H\89\D8\0F\85x\03\00\00H\81\C4\A8\00\00\00[]A\\A]A^A_\C3f.\0F\1F\84\00", [4 x i8] zeroinitializer, [92 x i8] c"H\8D=Q\14\00\00\E8d\C0\FF\FFH\85\C0I\89\C5tL\808\00tGH\89\C7\E8/\C1\FF\FFH\85\C0I\89\C4I\89\C6\0F\85\1B\03\00\00\BF\0E\00\00\00\E86\C2\FF\FFH\85\C0H\89\C5\0F\85\A2\00\00\00L\8D=\C4\10\00\00L\89=\14+ \00\E91\FF\FF\FF\0F\1F\80", [4 x i8] zeroinitializer, [1068 x i8] c"L\8D-\D7\13\00\00\BF(\00\00\00A\BC\1A\00\00\00A\BE\19\00\00\00\E8\F3\C1\FF\FFH\85\C0H\89\C5t\C1L\89\F2L\89\EEH\89\EF\E8\BD\C1\FF\FFB\C6D5\00/I\01\ECH\B8charset.\BE\00\00\02\00I\89\04$\B8s\00\00\00A\C7D$\08aliafA\89D$\0CH\89\EF1\C0\E8c\C2\FF\FF\85\C0A\89\C4y$L\8D=6\10\00\00H\89\EF\E8\9D\BF\FF\FF\E9e\FF\FF\FFL\89\F2L\89\EEH\89\EF\E8Z\C1\FF\FF\EB\A1H\8D5\A0\05\00\00\89\C7E1\FF\E8\D7\C1\FF\FFH\85\C0I\89\C6H\C7\04$\00\00\00\00\0F\84\D6\01\00\00H\8DD$`H\89D$\08H\8DD$ H\89D$\10I\8BF\08I;F\10\0F\83K\01\00\00H\8DP\01I\89V\08\0F\B68\8DG\F7\83\F8\01v\DF\83\FF t\DA\83\FF#\0F\84y\01\00\00L\89\F6\E88\C1\FF\FFL\8Bl$\10H\8BL$\08H\8D5\EF\12\00\001\C0L\89\F7L\89\EA\E8:\C0\FF\FF\83\F8\01\0F\8E\0E\01\00\00L\89\EA\8B\0AH\83\C2\04\8D\81\FF\FE\FE\FE\F7\D1!\C8%\80\80\80\80t\E9\89\C1L\8Bl$\08\C1\E9\10\A9\80\80\00\00\0FD\C1H\8DJ\02H\0FD\D1\89\C1\00\C1H\83\DA\03H+T$\10A\8Bu\00I\83\C5\04\8D\86\FF\FE\FE\FE\F7\D6!\F0%\80\80\80\80t\E7\89\C6H\89T$\18\C1\EE\10\A9\80\80\00\00\0FD\C6I\8Du\02\89\C1L\0FD\EE\00\C1I\83\DD\03L+l$\08H\83<$\00J\8D\04*\0F\85\EB\00\00\00H\8DH\02H\8Dx\03H\89\0C$\E8@\C0\FF\FFH\8BT$\18I\89\C4M\85\E4\0F\84\EE\00\00\00L\8B<$H\C7\C7\FE\FF\FF\FFH\8Bt$\10H)\D7H\83\C2\01M)\EFL\01\FFL\01\E7\E8\EA\BF\FF\FFH\8Bt$\08K\8D|<\FFI\8DU\01M\89\E7\E8\D4\BF\FF\FFI\8BF\08I;F\10\0F\82\B5\FE\FF\FFL\89\F7\E8\CE\BD\FF\FF\83\F8\FF\89\C7\0F\85\AD\FE\FF\FFL\89\F7\E8\CB\00\00\00H\8B\04$H\85\C0\0F\84\22\FE\FF\FFA\C6\04\07\00\E9\1F\FE\FF\FF\0F\1F@\00H\8DP\01I\89V\08\0F\B6\00\BA\01\00\00\00\83\F8\0At+\84\D2t'I\8BF\08I;F\10r\DDL\89\F7\E8u\BD\FF\FF\83\F8\FF\0F\95\C2\EB\DDD\89\E7\E8\E5\BE\FF\FF\E9\D4\FD\FF\FF\83\F8\FFt\98\E9'\FE\FF\FFH\03\04$L\89\FFH\8DH\02H\8Dp\03H\89\0C$\E8\AE\BF\FF\FFH\8BT$\18I\89\C4\E9\09\FF\FF\FFL\89\FFL\8D=\D8\0D\00\00\E8B\BD\FF\FFL\89\F7\E8*\00\00\00\E9\90\FD\FF\FFA\80|\05\FF/u\0EH\8Dx\0E\E9\D9\FC\FF\FF\E8\FF\BD\FF\FFH\8Dx\0FI\83\C4\01\E9\0A\FD\FF\FFf\90ATUSH\89\FB\E8\E4\BE\FF\FF\85\C0H\89\DFxT\E88\BF\FF\FF\85\C0u,H\89\DF\E8\\\00\00\00\85\C0t<\E8\03\BD\FF\FFD\8B H\89\DFH\89\C5\E8U\BD\FF\FFE\85\E4u0[]A\\\C3\0F\1F\00H\89\DF\E8\A0\BE\FF\FF1\F6\BA\01\00\00\00\89\C7\E8\D2\BD\FF\FFH\83\F8\FFu\B8H\89\DF[]A\\\E9 \BD\FF\FFD\89e\00\B8\FF\FF\FF\FF\EB\C5\0F\1FD\00\00H\85\FFSH\89\FBt\11\E8\C2\BE\FF\FF\85\C0t\08\F7\03\00\01\00\00u\0EH\89\DF[\E9m\BE\FF\FF\0F\1FD\00\00H\89\DF\BA\01\00\00\001\F6\E8\09\00\00\00H\89\DF[\E9P\BE\FF\FFH\8BG\08H9G\10t\06\E9\01\BF\FF\FF\90H\8BG H9G(u\F0H\83\7FH\00u\E9ATUA\89\D4SH\89\F5H\89\FB\E8\FD\BD\FF\FFD\89\E2H\89\EE\89\C7\E80\BD\FF\FFH\83\F8\FFt\0C\83#\EFH\89\83\90\00\00\001\C0[]A\\\C3f\0F\1F\84\00", [4 x i8] zeroinitializer, [60 x i8] c"AWAVA\89\FFAUATL\8D%\DE\1E \00UH\8D-\DE\1E \00SI\89\F6I\89\D5L)\E5H\83\EC\08H\C1\FD\03\E8o\BB\FF\FFH\85\EDt 1\DB\0F\1F\84\00", [4 x i8] zeroinitializer, [44 x i8] c"L\89\EAL\89\F6D\89\FFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\\A]A^A_\C3\90f.\0F\1F\84\00", [4 x i8] zeroinitializer, [8 x i8] c"\F3\C3f.\0F\1F\84\00", [4 x i8] zeroinitializer, [32 x i8] c"\0F\1F@\00H\8D\05\01$ \00H\85\C0t\14H\8B\101\F6\E9*\BE\FF\FFf.\0F\1F\84\00", [4 x i8] zeroinitializer, [9 x i8] c"1\D21\F6\E9\17\BE\FF\FF", [3 x i8] zeroinitializer, [9 x i8] c"H\83\EC\08H\83\C4\08\C3", [11 x i8] zeroinitializer, [367 x i8] c"\01\00\02\00write error\00cat\00[\00test invocation\00Multi-call invocation\00sha224sum\00sha2 utilities\00sha256sum\00sha384sum\00sha512sum\00\0A%s online help: <%s>\0A\00GNU coreutils\00en_\00/usr/share/locale\00Richard M. Stallman\00Torbjorn Granlund\00benstuvAET\00standard output\00%s: input file is output file\00cannot do ioctl on %s\00closing standard input\00number-nonblank\00number\00squeeze-blank\00show-nonprinting", [1 x i8] zeroinitializer, [28 x i8] c"show-ends\00show-tabs\00show-all", [1 x i8] zeroinitializer, [4 x i8] c"help", [1 x i8] zeroinitializer, [8 x i8] c"version\00", [6 x i8] zeroinitializer, [72 x i8] c"Try '%s --help' for more information.\0A\00\00Usage: %s [OPTION]... [FILE]...\0A", [8 x i8] zeroinitializer, [40 x i8] c"Concatenate FILE(s) to standard output.\0A", [8 x i8] zeroinitializer, [604 x i8] c"\0AWith no FILE, or when FILE is -, read standard input.\0A\00\0A  -A, --show-all           equivalent to -vET\0A  -b, --number-nonblank    number nonempty output lines, overrides -n\0A  -e                       equivalent to -vE\0A  -E, --show-ends          display $ at end of each line\0A  -n, --number             number all output lines\0A  -s, --squeeze-blank      suppress repeated empty output lines\0A\00\00  -t                       equivalent to -vT\0A  -T, --show-tabs          display TAB characters as ^I\0A  -u                       (ignored)\0A  -v, --show-nonprinting   use ^ and M- notation, except for LFD and TAB\0A\00", [4 x i8] zeroinitializer, [44 x i8] c"      --help     display this help and exit\0A", [4 x i8] zeroinitializer, [192 x i8] c"      --version  output version information and exit\0A\00\00\00\0AExamples:\0A  %s f - g  Output f's contents, then standard input, then g's contents.\0A  %s        Copy standard input to standard output.\0A", [8 x i8] zeroinitializer, [108 x i8] c"http://www.gnu.org/software/coreutils/\00\00Report %s translation bugs to <http://translationproject.org/team/>\0A", [4 x i8] zeroinitializer, [87 x i8] c"Full documentation at: <%s%s>\0A\00\00or available locally via: info '(coreutils) %s%s'\0A\008.28", [1 x i8] zeroinitializer, [96 x i8] c"%s: %s\00\00A NULL argv[0] was passed through an exec system call.\0A\00/.libs/\00lt-\00\E2\80\98\00\E2\80\99\00\A1\07e\00\A1\AF\00\22\00'\00`", [1 x i8] zeroinitializer, [26 x i8] c"literal\00shell\00shell-always", [1 x i8] zeroinitializer, [12 x i8] c"shell-escape", [1 x i8] zeroinitializer, [38 x i8] c"shell-escape-always\00c\00c-maybe\00clocale\00", [17 x i8] zeroinitializer, [1060 x i8] c"\9A\DA\FF\FF\F3\CC\FF\FF\C8\DC\FF\FF\D4\DA\FF\FF\C4\D8\FF\FF \D9\FF\FFu\D9\FF\FF\BA\D9\FF\FF\F4\D9\FF\FF\F4\D9\FF\FF\F4\D9\FF\FFD\D0\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF\84\D0\FF\FF\8C\CF\FF\FFL\CF\FF\FF\14\D1\FF\FF\04\D1\FF\FF\F4\D0\FF\FF\E4\D0\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF,\D1\FF\FF\D4\D0\FF\FF\C4\D0\FF\FF\C4\D0\FF\FF\94\D0\FF\FF\C4\D0\FF\FFl\D0\FF\FF\C4\D0\FF\FF'\CF\FF\FF\C4\D0\FF\FF\C4\D0\FF\FF\C4\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FF\C4\D0\FF\FF\C4\D0\FF\FF\C4\D0\FF\FF\C4\D0\FF\FF\F7\CE\FF\FF,\D1\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FF\C4\D0\FF\FF\9C\CF\FF\FFl\D0\FF\FF\C4\D0\FF\FFl\D0\FF\FF\C4\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FFl\D0\FF\FF'\CE\FF\FF\C4\D0\FF\FF'\CE\FF\FF\94\D0\FF\FF\18\D0\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF\08\D0\FF\FFX\D1\FF\FF@\D1\FF\FF\F0\CF\FF\FF0\D1\FF\FF\D8\CF\FF\FF\18\D1\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF(\CF\FF\FF\00\D1\FF\FF\E8\D0\FF\FF\E8\D0\FF\FF\D0\D0\FF\FF\E8\D0\FF\FF\B8\D0\FF\FF\E8\D0\FF\FF(\CD\FF\FF\E8\D0\FF\FF\E8\D0\FF\FF\E8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\E8\D0\FF\FF\E8\D0\FF\FF\E8\D0\FF\FF\E8\D0\FF\FF\F8\CC\FF\FF(\CF\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\E8\D0\FF\FF\B8\CF\FF\FF\B8\D0\FF\FF\E8\D0\FF\FF\B8\D0\FF\FF\E8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF\B8\D0\FF\FF(\CC\FF\FF\E8\D0\FF\FF(\CC\FF\FF\D0\D0\FF\FF", [28 x i8] zeroinitializer, [4 x i8] zeroinitializer, [125 x i8] c"\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\09\00\00\00%s (%s) %s\0A\00%s %s\0A\00(C)\00Written by %s.\0A\00Written by %s and %s.\0A\00Written by %s, %s, and %s.\0A", [1 x i8] zeroinitializer, [20 x i8] c"\0AReport bugs to: %s\0A", [1 x i8] zeroinitializer, [42 x i8] c"bug-coreutils@gnu.org\00%s home page: <%s>\0A\00", [7 x i8] zeroinitializer, [204 x i8] c"\0ALicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\0A\00\00", [4 x i8] zeroinitializer, [68 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00Written by %s, %s, %s,\0A%s, and %s.\0A\00", [4 x i8] zeroinitializer, [84 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", [4 x i8] zeroinitializer, [100 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", [4 x i8] zeroinitializer, [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", [4 x i8] zeroinitializer, [104 x i8] c"General help using GNU software: <http://www.gnu.org/gethelp/>\0A\00g\E5\FF\FF\10\E3\FF\FFP\E3\FF\FF\90\E3\FF\FF\E0\E3\FF\FF8\E4\FF\FFh\E4\FF\FF\D0\E4\FF\FF0\E2\FF\FF\B8\E2\FF\FF", [24 x i8] zeroinitializer, [63 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00memory exhausted", [1 x i8] zeroinitializer, [66 x i8] c"C\00POSIX\00ASCII\00/usr/lib/x86_64-linux-gnu\00CHARSETALIASDIR\00%50s %50s\00", [2 x i8] zeroinitializer, [628 x i8] c"\01\1B\03;p\02\00\00M\00\00\00\DC\AB\FF\FF\BC\02\00\00\\\AF\FF\FF\E4\02\00\00l\AF\FF\FF\10\03\00\00\9C\AF\FF\FFL\03\00\00\AC\BB\FF\FF\8C\02\00\00\BC\BC\FF\FF\FC\02\00\00<\BD\FF\FF(\03\00\00\1C\C1\FF\FF\AC\03\00\00,\C1\FF\FF\C0\03\00\00<\C1\FF\FF\D4\03\00\00\EC\C1\FF\FF\04\04\00\00\FC\C1\FF\FF\18\04\00\00,\C2\FF\FF4\04\00\00\AC\C2\FF\FF\84\04\00\00L\C3\FF\FF\A4\04\00\00<\C4\FF\FF\E8\04\00\00|\D6\FF\FF`\05\00\00,\D8\FF\FF\CC\05\00\00l\D8\FF\FF\F8\05\00\00\8C\D8\FF\FF\0C\06\00\00\AC\D8\FF\FF \06\00\00\EC\D8\FF\FF4\06\00\00\0C\D9\FF\FFH\06\00\00<\D9\FF\FF\\\06\00\00\BC\D9\FF\FF\B0\06\00\00\AC\DA\FF\FF\1C\07\00\00\BC\DA\FF\FF0\07\00\00\\\DB\FF\FF\\\07\00\00|\DB\FF\FFp\07\00\00\8C\DB\FF\FF\84\07\00\00\AC\DB\FF\FF\98\07\00\00\CC\DB\FF\FF\AC\07\00\00\\\DC\FF\FF\C8\07\00\00\EC\DC\FF\FF\E4\07\00\00\FC\DC\FF\FF\F8\07\00\00\0C\DD\FF\FF\0C\08\00\00\AC\DD\FF\FF(\08\00\00\BC\DD\FF\FF<\08\00\00\DC\DD\FF\FFP\08\00\00\EC\DD\FF\FFd\08\00\00|\DE\FF\FF\80\08\00\00\1C\DF\FF\FF\9C\08\00\00,\DF\FF\FF\B0\08\00\00L\DF\FF\FF\C4\08\00\00l\DF\FF\FF\D8\08\00\00|\DF\FF\FF\EC\08\00\00\9C\DF\FF\FF\00\09\00\00\BC\DF\FF\FF\14\09\00\00\DC\DF\FF\FF,\09\00\00<\E0\FF\FFd\09\00\00\9C\E0\FF\FF\9C\09\00\00\AC\E4\FF\FF\B0\0A\00\00\CC\E4\FF\FF\C4\0A\00\00L\E5\FF\FF\E0\0A\00\00,\E6\FF\FF\0C\0B\00\00\AC\E6\FF\FF,\0B\00\00\CC\E6\FF\FFH\0B\00\00\FC\E6\FF\FF\\\0B\00\00\0C\E7\FF\FFp\0B\00\00L\E7\FF\FF\94\0B\00\00|\E7\FF\FF\A8\0B\00\00\0C\E8\FF\FF\C0\0B\00\00\\\E8\FF\FF\D8\0B\00\00|\E8\FF\FF\F4\0B\00\00\AC\E8\FF\FF\10\0C\00\00\DC\E8\FF\FF8\0C\00\00\FC\E8\FF\FFT\0C\00\00<\E9\FF\FFl\0C\00\00\CC\E9\FF\FF\AC\0C\00\00L\EA\FF\FF\FC\0C\00\00\AC\EA\FF\FF\1C\0D\00\00\FC\EE\FF\FFl\0D\00\00|\EF\FF\FF\A4\0D\00\00\BC\EF\FF\FF\C4\0D\00\00\1C\F0\FF\FF\F4\0D\00\00\8C\F0\FF\FF<\0E\00\00\9C\F0\FF\FFT\0E\00\00", [4 x i8] c"\14\00\00\00", [4 x i8] zeroinitializer, [32 x i8] c"\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\14\00\00\00\1C\00\00\00\18\B9\FF\FF+\00\00\00", [8 x i8] zeroinitializer, [4 x i8] c"\14\00\00\00", [4 x i8] zeroinitializer, [52 x i8] c"\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00$\00\00\00\1C\00\00\00\18\A9\FF\FF\80\03\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22", [4 x i8] zeroinitializer, [16 x i8] c"\14\00\00\00D\00\00\00p\AC\FF\FF\08\00\00\00", [8 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00\\\00\00\00\B8\B9\FF\FFt\00\00\00", [4 x i8] zeroinitializer, [152 x i8] c"\14\00\00\00p\00\00\00T\AC\FF\FF-\00\00\00\00A\0E\10\83\02\00\00 \00\00\00\88\00\00\00\0C\BA\FF\FF\D7\03\00\00\00B\0E\10\8C\02A\0E\18\86\03F\0E \83\04F\0E\A0\01\\\00\00\00\AC\00\00\00H\AC\FF\FF\04\0C\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05D\0E0\86\06A\0E8\83\07G\0E\90\03\03H\01\0A\0E\98\03P\0E\A0\03j\0B\03\93\06\0A\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08A\0B\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00\0C\01\00\00h\BD\FF\FF\08\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00 \01\00\00d\BD\FF\FF\08\00\00\00", [4 x i8] zeroinitializer, [44 x i8] c",\00\00\004\01\00\00`\BD\FF\FF\A4\00\00\00\00A\0E\10\86\02A\0E\18\83\03D\0E z\0A\0E\18A\0E\10A\0E\08A\0B\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00d\01\00\00\E0\BD\FF\FF\05\00\00\00", [4 x i8] zeroinitializer, [104 x i8] c"\18\00\00\00x\01\00\00\DC\BD\FF\FF\22\00\00\00\00F\0E\10\83\02N\C3\0E\08\00\00L\00\00\00\94\01\00\00\F0\BD\FF\FFv\00\00\00\00B\0E\10\8D\02B\0E\18\8C\03A\0E \86\04A\0E(\83\05D\0E0~\0A\0E(D\0E A\0E\18B\0E\10B\0E\08G\0BO\0A\0E(D\0E A\0E\18B\0E\10B\0E\08A\0B", [4 x i8] zeroinitializer, [388 x i8] c"\1C\00\00\00\E4\01\00\00 \BE\FF\FF\99\00\00\00\00D\0E\10\83\02\02r\0A\0E\08A\0B\00\00\00@\00\00\00\04\02\00\00\A0\BE\FF\FF\E7\00\00\00\00A\0E\10\86\02A\0E\18\83\03I\0E n\0A\0E\18A\0E\10A\0E\08E\0B\02J\0A\0E\18A\0E\10A\0E\08D\0B\02T\0E\18A\0E\10A\0E\08\00\00\00t\00\00\00H\02\00\00L\BF\FF\FF4\12\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05D\0E0\86\06A\0E8\83\07S\0E\F0\01\03\81\0B\0E\F8\01J\0E\80\02D\0E\88\02E\0E\90\02_\0E\F0\01d\0A\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08D\0B\03\99\05\0E\F8\01M\0E\80\02D\0E\88\02G\0E\90\02[\0E\F0\01\00h\00\00\00\C0\02\00\00\14\D1\FF\FF\AB\01\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05D\0E0\86\06A\0E8\83\07G\0E`\02\99\0Eh_\0EpF\0ExB\0E\80\01Y\0E`\02@\0EhK\0EpC\0ExE\0E\80\01^\0E`L\0A\0E8D\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08F\0B(\00\00\00,\03\00\00X\D2\FF\FF6\00\00\00\00B\0E\10\8C\02A\0E\18\86\03A\0E \83\04n\0E\18A\0E\10B\0E\08\00\00\00\10\00\00\00X\03\00\00l\D2\FF\FF\11\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00l\03\00\00x\D2\FF\FF\11\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00\80\03\00\00\84\D2\FF\FF5\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00\94\03\00\00\B0\D2\FF\FF\15\00\00\00", [4 x i8] zeroinitializer, [228 x i8] c"\10\00\00\00\A8\03\00\00\BC\D2\FF\FF0\00\00\00\00k\0E\10P\00\00\00\BC\03\00\00\D8\D2\FF\FFt\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03I\0E \8D\04B\0E(\8C\05D\0E0\86\06A\0E8\83\07M\0EP_\0EXG\0E`F\0EhD\0EpX\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00h\00\00\00\10\04\00\00\04\D3\FF\FF\E3\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03I\0E \8D\04B\0E(\8C\05D\0E0\86\06A\0E8\83\07M\0Epe\0ExM\0E\80\01F\0E\88\01B\0E\90\01^\0EpV\0ExC\0E\80\01C\0E\88\01V\0E\90\01R\0Ep[\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00|\04\00\00\88\D3\FF\FF\0A\00\00\00", [4 x i8] zeroinitializer, [60 x i8] c"(\00\00\00\90\04\00\00\84\D3\FF\FF\93\00\00\00\00H\0E\10\8C\02H\0E\18\86\03A\0E \83\04\02t\0E\18K\0E\10B\0E\08\00\00\10\00\00\00\BC\04\00\00\F8\D3\FF\FF\13\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00\D0\04\00\00\04\D4\FF\FF\0C\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00\E4\04\00\00\00\D4\FF\FF\18\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00\F8\04\00\00\0C\D4\FF\FF\14\00\00\00", [4 x i8] zeroinitializer, [72 x i8] c"\18\00\00\00\0C\05\00\00\18\D4\FF\FF\8E\00\00\00\00D\0EP\02\7F\0A\0E\08A\0B\00\18\00\00\00(\05\00\00\8C\D4\FF\FF\8A\00\00\00\00D\0EP\02{\0A\0E\08A\0B\00\10\00\00\00D\05\00\00\00\D5\FF\FF\0C\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00X\05\00\00\FC\D4\FF\FF\0F\00\00\00", [4 x i8] zeroinitializer, [44 x i8] c"\18\00\00\00l\05\00\00\F8\D4\FF\FF\98\00\00\00\00D\0EP\02\8E\0A\0E\08A\0B\00\10\00\00\00\88\05\00\00|\D5\FF\FF\10\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00\9C\05\00\00x\D5\FF\FF\11\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00\B0\05\00\00\84\D5\FF\FF\0A\00\00\00", [4 x i8] zeroinitializer, [72 x i8] c"\18\00\00\00\C4\05\00\00\80\D5\FF\FF\8E\00\00\00\00D\0EP\02\7F\0A\0E\08A\0B\00\18\00\00\00\E0\05\00\00\F4\D5\FF\FF\91\00\00\00\00D\0EP\02\82\0A\0E\08A\0B\00\10\00\00\00\FC\05\00\00x\D6\FF\FF\0C\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00\10\06\00\00t\D6\FF\FF\17\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00$\06\00\00\80\D6\FF\FF\13\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\008\06\00\00\8C\D6\FF\FF\0C\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00L\06\00\00\88\D6\FF\FF\14\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00`\06\00\00\94\D6\FF\FF\13\00\00\00", [4 x i8] zeroinitializer, [16 x i8] c"\14\00\00\00t\06\00\00\A0\D6\FF\FF\18\00\00\00", [8 x i8] zeroinitializer, [404 x i8] c"4\00\00\00\8C\06\00\00\A8\D6\FF\FF^\00\00\00\00B\0E\10\8D\02B\0E\18\8C\03D\0E \86\04A\0E(\83\05J\0E0\02A\0E(D\0E A\0E\18B\0E\10B\0E\084\00\00\00\C4\06\00\00\D0\D6\FF\FF^\00\00\00\00B\0E\10\8D\02B\0E\18\8C\03D\0E \86\04A\0E(\83\05J\0E0\02A\0E(D\0E A\0E\18B\0E\10B\0E\08\10\01\00\00\FC\06\00\00\F8\D6\FF\FF\0C\04\00\00\00B\0E\10\8F\02B\0E\18\8E\03B\0E \8D\04B\0E(\8C\05D\0E0\86\06A\0E8\83\07J\0E`\02\FD\0EhW\0EpB\0ExB\0E\80\01B\0E\88\01B\0E\90\01S\0E`D\0A\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08D\0B\02P\0A\0EhH\0BZ\0A\0E8G\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08V\0B^\0A\0E8R\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08G\0Bb\0A\0E8P\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08U\0Bf\0EhB\0Ep\\\0EhA\0E`D\0A\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08E\0Bh\0A\0EhH\0Br\0EhE\0EpB\0ExB\0E\80\01^\0E`D\0A\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08A\0By\0A\0EhB\0EpB\0ExB\0E\80\01Q\0B\10\00\00\00\10\08\00\00\F4\D9\FF\FF \00\00\00", [4 x i8] zeroinitializer, [100 x i8] c"\18\00\00\00$\08\00\00\00\DA\FF\FFx\00\00\00\00D\0Ep\02`\0A\0E\08A\0B\00(\00\00\00@\08\00\00d\DA\FF\FF\D5\00\00\00\00A\0E\10\86\02A\0E\18\83\03P\0E\D0\01\02\AB\0A\0E\18A\0E\10A\0E\08A\0B\1C\00\00\00l\08\00\00\18\DB\FF\FF\80\00\00\00\00A\0E\10\83\02\02z\0E\08\00\00", [4 x i8] zeroinitializer, [64 x i8] c"\18\00\00\00\8C\08\00\00x\DB\FF\FF\1A\00\00\00\00A\0E\10\83\02S\0A\0E\08A\0B\10\00\00\00\A8\08\00\00|\DB\FF\FF$\00\00\00\00_\0E\10\10\00\00\00\BC\08\00\00\98\DB\FF\FF\02\00\00\00", [4 x i8] zeroinitializer, [248 x i8] c" \00\00\00\D0\08\00\00\94\DB\FF\FF6\00\00\00\00D\0E\10\83\02]\0A\0E\08G\0BH\0A\0E\08A\0B\00\00\10\00\00\00\F4\08\00\00\B0\DB\FF\FF$\00\00\00\00_\0E\10\14\00\00\00\08\09\00\00\CC\DB\FF\FF\82\00\00\00\00\02_\0E\10I\0E\08\14\00\00\00 \09\00\00D\DC\FF\FFJ\00\00\00\00\02E\0E\10\00\00\00\18\00\00\008\09\00\00|\DC\FF\FF\17\00\00\00\00A\0E\10\83\02Q\0E\08\00\00\00\18\00\00\00T\09\00\00\80\DC\FF\FF.\00\00\00\00G\0E\10a\0A\0E\08A\0B\00\00$\00\00\00p\09\00\00\94\DC\FF\FF(\00\00\00\00A\0E\10\86\02A\0E\18\83\03M\0E I\0E\18G\0E\10A\0E\08\00\18\00\00\00\98\09\00\00\9C\DC\FF\FF\13\00\00\00\00A\0E\10\83\02P\0E\08\00\00\00\14\00\00\00\B4\09\00\00\A0\DC\FF\FF5\00\00\00\00K\0E\10", [4 x i8] zeroinitializer, [60 x i8] c"<\00\00\00\CC\09\00\00\C8\DC\FF\FF\83\00\00\00\00B\0E\10\8D\02B\0E\18\8C\03D\0E \86\04A\0E(\83\05J\0E@\02d\0A\0E(A\0E A\0E\18B\0E\10B\0E\08A\0B\00", [4 x i8] zeroinitializer, [188 x i8] c"L\00\00\00\0C\0A\00\00\18\DD\FF\FF}\00\00\00\00B\0E\10\8C\02A\0E\18\86\03D\0E \83\04i\0A\0E\18A\0E\10B\0E\08E\0BU\0A\0E\18A\0E\10B\0E\08H\0BA\0A\0E\18F\0E\10B\0E\08G\0BI\0E\18A\0E\10B\0E\08\00\00\00\1C\00\00\00\\\0A\00\00H\DD\FF\FFY\00\00\00\00D\0E\10w\0A\0E\08E\0BX\0E\08\00\00\00L\00\00\00|\0A\00\00\88\DD\FF\FFN\04\00\00\00B\0E\10\8F\02B\0E\18\8E\03G\0E \8D\04B\0E(\8C\05A\0E0\86\06A\0E8\83\07G\0E\E0\01\02\B5\0A\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08K\0B", [4 x i8] zeroinitializer, [132 x i8] c"4\00\00\00\CC\0A\00\00\88\E1\FF\FF{\00\00\00\00B\0E\10\8C\02A\0E\18\86\03A\0E \83\04}\0A\0E\18A\0E\10B\0E\08D\0B`\0A\0E\18A\0E\10B\0E\08E\0B\1C\00\00\00\04\0B\00\00\D0\E1\FF\FF@\00\00\00\00D\0E\10\83\02Z\0A\0E\08J\0BS\0E\08\00,\00\00\00$\0B\00\00\F0\E1\FF\FFW\00\00\00\00c\0E\10\8C\02A\0E\18\86\03D\0E \83\04k\0E\18A\0E\10B\0E\08\00\00\00", [4 x i8] zeroinitializer, [88 x i8] c"D\00\00\00T\0B\00\00 \E2\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\14\00\00\00\9C\0B\00\00H\E2\FF\FF\02\00\00\00", [8 x i8] zeroinitializer, [16 x i8] c"\10\00\00\00\B4\0B\00\00@\E2\FF\FF)\00\00\00", [8 x i8] zeroinitializer }>
@seg_207a70__init_array_10 = internal global %seg_207a70__init_array_10_type <{ [2672 x i8] zeroinitializer, i8* bitcast (void ()* @callback_sub_2810 to i8*), i8* bitcast (void ()* @callback_sub_27d0 to i8*), i8* @data_5d7a, [16 x i8] zeroinitializer, [4 x i8] c"b\00\00\00", [4 x i8] zeroinitializer, i8* @data_5d8a, [16 x i8] zeroinitializer, [4 x i8] c"n\00\00\00", [4 x i8] zeroinitializer, i8* @data_5d91, [16 x i8] zeroinitializer, [4 x i8] c"s\00\00\00", [4 x i8] zeroinitializer, i8* @data_5d9f, [16 x i8] zeroinitializer, [4 x i8] c"v\00\00\00", [4 x i8] zeroinitializer, i8* @data_5db0, [16 x i8] zeroinitializer, [4 x i8] c"E\00\00\00", [4 x i8] zeroinitializer, i8* @data_5dba, [16 x i8] zeroinitializer, [4 x i8] c"T\00\00\00", [4 x i8] zeroinitializer, i8* @data_5dc4, [16 x i8] zeroinitializer, [4 x i8] c"A\00\00\00", [4 x i8] zeroinitializer, i8* @data_5dcd, [16 x i8] zeroinitializer, [4 x i8] c"~\FF\FF\FF", [4 x i8] zeroinitializer, i8* @data_5dd2, [16 x i8] zeroinitializer, [4 x i8] c"}\FF\FF\FF", [36 x i8] zeroinitializer, i8* @data_62e1, i8* @data_62e9, i8* @data_62ef, i8* @data_62fc, i8* @data_6309, i8* @data_631d, i8* @data_631f, i8* @data_6302, i8* @data_5ce7, i8* @data_6327, [8 x i8] zeroinitializer, [4 x i8] c"\01\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\01\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\0C\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c" \17\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\0D\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c",\\\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\19\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"pz \00", [4 x i8] zeroinitializer, [4 x i8] c"\1B\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\1A\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"xz \00", [4 x i8] zeroinitializer, [4 x i8] c"\1C\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\F5\FE\FFo", [4 x i8] zeroinitializer, [4 x i8] c"\98\02\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\05\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c" \0A\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\06\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\00\03\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\0A\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"c\03\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\0B\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\18\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\15\00\00\00", [12 x i8] zeroinitializer, [4 x i8] c"\03\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\08~ \00", [4 x i8] zeroinitializer, [4 x i8] c"\02\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"(\05\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\14\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\07\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\17\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\F8\11\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\07\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\80\0E\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"x\03\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\09\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\18\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\1E\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\FB\FF\FFo", [4 x i8] zeroinitializer, [4 x i8] c"\01\00\00\08", [4 x i8] zeroinitializer, [4 x i8] c"\FE\FF\FFo", [4 x i8] zeroinitializer, [4 x i8] c" \0E\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\FF\FF\FFo", [4 x i8] zeroinitializer, [4 x i8] c"\01\00\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\F0\FF\FFo", [4 x i8] zeroinitializer, [4 x i8] c"\84\0D\00\00", [4 x i8] zeroinitializer, [4 x i8] c"\F9\FF\FFo", [4 x i8] zeroinitializer, [4 x i8] c"\1B\00\00\00", [84 x i8] zeroinitializer, [4 x i8] c"\18| \00", [20 x i8] zeroinitializer, i8* bitcast (i64 (i64)* @__uflow to i8*), i8* bitcast (i64 (i64)* @getenv to i8*), i8* bitcast (i64 (i64)* @free to i8*), i8* bitcast (void ()* @abort to i8*), i8* bitcast (i64 ()* @__errno_location to i8*), i8* bitcast (i64 (i64, i64, i64)* @strncmp to i8*), i8* bitcast (i64 (i64)* @_exit to i8*), i8* bitcast (i64 (i64)* @__fpending to i8*), i8* bitcast (i64 (i64, i64, i64)* @write to i8*), i8* bitcast (i64 (i64)* @textdomain to i8*), i8* bitcast (i64 (i64)* @fclose to i8*), i8* bitcast (i64 (i64, i64)* @bindtextdomain to i8*), i8* bitcast (i64 (i64, i64)* @stpcpy to i8*), i8* bitcast (i64 (i64, i64, i64)* @dcgettext to i8*), i8* bitcast (i64 ()* @__ctype_get_mb_cur_max to i8*), i8* bitcast (i64 (i64)* @strlen to i8*), i8* bitcast (i64 ()* @__stack_chk_fail to i8*), i8* bitcast (i64 (i64, i64, i64, i64, i64)* @getopt_long to i8*), i8* bitcast (i64 (i64, i64, i64, i64)* @mbrtowc to i8*), i8* bitcast (i64 (i64, i64)* @strrchr to i8*), i8* bitcast (i64 (i64, i64, i64)* @lseek to i8*), i8* bitcast (i64 (i64, i64, i64)* @memset to i8*), i8* bitcast (i64 (...)* @fscanf to i8*), i8* bitcast (i64 (...)* @ioctl to i8*), i8* bitcast (i64 (i64)* @close to i8*), i8* bitcast (i64 (i64, i64, i64, i64)* @posix_fadvise to i8*), i8* bitcast (i64 (i64, i64, i64)* @read to i8*), i8* bitcast (i64 (i64, i64, i64)* @memcmp to i8*), i8* bitcast (i64 (i64, i64)* @fputs_unlocked to i8*), i8* bitcast (i64 (i64, i64)* @calloc to i8*), i8* bitcast (i64 (i64, i64)* @strcmp to i8*), i8* bitcast (i64 (i64, i64, i64)* @memcpy to i8*), i8* bitcast (i64 (i64)* @fileno to i8*), i8* bitcast (i64 (i64)* @malloc to i8*), i8* bitcast (i64 (i64)* @fflush to i8*), i8* bitcast (i64 (i64)* @nl_langinfo to i8*), i8* bitcast (i64 (i64, i64)* @ungetc to i8*), i8* bitcast (i64 (i64, i64, i64)* @__fxstat to i8*), i8* bitcast (i64 (i64)* @__freading to i8*), i8* bitcast (i64 (i64, i64)* @realloc to i8*), i8* bitcast (i64 (i64, i64)* @fdopen to i8*), i8* bitcast (i64 (i64, i64)* @setlocale to i8*), i8* bitcast (i64 (...)* @__printf_chk to i8*), i8* bitcast (i64 (i64, i64, i64)* @memmove to i8*), i8* bitcast (i64 (...)* @error to i8*), i8* bitcast (i64 (i64, i64, i64, i64)* @open to i8*), i8* bitcast (i64 (i64, i64, i64)* @fseeko to i8*), i8* bitcast (i64 (i64, i64, i64)* @__cxa_atexit to i8*), i8* bitcast (i64 ()* @getpagesize to i8*), i8* bitcast (void (i32)* @exit to i8*), i8* bitcast (i64 (i64, i64, i64, i64)* @fwrite to i8*), i8* bitcast (i64 (...)* @__fprintf_chk to i8*), i8* bitcast (i64 (i64)* @mbsinit to i8*), i8* bitcast (i64 (i64)* @iswprint to i8*), i8* bitcast (i64 ()* @__ctype_b_loc to i8*), i8* bitcast (i64 (i64)* @_ITM_deregisterTMCloneTable to i8*), i8* bitcast (void (i32 (i32, i8**, i8**)*, i32, i8**, i8*, i32 (i32, i8**, i8**)*, void ()*, void ()*, i32*)* @__libc_start_main to i8*), i8* bitcast (void ()* @__gmon_start__ to i8*), i8* bitcast (i64 (i64, i64)* @_ITM_registerTMCloneTable to i8*), i8* bitcast (i64 (i64)* @__cxa_finalize to i8*), [8 x i8] zeroinitializer, i8* bitcast (i8** @data_208008 to i8*), [20 x i8] c"                 0\09\00", [4 x i8] zeroinitializer, i8* @data_208021, i8* @data_20801c, i8* @data_627b, [4 x i8] c"\01\00\00\00", [28 x i8] zeroinitializer, [4 x i8] c"\08\00\00\00", [52 x i8] zeroinitializer, [4 x i8] c"\01\00\00\00", [4 x i8] zeroinitializer, i8* @data_2080b0, [8 x i8] zeroinitializer, [4 x i8] c"\00\01\00\00", [4 x i8] zeroinitializer, i8* @data_208120, [80 x i8] zeroinitializer, [336 x i8] zeroinitializer }>, align 4096
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_5210_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4870_wrapper
@optind = external global i32, align 16
@stdout = external global i64, align 8
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_2ca0_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @fini_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4c00_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_5270_wrapper
@stderr = external global i64, align 32
@program_invocation_name = external global i64, align 8
@program_invocation_short_name = external global i64, align 64
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_49e0_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @init_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @start_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_2810_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_27d0_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

@data_425d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 125)
@data_4285 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 165)
@data_42ff = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 287)
@data_4341 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 353)
@data_42da = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 250)
@data_4381 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 417)
@data_421a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 58)
@data_524b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 872, i32 187)
@data_5241 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 872, i32 177)
@data_5223 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 872, i32 147)
@data_521e = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 872, i32 142)
@data_5170 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 870, i32 80)
@data_5166 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 870, i32 70)
@data_5120 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 870, i32 0)
@data_5095 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 866, i32 117)
@data_5090 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 866, i32 112)
@data_5050 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 866, i32 48)
@data_4903 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 838, i32 247)
@data_48fe = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 838, i32 242)
@data_1730 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 715, i32 16)
@data_25b2 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 234)
@data_2598 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 208)
@data_2575 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 173)
@data_251c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 84)
@data_23d2 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 386)
@data_24e8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 32)
@data_237b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 299)
@data_2337 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 231)
@data_1f6b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 726, i32 55)
@data_2241 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 736, i32 137)
@data_22dd = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 141)
@data_1fbf = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 726, i32 139)
@data_2276 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 38)
@data_2263 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 19)
@data_2250 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 0)
@data_21fd = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 736, i32 69)
@data_2133 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 734, i32 83)
@data_25f7 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 303)
@data_20f9 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 734, i32 25)
@data_1f10 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 724, i32 0)
@data_1ec0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 722, i32 248)
@data_1ead = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 722, i32 229)
@data_2449 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 505)
@data_23fd = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 429)
@data_1e37 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 722, i32 111)
@data_24cd = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 5)
@data_2490 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 576)
@data_1dec = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 722, i32 36)
@data_22a5 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 85)
@data_1ce1 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 529)
@data_1cb3 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 483)
@data_1bc8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 248)
@data_1ba0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 208)
@data_2c49 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 469)
@data_2b42 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 206)
@data_2b26 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 178)
@data_2b87 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 275)
@data_2c42 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 462)
@data_2bff = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 395)
@data_2be7 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 371)
@data_2ac0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 76)
@data_28ca = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 42)
@data_2d05 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 760, i32 101)
@data_2ce3 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 760, i32 67)
@data_2cc7 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 760, i32 39)
@data_2cdc = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 760, i32 60)
@data_2ccc = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 760, i32 44)
@data_2cb6 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 760, i32 22)
@data_2dd4 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 764, i32 72)
@data_3951 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 796, i32 241)
@data_3903 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 796, i32 163)
@data_3894 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 796, i32 52)
@data_3d91 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 800, i32 129)
@data_40fe = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 808, i32 510)
@data_3d66 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 800, i32 86)
@data_4114 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 808, i32 532)
@data_3110 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 770, i32 368)
@data_36d0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 786, i32 128)
@data_3157 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 770, i32 439)
@data_3b79 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 798, i32 457)
@data_41cf = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 808, i32 719)
@data_3020 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 770, i32 128)
@data_4d14 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 858, i32 100)
@data_502b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 866, i32 11)
@data_5019 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 864, i32 89)
@data_4f43 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 862, i32 195)
@data_4ea6 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 862, i32 38)
@data_47af = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 836, i32 47)
@data_47b4 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 836, i32 52)
@data_474c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 834, i32 28)
@data_483b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 838, i32 47)
@data_4840 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 838, i32 52)
@data_47df = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 836, i32 95)
@data_5348 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 882, i32 40)
@data_5320 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 882, i32 0)
@data_52eb = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 880, i32 11)
@data_52cb = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 878, i32 27)
@data_52c1 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 878, i32 17)
@data_5290 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 876, i32 32)
@data_528b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 876, i32 27)
@data_4bda = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 154)
@data_4bf0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 176)
@data_4bce = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 142)
@data_4bb8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 120)
@data_5736 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 898, i32 70)
@data_5720 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 898, i32 48)
@data_5750 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 0)
@data_5704 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 898, i32 20)
@data_57d8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 136)
@data_59a2 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 594)
@data_5928 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 472)
@data_597a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 554)
@data_5a3b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 747)
@data_587f = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 303)
@data_598d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 573)
@data_59e3 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 659)
@data_580d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 189)
@data_57e8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 152)
@data_57c4 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 116)
@data_5789 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 57)
@data_5775 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 37)
@data_56ac = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 896, i32 156)
@data_569f = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 896, i32 143)
@data_5692 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 896, i32 130)
@data_567a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 896, i32 106)
@data_565b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 896, i32 75)
@data_2e87 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 766, i32 119)
@data_2e16 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 766, i32 6)
@data_49cf = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 844, i32 47)
@data_49d4 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 844, i32 52)
@data_496c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 842, i32 44)
@data_2808 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 750, i32 0)
@data_27d9 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 748, i32 9)
@data_4a62 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 844, i32 194)
@data_5bd6 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 904, i32 22)
@data_5bb6 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 902, i32 54)
@data_4b7a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 58)
@data_4b90 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 80)
@data_4b6e = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 46)
@data_4b58 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 24)
@data_5568 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 892, i32 60)
@data_5551 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 892, i32 37)
@data_5a88 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 824)
@data_5ac4 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 884)
@data_5aa8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 856)
@data_5a7c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 812)
@data_5ac7 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 887)
@data_5a73 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 803)
@data_5af2 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 930)
@data_5afa = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 938)
@data_5ae9 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 921)
@data_54f0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 890, i32 148)
@data_5500 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 890, i32 164)
@data_54e0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 890, i32 132)
@data_5b30 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 992)
@data_5b2a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 986)
@data_208248 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 233, i32 312)
@data_208238 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 233, i32 296)
@data_208228 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 233, i32 280)
@data_2080b8 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 231)
@data_43bd = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 477)
@data_439c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 444)
@data_4386 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 422)
@data_433d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 349)
@data_208120 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 233, i32 16)
@data_2080b0 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 229, i32 0)
@data_208098 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 225, i32 0)
@data_2080a0 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 227)
@data_4201 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 810, i32 33)
@data_208010 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 216, i32 0)
@data_208021 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 216, i32 17)
@data_208028 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 218)
@data_27c2 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 746, i32 2)
@data_207ff0 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 212)
@data_174c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 717, i32 12)
@data_207e18 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 153, i32 12)
@data_207e10 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 153, i32 4)
@data_5204 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 872, i32 116)
@data_6a60 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 963, i32 0)
@data_51ea = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 872, i32 90)
@data_51cd = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 872, i32 61)
@data_682d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 951, i32 22)
@data_51ba = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 872, i32 42)
@data_6817 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 951, i32 0)
@data_51a4 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 872, i32 20)
@data_6802 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 949, i32 0)
@data_1732 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 715, i32 18)
@data_207fe8 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 211)
@data_1afd = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 45)
@data_1aec = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 28)
@data_1ae4 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 20)
@data_62d0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 80)
@data_62cc = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 76)
@data_62d8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 88)
@data_62d4 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 84)
@data_2ec0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 768, i32 16)
@data_2704 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 572)
@data_26f3 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 555)
@data_5d1f = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 223)
@data_26d8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 528)
@data_26d3 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 523)
@data_26c9 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 513)
@data_26b8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 496)
@data_269d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 469)
@data_267a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 434)
@data_2663 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 411)
@data_5d4d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 269)
@data_2623 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 347)
@data_2612 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 330)
@data_25e2 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 282)
@data_25cd = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 261)
@data_2548 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 128)
@data_2537 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 111)
@data_5d63 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 291)
@data_24c0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 624)
@data_24ab = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 603)
@data_2483 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 563)
@data_2472 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 546)
@data_5d2f = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 239)
@data_23a4 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 340)
@data_239a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 330)
@data_2370 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 288)
@data_235b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 267)
@data_22d5 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 133)
@data_22c0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 112)
@data_2183 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 734, i32 163)
@data_1fbc = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 726, i32 136)
@data_208030 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 219)
@data_2080f0 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 232, i32 48)
@data_1e89 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 722, i32 193)
@data_2080f4 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 232, i32 52)
@data_2080f8 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 232, i32 56)
@data_62ca = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 74)
@data_1c99 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 457)
@data_5d02 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 194)
@data_5cee = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 174)
@data_208038 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 220)
@data_5d14 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 212)
@data_207a80 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 3)
@data_1b7e = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 174)
@data_1b72 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 162)
@data_1b66 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 150)
@data_5cdc = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 156)
@data_1b53 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 131)
@data_1b42 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 114)
@data_1b38 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 720, i32 104)
@data_53c9 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 884, i32 89)
@data_2c72 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 510)
@data_61e0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 932, i32 40)
@data_2c3d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 457)
@data_2be2 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 366)
@data_2bd6 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 354)
@data_2baf = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 315)
@data_6248 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 934, i32 32)
@data_5c70 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 48)
@data_2b72 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 254)
@data_6228 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 934, i32 0)
@data_5cd8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 152)
@data_2b21 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 173)
@data_2b15 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 754, i32 161)
@data_5cca = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 138)
@data_61b8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 932, i32 0)
@data_5cb3 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 115)
@data_5c86 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 70)
@data_5c7c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 60)
@data_5c66 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 38)
@data_5cce = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 142)
@data_5c56 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 22)
@data_5c50 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 16)
@data_5ca9 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 105)
@data_5c95 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 85)
@data_5c54 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 20)
@data_2a2c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 396)
@data_5c9f = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 95)
@data_2a10 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 368)
@data_6128 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 930, i32 56)
@data_29f6 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 342)
@data_29eb = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 331)
@data_60f0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 930, i32 0)
@data_29d1 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 305)
@data_29c6 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 294)
@data_60c0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 928, i32 0)
@data_29ac = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 268)
@data_29a1 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 257)
@data_5fe8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 926, i32 392)
@data_2987 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 231)
@data_297c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 220)
@data_5e98 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 926, i32 56)
@data_2962 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 194)
@data_2957 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 183)
@data_5e60 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 926, i32 0)
@data_293d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 157)
@data_2932 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 146)
@data_5e30 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 924, i32 0)
@data_2918 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 120)
@data_5e08 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 922, i32 40)
@data_28f8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 88)
@data_28f1 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 752, i32 81)
@data_5de0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 922, i32 0)
@data_2d2d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 760, i32 141)
@data_2d22 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 760, i32 130)
@data_6280 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 0)
@data_208108 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 232, i32 72)
@data_5c44 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 4)
@data_208100 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 232, i32 64)
@data_2cb2 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 760, i32 18)
@data_5495 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 890, i32 57)
@data_5490 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 890, i32 52)
@data_6284 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 4)
@data_208040 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 221, i32 0)
@data_5477 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 890, i32 27)
@data_6b0f = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 965, i32 47)
@data_273a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 626)
@data_207fe0 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 210)
@data_62df = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 95)
@data_62db = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 91)
@data_394d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 796, i32 237)
@data_6568 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 944, i32 552)
@data_4000 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 808, i32 256)
@data_636c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 944, i32 44)
@data_62dd = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 93)
@data_404d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 808, i32 333)
@data_6340 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 944, i32 0)
@data_3011 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 770, i32 113)
@data_6a20 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 961, i32 0)
@data_6988 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 957, i32 40)
@data_6960 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 957, i32 0)
@data_6938 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 955, i32 32)
@data_6918 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 955, i32 0)
@data_67e6 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 947, i32 98)
@data_67cf = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 947, i32 75)
@data_67bf = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 947, i32 59)
@data_69e8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 959, i32 48)
@data_69b8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 959, i32 0)
@data_67b4 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 947, i32 48)
@data_5007 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 864, i32 71)
@data_6aa0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 963, i32 64)
@data_4c8c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 332)
@data_4c81 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 321)
@data_6848 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 953, i32 0)
@data_4c6e = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 302)
@data_6ae0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 965, i32 0)
@data_67bb = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 947, i32 55)
@data_4c3c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 856, i32 252)
@data_67a8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 947, i32 36)
@data_47b9 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 836, i32 57)
@data_4845 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 838, i32 57)
@data_5a36 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 742)
@data_596c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 540)
@data_5876 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 294)
@data_6b58 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 967, i32 56)
@data_5d8f = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 335)
@data_6b2e = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 967, i32 14)
@data_6b48 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 967, i32 40)
@data_6b28 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 967, i32 8)
@data_5675 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 896, i32 101)
@data_6801 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 948, i32 0)
@data_208258 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 233, i32 328)
@data_563e = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 896, i32 46)
@data_6b22 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 967, i32 2)
@data_6b20 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 967, i32 0)
@data_55bb = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 894, i32 51)
@data_2ea9 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 766, i32 153)
@data_6288 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 8)
@data_208110 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 233, i32 0)
@data_62c8 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 72)
@data_62c0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 936, i32 64)
@data_2772 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 742, i32 2)
@data_207fd8 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 209)
@data_49d9 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 844, i32 57)
@data_27f3 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 748, i32 35)
@data_207ff8 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 213)
@data_2080e8 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 232, i32 40)
@data_4a6c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 844, i32 204)
@data_208240 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 233, i32 304)
@data_208230 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 233, i32 288)
@data_208220 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 233, i32 272)
@data_208250 = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 233, i32 320)
@data_5bb1 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 902, i32 49)
@data_207a70 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 1)
@data_554a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 892, i32 30)
@data_553c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 892, i32 16)
@data_208008 = internal alias i8*, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 215)
@data_5abe = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 878)
@data_5a9b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 843)
@data_5a6c = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 796)
@data_5449 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 888, i32 9)
@data_5424 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 886, i32 68)
@data_54d7 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 890, i32 123)
@data_5b60 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 1040)
@data_257a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 740, i32 178)
@data_2300 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 738, i32 176)
@data_1f4a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 726, i32 22)
@data_1f26 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 724, i32 22)
@data_1dd0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 722, i32 8)
@data_2db0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 764, i32 36)
@data_38d3 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 796, i32 115)
@data_582f = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 223)
@data_583a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 900, i32 234)
@data_5bc0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 904, i32 0)
@data_541b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 886, i32 59)
@data_3f5e = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 808, i32 94)
@data_2d4d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 760, i32 173)
@data_495e = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 842, i32 30)
@data_5d7a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 314)
@data_5d8a = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 330)
@data_5d91 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 337)
@data_5d9f = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 351)
@data_5db0 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 916, i32 0)
@data_5dba = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 916, i32 10)
@data_5dc4 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 916, i32 20)
@data_5dcd = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 918, i32 0)
@data_5dd2 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 920, i32 0)
@data_62e1 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 938, i32 0)
@data_62e9 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 938, i32 8)
@data_62ef = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 938, i32 14)
@data_62fc = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 940, i32 0)
@data_6309 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 942, i32 0)
@data_631d = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 942, i32 20)
@data_631f = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 942, i32 22)
@data_6302 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 940, i32 6)
@data_5ce7 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 914, i32 167)
@data_6327 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 942, i32 30)
@data_20801c = internal alias i8, getelementptr inbounds (%seg_207a70__init_array_10_type, %seg_207a70__init_array_10_type* @seg_207a70__init_array_10, i32 0, i32 216, i32 12)
@data_627b = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 934, i32 83)
@data_6b64 = internal alias i8, getelementptr inbounds (%seg_0_LOAD_1720_type, %seg_0_LOAD_1720_type* @seg_0_LOAD_1720, i32 0, i32 969, i32 0)
@RSP_2312_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 13, i32 0, i32 0)
@RSP_2312_56234d8e7800 = private thread_local(initialexec) alias i64*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 13, i32 0, i32 0) to i64**)
@OF_2077_56234d8dff60 = private thread_local(initialexec) alias i8, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 2, i32 13)
@SF_2073_56234d8dff60 = private thread_local(initialexec) alias i8, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 2, i32 9)
@ZF_2071_56234d8dff60 = private thread_local(initialexec) alias i8, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 2, i32 7)
@AF_2069_56234d8dff60 = private thread_local(initialexec) alias i8, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 2, i32 5)
@PF_2067_56234d8dff60 = private thread_local(initialexec) alias i8, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 2, i32 3)
@CF_2065_56234d8dff60 = private thread_local(initialexec) alias i8, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 2, i32 1)
@RAX_2216_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 1, i32 0, i32 0)
@RDX_2264_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 7, i32 0, i32 0)
@RSI_2280_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 9, i32 0, i32 0)
@RBX_2232_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 3, i32 0, i32 0)
@RBX_2232_56234d8e7800 = private thread_local(initialexec) alias i64*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 3, i32 0, i32 0) to i64**)
@R12_2408_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 25, i32 0, i32 0)
@RBP_2328_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 15, i32 0, i32 0)
@RDI_2296_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 11, i32 0, i32 0)
@RDI_2296_56234d8e7800 = private thread_local(initialexec) alias i64*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 11, i32 0, i32 0) to i64**)
@RAX_2216_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 1, i32 0, i32 0) to i32*)
@RDX_2264_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 7, i32 0, i32 0) to i32*)
@R12_2408_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 25, i32 0, i32 0) to i32*)
@FS_BASE_2168_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 5, i32 7, i32 0, i32 0)
@RBX_2232_56234d8ed000 = private thread_local(initialexec) alias i32*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 3, i32 0, i32 0) to i32**)
@R13_2424_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 27, i32 0, i32 0)
@R13_2424_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 27, i32 0, i32 0) to i8**)
@RAX_2216_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 1, i32 0, i32 0) to i8*)
@RAX_2216_56234d8ed000 = private thread_local(initialexec) alias i32*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 1, i32 0, i32 0) to i32**)
@RBP_2328_56234d8ed000 = private thread_local(initialexec) alias i32*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 15, i32 0, i32 0) to i32**)
@RAX_2216_56234d8ee2d0 = private thread_local(initialexec) alias i8**, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 1, i32 0, i32 0) to i8***)
@RBX_2232_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 3, i32 0, i32 0) to i32*)
@RDI_2296_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 11, i32 0, i32 0) to i32*)
@R13_2424_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 27, i32 0, i32 0) to i32*)
@RIP_2472_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 33, i32 0, i32 0)
@R12_2408_56234d8ee2d0 = private thread_local(initialexec) alias i8**, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 25, i32 0, i32 0) to i8***)
@R15_2456_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 31, i32 0, i32 0)
@R14_2440_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 29, i32 0, i32 0)
@R15_2456_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 31, i32 0, i32 0) to i32*)
@R8_2344_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 17, i32 0, i32 0)
@RCX_2248_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 5, i32 0, i32 0)
@R9_2360_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 19, i32 0, i32 0)
@XMM0_16_56234d8ed4d0 = private thread_local(initialexec) alias <2 x float>, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0) to <2 x float>*)
@XMM0_16_56234d8dffc0 = private thread_local(initialexec) alias i128, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0) to i128*)
@XMM0_24_56234d8ed4d0 = private thread_local(initialexec) alias <2 x float>, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1) to <2 x float>*)
@RSI_2280_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 9, i32 0, i32 0) to i32*)
@RAX_2216_56234d8e7800 = private thread_local(initialexec) alias i64*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 1, i32 0, i32 0) to i64**)
@DF_2075_56234d8dff60 = private thread_local(initialexec) alias i8, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 2, i32 11)
@RDI_2296_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 11, i32 0, i32 0) to i8**)
@RSI_2280_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 9, i32 0, i32 0) to i8**)
@RCX_2248_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 5, i32 0, i32 0) to i8*)
@RSI_2280_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 9, i32 0, i32 0) to i8*)
@RDX_2264_56234d8ed000 = private thread_local(initialexec) alias i32*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 7, i32 0, i32 0) to i32**)
@RAX_2216_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 1, i32 0, i32 0) to i8**)
@R15_2456_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 31, i32 0, i32 0) to i8**)
@R14_2440_56234d8e7800 = private thread_local(initialexec) alias i64*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 29, i32 0, i32 0) to i64**)
@RBX_2232_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 3, i32 0, i32 0) to i8**)
@R13_2424_56234d8ed000 = private thread_local(initialexec) alias i32*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 27, i32 0, i32 0) to i32**)
@RDX_2264_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 7, i32 0, i32 0) to i8*)
@RBP_2328_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 15, i32 0, i32 0) to i8*)
@RSI_2280_56234d8e7800 = private thread_local(initialexec) alias i64*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 9, i32 0, i32 0) to i64**)
@R8_2344_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 17, i32 0, i32 0) to i8*)
@R10_2376_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 21, i32 0, i32 0)
@R8_2344_56234d8e7800 = private thread_local(initialexec) alias i64*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 17, i32 0, i32 0) to i64**)
@RDX_2264_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 7, i32 0, i32 0) to i8**)
@R9_2360_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 19, i32 0, i32 0) to i8**)
@RCX_2248_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 5, i32 0, i32 0) to i8**)
@R11_2392_56234d8dffa8 = private thread_local(initialexec) alias i64, getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 23, i32 0, i32 0)
@RSP_2312_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 13, i32 0, i32 0) to i8**)
@RSP_2312_56234d8ed000 = private thread_local(initialexec) alias i32*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 13, i32 0, i32 0) to i32**)
@R14_2440_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 29, i32 0, i32 0) to i8**)
@R8_2344_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 17, i32 0, i32 0) to i32*)
@R9_2360_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 19, i32 0, i32 0) to i32*)
@R9_2360_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 19, i32 0, i32 0) to i8*)
@RBX_2232_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 3, i32 0, i32 0) to i8*)
@R10_2376_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 21, i32 0, i32 0) to i32*)
@R10_2376_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 21, i32 0, i32 0) to i8*)
@RAX_2216_56234d8dff78 = private thread_local(initialexec) alias i16, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 1, i32 0, i32 0) to i16*)
@R12_2408_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 25, i32 0, i32 0) to i8*)
@RDI_2296_56234d8ee330 = private thread_local(initialexec) alias i32 (i32, i8**, i8**)*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 11, i32 0, i32 0) to i32 (i32, i8**, i8**)**)
@RCX_2248_56234d8ed260 = private thread_local(initialexec) alias void ()*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 5, i32 0, i32 0) to void ()**)
@R8_2344_56234d8ed260 = private thread_local(initialexec) alias void ()*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 17, i32 0, i32 0) to void ()**)
@RIP_2472_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 33, i32 0, i32 0) to i8**)
@R12_2408_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 25, i32 0, i32 0) to i8**)
@RBP_2328_56234d8dff90 = private thread_local(initialexec) alias i32, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 15, i32 0, i32 0) to i32*)
@RCX_2248_56234d8ee2d0 = private thread_local(initialexec) alias i8**, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 5, i32 0, i32 0) to i8***)
@R8_2344_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 17, i32 0, i32 0) to i8**)
@RDI_2296_56234d8ed260 = private thread_local(initialexec) alias void ()*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 11, i32 0, i32 0) to void ()**)
@R15_2456_56234d8e7750 = private thread_local(initialexec) alias i16*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 31, i32 0, i32 0) to i16**)
@R13_2424_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 27, i32 0, i32 0) to i8*)
@RBP_2328_56234d8e76a0 = private thread_local(initialexec) alias i8*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 15, i32 0, i32 0) to i8**)
@R11_2392_56234d8e7800 = private thread_local(initialexec) alias i64*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 23, i32 0, i32 0) to i64**)
@R10_2376_56234d8ed000 = private thread_local(initialexec) alias i32*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 21, i32 0, i32 0) to i32**)
@R10_2376_56234d8e7800 = private thread_local(initialexec) alias i64*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 21, i32 0, i32 0) to i64**)
@R11_2392_56234d8dff60 = private thread_local(initialexec) alias i8, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 23, i32 0, i32 0) to i8*)
@RAX_2216_56234d8ed640 = private thread_local(initialexec) alias float*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 1, i32 0, i32 0) to float**)
@RBP_2328_56234d8e7800 = private thread_local(initialexec) alias i64*, bitcast (i64* getelementptr inbounds (%struct.State, %struct.State* @__mcsema_reg_state, i32 0, i32 6, i32 15, i32 0, i32 0) to i64**)

declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: nounwind readnone speculatable willreturn
declare !remill.function.type !1215 i32 @llvm.ctpop.i32(i32) #1

; Function Attrs: alwaysinline inlinehint noduplicate noreturn nounwind
define internal %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376) %0, i64 %1, %struct.Memory* %2) #2 !remill.function.type !1215 {
  call void @abort()
  unreachable
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #3

; Function Attrs: nounwind readnone
declare !remill.function.type !1215 dso_local i32 @__remill_fpu_exception_test_and_clear(i32, i32) #4

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_atomic_end(%struct.Memory*) #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_delay_slot_begin(%struct.Memory*) #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_delay_slot_end(%struct.Memory*) #5

; Function Attrs: noduplicate noinline nounwind optnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_function_call(%struct.State* nonnull, i64, %struct.Memory*) #6

; Function Attrs: noduplicate noinline nounwind optnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_function_return(%struct.State* nonnull, i64, %struct.Memory*) #6

; Function Attrs: noduplicate noinline nounwind optnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_jump(%struct.State* nonnull, i64, %struct.Memory*) #6

; Function Attrs: alwaysinline inlinehint noduplicate noreturn nounwind
define internal %struct.Memory* @__remill_missing_block(%struct.State* nonnull %0, i64 %1, %struct.Memory* %2) #7 !remill.function.type !1215 {
  call void @abort()
  unreachable
}

; Function Attrs: noduplicate noinline nounwind optnone
declare !remill.function.type !1215 dso_local %struct.Memory* @__remill_async_hyper_call(%struct.State* nonnull, i64, %struct.Memory*) #6

; Function Attrs: naked nobuiltin noinline
define private void @init() #8 {
  call void asm sideeffect "pushq $0;pushq $$0x5b80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

; Function Attrs: naked nobuiltin noinline
define private void @fini() #8 {
  call void asm sideeffect "pushq $0;pushq $$0x5bf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5b20(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5b20:
  %0 = load i64*, i64** @RDI_2296_56234d8e7800
  %1 = load i64, i64* @RDI_2296_56234d8dffa8
  %2 = getelementptr i64, i64* %0, i32 1
  %3 = load i64, i64* %2
  store i64 %3, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %4 = getelementptr i64, i64* %0, i32 2
  %5 = load i64, i64* %4
  %6 = sub i64 %5, %3
  %7 = icmp ult i64 %5, %3
  %8 = zext i1 %7 to i8
  store i8 %8, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = call i32 @llvm.ctpop.i32(i32 %10) #13, !range !1234
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  store i8 %14, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %15 = xor i64 %5, %3
  %16 = xor i64 %15, %6
  %17 = lshr i64 %16, 4
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  store i8 %19, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %22 = lshr i64 %6, 63
  %23 = trunc i64 %22 to i8
  store i8 %23, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %24 = lshr i64 %5, 63
  %25 = lshr i64 %3, 63
  %26 = xor i64 %24, %25
  %27 = xor i64 %22, %24
  %28 = add nuw nsw i64 %27, %26
  %29 = icmp eq i64 %28, 2
  %30 = zext i1 %29 to i8
  store i8 %30, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  br i1 %20, label %inst_5b30, label %inst_5b2a

inst_5b2a:                                        ; preds = %inst_5b3a, %inst_5b30, %inst_5b20
  %31 = call %struct.Memory* @ext_1a30_fseeko(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  ret %struct.Memory* %31

inst_5b72:                                        ; preds = %inst_5b66, %inst_5b41
  %32 = load i64*, i64** @RSP_2312_56234d8e7800
  %33 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %34 = add i64 %33, 8
  %35 = getelementptr i64, i64* %32, i32 1
  %36 = load i64, i64* %32
  store i64 %36, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %37 = add i64 %34, 8
  %38 = load i64, i64* %35
  store i64 %38, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %39 = add i64 %37, 8
  %40 = getelementptr i64, i64* %35, i32 1
  %41 = load i64, i64* %40
  store i64 %41, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %42 = add i64 %39, 8
  store i64 %42, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %127

inst_5b30:                                        ; preds = %inst_5b20
  %43 = getelementptr i64, i64* %0, i32 4
  %44 = load i64, i64* %43
  store i64 %44, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %45 = getelementptr i64, i64* %0, i32 5
  %46 = load i64, i64* %45
  %47 = sub i64 %46, %44
  %48 = icmp ult i64 %46, %44
  %49 = zext i1 %48 to i8
  store i8 %49, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %50 = trunc i64 %47 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #13, !range !1234
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  store i8 %55, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %56 = xor i64 %46, %44
  %57 = xor i64 %56, %47
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  store i8 %60, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %61 = icmp eq i64 %47, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %63 = lshr i64 %47, 63
  %64 = trunc i64 %63 to i8
  store i8 %64, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %65 = lshr i64 %46, 63
  %66 = lshr i64 %44, 63
  %67 = xor i64 %65, %66
  %68 = xor i64 %63, %65
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  store i8 %71, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %72 = icmp eq i8 %62, 0
  br i1 %72, label %inst_5b2a, label %inst_5b3a

inst_5b3a:                                        ; preds = %inst_5b30
  %73 = getelementptr i64, i64* %0, i32 9
  %74 = load i64, i64* %73
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %75 = trunc i64 %74 to i32
  %76 = and i32 %75, 255
  %77 = call i32 @llvm.ctpop.i32(i32 %76) #13, !range !1234
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  store i8 %80, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %81 = icmp eq i64 %74, 0
  %82 = zext i1 %81 to i8
  store i8 %82, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %83 = lshr i64 %74, 63
  %84 = trunc i64 %83 to i8
  store i8 %84, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %85 = icmp eq i8 %82, 0
  br i1 %85, label %inst_5b2a, label %inst_5b41

inst_5b41:                                        ; preds = %inst_5b3a
  %86 = icmp eq i8 %21, 0
  %87 = select i1 %86, i64 ptrtoint (i8* @data_5b2a to i64), i64 ptrtoint (i8* @data_5b30 to i64)
  %88 = add i64 %87, 4
  %89 = add i64 %88, 4
  %90 = add i64 %89, 2
  %91 = add i64 %90, 5
  %92 = add i64 %91, 2
  %93 = add i64 %92, 2
  %94 = load i64, i64* @R12_2408_56234d8dffa8
  %95 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %94, i64* %97
  %98 = add i64 %93, 1
  %99 = load i64, i64* @RBP_2328_56234d8dffa8
  %100 = add i64 %96, -8
  %101 = getelementptr i64, i64* %97, i32 -1
  store i64 %99, i64* %101
  %102 = add i64 %98, 3
  %103 = load i32, i32* @RDX_2264_56234d8dff90
  %104 = zext i32 %103 to i64
  %105 = and i64 %104, 4294967295
  store i64 %105, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %106 = add i64 %102, 1
  %107 = load i64, i64* @RBX_2232_56234d8dffa8
  %108 = add i64 %100, -8
  %109 = getelementptr i64, i64* %101, i32 -1
  store i64 %107, i64* %109
  %110 = add i64 %106, 3
  %111 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %111, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %112 = add i64 %110, 3
  store i64 %1, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %113 = add i64 %112, 5
  %114 = add i64 %108, -8
  %115 = getelementptr i64, i64* %109, i32 -1
  store i64 %113, i64* %115
  store i64 %114, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %116 = call %struct.Memory* @ext_208368_fileno(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %117 = load i32, i32* @R12_2408_56234d8dff90
  %118 = zext i32 %117 to i64
  %119 = and i64 %118, 4294967295
  store i64 %119, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %120 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %120, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %121 = load i32, i32* @RAX_2216_56234d8dff90
  %122 = zext i32 %121 to i64
  %123 = and i64 %122, 4294967295
  store i64 %123, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %124 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 ptrtoint (i8* @data_5b60 to i64), i64* %126
  store i64 %125, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %127 = call %struct.Memory* @ext_208300_lseek(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %116)
  %128 = load i64, i64* @RAX_2216_56234d8dffa8
  %129 = sub i64 %128, -1
  %130 = icmp ult i64 %128, -1
  %131 = zext i1 %130 to i8
  store i8 %131, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %132 = trunc i64 %129 to i32
  %133 = and i32 %132, 255
  %134 = call i32 @llvm.ctpop.i32(i32 %133) #13, !range !1234
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = xor i8 %136, 1
  store i8 %137, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %138 = xor i64 -1, %128
  %139 = xor i64 %138, %129
  %140 = lshr i64 %139, 4
  %141 = trunc i64 %140 to i8
  %142 = and i8 %141, 1
  store i8 %142, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %143 = icmp eq i64 %129, 0
  %144 = zext i1 %143 to i8
  store i8 %144, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %145 = lshr i64 %129, 63
  %146 = trunc i64 %145 to i8
  store i8 %146, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %147 = lshr i64 %128, 63
  %148 = xor i64 1, %147
  %149 = xor i64 %145, %147
  %150 = add nuw nsw i64 %149, %148
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  store i8 %152, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  br i1 %143, label %inst_5b72, label %inst_5b66

inst_5b66:                                        ; preds = %inst_5b41
  %153 = load i64*, i64** @RBX_2232_56234d8e7800
  %154 = bitcast i64* %153 to i32*
  %155 = load i32, i32* %154
  %156 = and i32 %155, -17
  store i32 %156, i32* %154
  %157 = getelementptr i64, i64* %153, i32 18
  store i64 %128, i64* %157
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br label %inst_5b72
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_54a0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_54a0:
  %0 = load i64, i64* @R13_2424_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @R12_2408_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %7, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %8 = load i64, i64* @RBP_2328_56234d8dffa8
  %9 = add i64 %5, -8
  %10 = getelementptr i64, i64* %6, i32 -1
  store i64 %8, i64* %10
  %11 = load i64, i64* @RBX_2232_56234d8dffa8
  %12 = add i64 %9, -8
  %13 = getelementptr i64, i64* %10, i32 -1
  store i64 %11, i64* %13
  %14 = load i64, i64* @RDI_2296_56234d8dffa8
  %15 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %15, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %16 = sub i64 %12, 24
  %17 = inttoptr i64 %16 to i64*
  %18 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %19 = add i64 %18, 40
  %20 = inttoptr i64 %19 to i64*
  %21 = load i64, i64* %20
  %22 = getelementptr i64, i64* %17, i32 1
  store i64 %21, i64* %22
  %23 = add i64 %16, 4
  store i64 %23, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %24 = trunc i64 %14 to i32
  %25 = and i32 %24, 255
  %26 = call i32 @llvm.ctpop.i32(i32 %25) #13, !range !1234
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  store i8 %29, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %30 = icmp eq i64 %14, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %32 = lshr i64 %14, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %34 = icmp eq i8 %31, 0
  %35 = select i1 %34, i64 %14, i64 %23
  store i64 %35, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 %35, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %36 = add i64 %16, -8
  %37 = getelementptr i64, i64* %17, i32 -1
  store i64 ptrtoint (i8* @data_54d7 to i64), i64* %37
  store i64 %36, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %38 = call %struct.Memory* @ext_2082f0_mbrtowc(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %39 = load i64, i64* @RAX_2216_56234d8dffa8
  %40 = sub i64 %39, -3
  %41 = icmp ult i64 %39, -3
  %42 = zext i1 %41 to i8
  %43 = icmp eq i64 %40, 0
  %44 = zext i1 %43 to i8
  store i64 %39, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %45 = or i8 %44, %42
  %46 = icmp ne i8 %45, 0
  %47 = select i1 %46, i64 ptrtoint (i8* @data_5500 to i64), i64 ptrtoint (i8* @data_54e0 to i64)
  br i1 %46, label %inst_5500, label %inst_54e0

inst_5500:                                        ; preds = %inst_54f0, %inst_54e5, %inst_54e0, %inst_54a0
  %48 = phi i64 [ %47, %inst_54a0 ], [ %78, %inst_54e0 ], [ %89, %inst_54e5 ], [ %98, %inst_54f0 ]
  %49 = phi %struct.Memory* [ %38, %inst_54a0 ], [ %38, %inst_54e0 ], [ %84, %inst_54e5 ], [ %84, %inst_54f0 ]
  %50 = load i64*, i64** @RSP_2312_56234d8e7800
  %51 = load i64, i64* @RSP_2312_56234d8dffa8
  %52 = getelementptr i64, i64* %50, i32 1
  %53 = load i64, i64* %52
  %54 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %55 = add i64 %54, 40
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56
  %58 = xor i64 %57, %53
  store i64 %58, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %59 = trunc i64 %58 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #13, !range !1234
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %65 = icmp eq i64 %58, 0
  %66 = zext i1 %65 to i8
  store i8 %66, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %67 = lshr i64 %58, 63
  %68 = trunc i64 %67 to i8
  store i8 %68, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %69 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %69, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %70 = icmp eq i8 %66, 0
  br i1 %70, label %inst_551e, label %inst_5513

inst_54e0:                                        ; preds = %inst_54a0
  %71 = add i64 %47, 3
  %72 = load i64, i64* @R12_2408_56234d8dffa8
  %73 = icmp eq i64 %72, 0
  %74 = zext i1 %73 to i8
  %75 = add i64 %71, 2
  %76 = add i64 %75, 27
  %77 = icmp eq i8 %74, 0
  %78 = select i1 %77, i64 %75, i64 %76
  br i1 %73, label %inst_5500, label %inst_54e5

inst_54e5:                                        ; preds = %inst_54e0
  %79 = add i64 %78, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %80 = add i64 %79, 5
  %81 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %82 = add i64 %81, -8
  %83 = inttoptr i64 %82 to i64*
  store i64 %80, i64* %83
  store i64 %82, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %84 = call %struct.Memory* @sub_55b0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %38)
  %85 = load i8, i8* @RAX_2216_56234d8dff60
  %86 = icmp eq i8 %85, 0
  %87 = zext i1 %86 to i8
  %88 = icmp eq i8 %87, 0
  %89 = select i1 %88, i64 ptrtoint (i8* @data_5500 to i64), i64 ptrtoint (i8* @data_54f0 to i64)
  br i1 %88, label %inst_5500, label %inst_54f0

inst_54f0:                                        ; preds = %inst_54e5
  %90 = add i64 %89, 5
  %91 = load i8*, i8** @R13_2424_56234d8e76a0
  %92 = load i8, i8* %91
  %93 = zext i8 %92 to i64
  %94 = add i64 %90, 5
  store i64 1, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %95 = add i64 %94, 2
  %96 = load i32*, i32** @RBX_2232_56234d8ed000
  %97 = trunc i64 %93 to i32
  store i32 %97, i32* %96
  %98 = add i64 %95, 4
  br label %inst_5500

inst_551e:                                        ; preds = %inst_5500
  %99 = add i64 %48, 5
  %100 = add i64 %99, 9
  %101 = add i64 %100, 3
  %102 = add i64 %101, 2
  %103 = add i64 %102, 11
  %104 = add i64 %103, 5
  %105 = add i64 %51, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 %104, i64* %106
  store i64 %105, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %107 = call %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %49)
  ret %struct.Memory* %107

inst_5513:                                        ; preds = %inst_5500
  %108 = add i64 24, %51
  %109 = getelementptr i64, i64* %50, i32 3
  %110 = icmp ult i64 %108, %51
  %111 = icmp ult i64 %108, 24
  %112 = or i1 %110, %111
  %113 = zext i1 %112 to i8
  store i8 %113, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %114 = trunc i64 %108 to i32
  %115 = and i32 %114, 255
  %116 = call i32 @llvm.ctpop.i32(i32 %115) #13, !range !1234
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  store i8 %119, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %120 = xor i64 24, %51
  %121 = xor i64 %120, %108
  %122 = lshr i64 %121, 4
  %123 = trunc i64 %122 to i8
  %124 = and i8 %123, 1
  store i8 %124, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %125 = icmp eq i64 %108, 0
  %126 = zext i1 %125 to i8
  store i8 %126, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %127 = lshr i64 %108, 63
  %128 = trunc i64 %127 to i8
  store i8 %128, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %129 = lshr i64 %51, 63
  %130 = xor i64 %127, %129
  %131 = add nuw nsw i64 %130, %127
  %132 = icmp eq i64 %131, 2
  %133 = zext i1 %132 to i8
  store i8 %133, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %134 = add i64 %108, 8
  %135 = getelementptr i64, i64* %109, i32 1
  %136 = load i64, i64* %109
  store i64 %136, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %137 = add i64 %134, 8
  %138 = getelementptr i64, i64* %135, i32 1
  %139 = load i64, i64* %135
  store i64 %139, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %140 = add i64 %137, 8
  %141 = load i64, i64* %138
  store i64 %141, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %142 = add i64 %140, 8
  %143 = getelementptr i64, i64* %138, i32 1
  %144 = load i64, i64* %143
  store i64 %144, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %145 = add i64 %142, 8
  store i64 %145, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %49
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5ae0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5ae0:
  %0 = load i64, i64* @RDI_2296_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1 = trunc i64 %0 to i32
  %2 = and i32 %1, 255
  %3 = call i32 @llvm.ctpop.i32(i32 %2) #13, !range !1234
  %4 = trunc i32 %3 to i8
  %5 = and i8 %4, 1
  %6 = xor i8 %5, 1
  store i8 %6, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %7 = icmp eq i64 %0, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %9 = lshr i64 %0, 63
  %10 = trunc i64 %9 to i8
  store i8 %10, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %11 = load i64, i64* @RBX_2232_56234d8dffa8
  %12 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14
  store i64 %13, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  store i64 %0, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br i1 %7, label %inst_5afa, label %inst_5ae9

inst_5afa:                                        ; preds = %inst_5af2, %inst_5ae9, %inst_5ae0
  %15 = phi %struct.Memory* [ %memory, %inst_5ae0 ], [ %26, %inst_5ae9 ], [ %26, %inst_5af2 ]
  %16 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %16, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %17 = load i64*, i64** @RSP_2312_56234d8e7800
  %18 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %19 = add i64 %18, 8
  store i64 %19, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %20 = load i64, i64* %17
  store i64 %20, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1970

inst_5ae9:                                        ; preds = %inst_5ae0
  %21 = icmp eq i8 %8, 0
  %22 = select i1 %21, i64 ptrtoint (i8* @data_5ae9 to i64), i64 ptrtoint (i8* @data_5afa to i64)
  %23 = add i64 %22, 5
  %24 = add i64 %13, -8
  %25 = getelementptr i64, i64* %14, i32 -1
  store i64 %23, i64* %25
  store i64 %24, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %26 = call %struct.Memory* @ext_208398___freading(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %27 = load i32, i32* @RAX_2216_56234d8dff90
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %28 = and i32 %27, 255
  %29 = call i32 @llvm.ctpop.i32(i32 %28) #13, !range !1234
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  store i8 %32, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %33 = icmp eq i32 %27, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %35 = lshr i32 %27, 31
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br i1 %33, label %inst_5afa, label %inst_5af2

inst_5af2:                                        ; preds = %inst_5ae9
  %37 = load i32*, i32** @RBX_2232_56234d8ed000
  %38 = load i64, i64* @RBX_2232_56234d8dffa8
  %39 = load i32, i32* %37
  %40 = and i32 %39, 256
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %41 = icmp eq i32 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %inst_5b08, label %inst_5afa

inst_5b08:                                        ; preds = %inst_5af2
  %44 = icmp eq i8 %34, 0
  %45 = select i1 %44, i64 ptrtoint (i8* @data_5af2 to i64), i64 ptrtoint (i8* @data_5afa to i64)
  %46 = add i64 %45, 6
  %47 = add i64 %46, 2
  %48 = add i64 %47, 14
  %49 = add i64 %48, 3
  store i64 %38, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %50 = add i64 %49, 5
  store i64 1, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %51 = add i64 %50, 2
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %52 = add i64 %51, 5
  %53 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %52, i64* %55
  store i64 %54, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %56 = call %struct.Memory* @sub_5b20(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %26)
  %57 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %57, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %58 = load i64*, i64** @RSP_2312_56234d8e7800
  %59 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %60 = add i64 %59, 8
  store i64 %60, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %61 = load i64, i64* %58
  store i64 %61, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1970

inst_1970:                                        ; preds = %inst_5b08, %inst_5afa
  %62 = phi %struct.Memory* [ %15, %inst_5afa ], [ %56, %inst_5b08 ]
  %63 = call %struct.Memory* @ext_1970_fflush(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %62)
  ret %struct.Memory* %63
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5410(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5410:
  %0 = load i64, i64* @RBP_2328_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @RBX_2232_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 %7, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %8 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %8, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 %8, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %9 = sub i64 %5, 8
  %10 = inttoptr i64 %9 to i64*
  %11 = icmp ult i64 %5, 8
  %12 = zext i1 %11 to i8
  store i8 %12, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = call i32 @llvm.ctpop.i32(i32 %14) #13, !range !1234
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %19 = xor i64 8, %5
  %20 = xor i64 %19, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  store i8 %23, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %24 = icmp eq i64 %9, 0
  %25 = zext i1 %24 to i8
  store i8 %25, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %26 = lshr i64 %9, 63
  %27 = trunc i64 %26 to i8
  store i8 %27, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %28 = lshr i64 %5, 63
  %29 = xor i64 %26, %28
  %30 = add nuw nsw i64 %29, %28
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  store i8 %32, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %33 = add i64 %9, -8
  %34 = getelementptr i64, i64* %10, i32 -1
  store i64 ptrtoint (i8* @data_5424 to i64), i64* %34
  store i64 %33, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %35 = call %struct.Memory* @sub_5210(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %36 = load i64*, i64** @RSP_2312_56234d8e7800
  %37 = load i64, i64* @RSP_2312_56234d8dffa8
  %38 = add i64 8, %37
  %39 = getelementptr i64, i64* %36, i32 1
  %40 = icmp ult i64 %38, %37
  %41 = icmp ult i64 %38, 8
  %42 = or i1 %40, %41
  %43 = zext i1 %42 to i8
  store i8 %43, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %44 = trunc i64 %38 to i32
  %45 = and i32 %44, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #13, !range !1234
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  store i8 %49, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %50 = xor i64 8, %37
  %51 = xor i64 %50, %38
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  store i8 %54, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %55 = icmp eq i64 %38, 0
  %56 = zext i1 %55 to i8
  store i8 %56, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %57 = lshr i64 %38, 63
  %58 = trunc i64 %57 to i8
  store i8 %58, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %59 = lshr i64 %37, 63
  %60 = xor i64 %57, %59
  %61 = add nuw nsw i64 %60, %57
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  store i8 %63, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %64 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %64, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %65 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %65, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %66 = add i64 %38, 8
  %67 = load i64, i64* %39
  store i64 %67, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %68 = add i64 %66, 8
  store i64 %68, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %69 = getelementptr i64, i64* %39, i32 1
  %70 = load i64, i64* %69
  store i64 %70, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %71 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %71, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %72 = call %struct.Memory* @ext_1940_memcpy(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %35)
  ret %struct.Memory* %72
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5440(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5440:
  %0 = load i64, i64* @RBX_2232_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 %4, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 ptrtoint (i8* @data_5449 to i64), i64* %6
  store i64 %5, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %7 = call %struct.Memory* @ext_2082d8_strlen(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %8 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %8, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %9 = load i64, i64* @RAX_2216_56234d8dffa8
  %10 = add i64 %9, 1
  store i64 %10, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %11 = load i64*, i64** @RSP_2312_56234d8e7800
  %12 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %13 = add i64 %12, 8
  store i64 %13, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %14 = load i64, i64* %11
  store i64 %14, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %15 = call %struct.Memory* @sub_5410(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %7)
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5a60(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5a60:
  %0 = load i64, i64* @R12_2408_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @RBP_2328_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i64, i64* @RBX_2232_56234d8dffa8
  %8 = add i64 %5, -8
  %9 = getelementptr i64, i64* %6, i32 -1
  store i64 %7, i64* %9
  %10 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 %10, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %11 = add i64 %8, -8
  %12 = getelementptr i64, i64* %9, i32 -1
  store i64 ptrtoint (i8* @data_5a6c to i64), i64* %12
  store i64 %11, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %13 = call %struct.Memory* @ext_208368_fileno(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %14 = load i32, i32* @RAX_2216_56234d8dff90
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %15 = and i32 %14, 255
  %16 = call i32 @llvm.ctpop.i32(i32 %15) #13, !range !1234
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %20 = icmp eq i32 %14, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %22 = lshr i32 %14, 31
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %24 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %24, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %25 = icmp eq i8 %23, 1
  br i1 %25, label %inst_5ac7, label %inst_5a73

inst_5aa0:                                        ; preds = %inst_5ad0, %inst_5a88
  %26 = load i64*, i64** @RSP_2312_56234d8e7800
  %27 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %28 = add i64 %27, 8
  %29 = getelementptr i64, i64* %26, i32 1
  %30 = load i64, i64* %26
  store i64 %30, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %31 = add i64 %28, 8
  %32 = load i64, i64* %29
  store i64 %32, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %33 = add i64 %31, 8
  %34 = getelementptr i64, i64* %29, i32 1
  %35 = load i64, i64* %34
  store i64 %35, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %36 = add i64 %33, 8
  store i64 %36, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %145

inst_5ac4:                                        ; preds = %inst_5aa8, %inst_5a7c
  %37 = phi %struct.Memory* [ %59, %inst_5a7c ], [ %102, %inst_5aa8 ]
  %38 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %38, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5ac7

inst_5ac7:                                        ; preds = %inst_5ac4, %inst_5a60
  %39 = phi %struct.Memory* [ %13, %inst_5a60 ], [ %37, %inst_5ac4 ]
  %40 = load i64*, i64** @RSP_2312_56234d8e7800
  %41 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %42 = add i64 %41, 8
  %43 = getelementptr i64, i64* %40, i32 1
  %44 = load i64, i64* %40
  store i64 %44, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %45 = add i64 %42, 8
  %46 = load i64, i64* %43
  store i64 %46, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %47 = add i64 %45, 8
  store i64 %47, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %48 = getelementptr i64, i64* %43, i32 1
  %49 = load i64, i64* %48
  store i64 %49, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %50 = call %struct.Memory* @ext_17f0_fclose(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %39)
  ret %struct.Memory* %50

inst_5a7c:                                        ; preds = %inst_5aa8, %inst_5a73
  %51 = phi i64 [ %129, %inst_5aa8 ], [ %88, %inst_5a73 ]
  %52 = phi %struct.Memory* [ %102, %inst_5aa8 ], [ %76, %inst_5a73 ]
  %53 = add i64 %51, 3
  %54 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %54, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %55 = add i64 %53, 5
  %56 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %57 = add i64 %56, -8
  %58 = inttoptr i64 %57 to i64*
  store i64 %55, i64* %58
  store i64 %57, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %59 = call %struct.Memory* @sub_5ae0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %52)
  %60 = load i32, i32* @RAX_2216_56234d8dff90
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #13, !range !1234
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  store i8 %65, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %66 = icmp eq i32 %60, 0
  %67 = zext i1 %66 to i8
  store i8 %67, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %68 = lshr i32 %60, 31
  %69 = trunc i32 %68 to i8
  store i8 %69, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br i1 %66, label %inst_5ac4, label %inst_5a88

inst_5a73:                                        ; preds = %inst_5a60
  %70 = icmp eq i8 %23, 0
  %71 = select i1 %70, i64 ptrtoint (i8* @data_5a73 to i64), i64 ptrtoint (i8* @data_5ac7 to i64)
  %72 = add i64 %71, 5
  %73 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75
  store i64 %74, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %76 = call %struct.Memory* @ext_208398___freading(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %13)
  %77 = load i32, i32* @RAX_2216_56234d8dff90
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #13, !range !1234
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  store i8 %82, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %83 = icmp eq i32 %77, 0
  %84 = zext i1 %83 to i8
  store i8 %84, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %85 = lshr i32 %77, 31
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %87 = icmp eq i8 %84, 0
  %88 = select i1 %87, i64 ptrtoint (i8* @data_5aa8 to i64), i64 ptrtoint (i8* @data_5a7c to i64)
  br i1 %87, label %inst_5aa8, label %inst_5a7c

inst_5aa8:                                        ; preds = %inst_5a73
  %89 = add i64 %88, 3
  %90 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %90, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %91 = add i64 %89, 5
  %92 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %93 = add i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64 %91, i64* %94
  store i64 %93, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %95 = call %struct.Memory* @ext_208368_fileno(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %76)
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 1, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %96 = load i32, i32* @RAX_2216_56234d8dff90
  %97 = zext i32 %96 to i64
  %98 = and i64 %97, 4294967295
  store i64 %98, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %99 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %100 = add i64 %99, -8
  %101 = inttoptr i64 %100 to i64*
  store i64 ptrtoint (i8* @data_5abe to i64), i64* %101
  store i64 %100, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %102 = call %struct.Memory* @ext_208300_lseek(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %95)
  %103 = load i64, i64* @RAX_2216_56234d8dffa8
  %104 = sub i64 %103, -1
  %105 = icmp ult i64 %103, -1
  %106 = zext i1 %105 to i8
  store i8 %106, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #13, !range !1234
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %113 = xor i64 -1, %103
  %114 = xor i64 %113, %104
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  store i8 %117, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %118 = icmp eq i64 %104, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %120 = lshr i64 %104, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %122 = lshr i64 %103, 63
  %123 = xor i64 1, %122
  %124 = xor i64 %120, %122
  %125 = add nuw nsw i64 %124, %123
  %126 = icmp eq i64 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %128 = icmp eq i8 %119, 0
  %129 = select i1 %128, i64 ptrtoint (i8* @data_5a7c to i64), i64 ptrtoint (i8* @data_5ac4 to i64)
  br i1 %128, label %inst_5a7c, label %inst_5ac4

inst_5a88:                                        ; preds = %inst_5a7c
  %130 = icmp eq i8 %67, 0
  %131 = select i1 %130, i64 ptrtoint (i8* @data_5a88 to i64), i64 ptrtoint (i8* @data_5ac4 to i64)
  %132 = add i64 %131, 5
  %133 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %134 = add i64 %133, -8
  %135 = inttoptr i64 %134 to i64*
  store i64 %132, i64* %135
  store i64 %134, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %136 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %59)
  %137 = load i32*, i32** @RAX_2216_56234d8ed000
  %138 = load i64, i64* @RAX_2216_56234d8dffa8
  %139 = load i32, i32* %137
  %140 = zext i32 %139 to i64
  store i64 %140, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %141 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %141, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 %138, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %142 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %143 = add i64 %142, -8
  %144 = inttoptr i64 %143 to i64*
  store i64 ptrtoint (i8* @data_5a9b to i64), i64* %144
  store i64 %143, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %145 = call %struct.Memory* @ext_2082b0_fclose(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %136)
  %146 = load i32, i32* @R12_2408_56234d8dff90
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %147 = and i32 %146, 255
  %148 = call i32 @llvm.ctpop.i32(i32 %147) #13, !range !1234
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  %151 = xor i8 %150, 1
  store i8 %151, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %152 = icmp eq i32 %146, 0
  %153 = zext i1 %152 to i8
  store i8 %153, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %154 = lshr i32 %146, 31
  %155 = trunc i32 %154 to i8
  store i8 %155, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %156 = icmp eq i8 %153, 0
  br i1 %156, label %inst_5ad0, label %inst_5aa0

inst_5ad0:                                        ; preds = %inst_5a88
  %157 = load i32*, i32** @RBP_2328_56234d8ed000
  store i32 %146, i32* %157
  store i64 4294967295, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5aa0
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5c00(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5c00:
  store i8** @data_208008, i8*** @RAX_2216_56234d8ee2d0
  %0 = load i64, i64* bitcast (i8** @data_208008 to i64*)
  store i64 %0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1 = call %struct.Memory* @ext_1a40___cxa_atexit(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  ret %struct.Memory* %1
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5530(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5530:
  %0 = load i64, i64* @R12_2408_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @RBP_2328_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 %7, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %8 = load i64, i64* @RBX_2232_56234d8dffa8
  %9 = add i64 %5, -8
  %10 = getelementptr i64, i64* %6, i32 -1
  store i64 %8, i64* %10
  %11 = add i64 %9, -8
  %12 = getelementptr i64, i64* %10, i32 -1
  store i64 ptrtoint (i8* @data_553c to i64), i64* %12
  store i64 %11, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %13 = call %struct.Memory* @ext_208298___fpending(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %14 = load i32*, i32** @RBP_2328_56234d8ed000
  %15 = load i64, i64* @RBP_2328_56234d8dffa8
  %16 = load i32, i32* %14
  %17 = zext i32 %16 to i64
  store i64 %17, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 %15, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %18 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %18, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %19 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 ptrtoint (i8* @data_554a to i64), i64* %21
  store i64 %20, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %22 = call %struct.Memory* @sub_5a60(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %13)
  %23 = load i32, i32* @RBX_2232_56234d8dff90
  %24 = zext i32 %23 to i64
  %25 = and i64 32, %24
  store i64 %25, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %26 = trunc i64 %25 to i32
  %27 = icmp eq i32 %26, 0
  %28 = zext i1 %27 to i8
  %29 = icmp eq i8 %28, 0
  %30 = select i1 %29, i64 ptrtoint (i8* @data_5568 to i64), i64 ptrtoint (i8* @data_5551 to i64)
  %31 = add i64 %30, 2
  %32 = load i32, i32* @RAX_2216_56234d8dff90
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %33 = and i32 %32, 255
  %34 = call i32 @llvm.ctpop.i32(i32 %33) #13, !range !1234
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %38 = icmp eq i32 %32, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %40 = lshr i32 %32, 31
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %42 = add i64 %31, 2
  br i1 %29, label %inst_5568, label %inst_5551

inst_555f:                                        ; preds = %inst_5555, %inst_5551
  %43 = load i64*, i64** @RSP_2312_56234d8e7800
  %44 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %45 = add i64 %44, 8
  %46 = getelementptr i64, i64* %43, i32 1
  %47 = load i64, i64* %43
  store i64 %47, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %48 = add i64 %45, 8
  %49 = load i64, i64* %46
  store i64 %49, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %50 = add i64 %48, 8
  %51 = getelementptr i64, i64* %46, i32 1
  %52 = load i64, i64* %51
  store i64 %52, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %53 = add i64 %50, 8
  store i64 %53, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %22

inst_5568:                                        ; preds = %inst_5530
  %54 = icmp eq i8 %39, 0
  br i1 %54, label %inst_5588, label %inst_556c

inst_5551:                                        ; preds = %inst_5530
  br i1 %38, label %inst_555f, label %inst_5555

inst_5555:                                        ; preds = %inst_5551
  %55 = load i64, i64* @R12_2408_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %56 = trunc i64 %55 to i32
  %57 = and i32 %56, 255
  %58 = call i32 @llvm.ctpop.i32(i32 %57) #13, !range !1234
  %59 = trunc i32 %58 to i8
  %60 = and i8 %59, 1
  %61 = xor i8 %60, 1
  store i8 %61, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %62 = icmp eq i64 %55, 0
  %63 = zext i1 %62 to i8
  store i8 %63, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %64 = lshr i64 %55, 63
  %65 = trunc i64 %64 to i8
  store i8 %65, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 4294967295, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br i1 %62, label %inst_5598, label %inst_555f

inst_5598:                                        ; preds = %inst_5555
  %66 = add i64 %42, 10
  %67 = icmp eq i8 %39, 0
  %68 = select i1 %67, i64 %42, i64 %66
  %69 = add i64 %68, 3
  %70 = add i64 %69, 5
  %71 = add i64 %70, 2
  %72 = add i64 %71, 57
  %73 = icmp eq i8 %63, 0
  %74 = select i1 %73, i64 %71, i64 %72
  %75 = add i64 %74, 5
  %76 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %75, i64* %78
  store i64 %77, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %79 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %22)
  %80 = load i32*, i32** @RAX_2216_56234d8ed000
  %81 = load i32, i32* %80
  %82 = sub i32 %81, 9
  %83 = icmp eq i32 %82, 0
  %84 = zext i1 %83 to i8
  %85 = load i64*, i64** @RSP_2312_56234d8e7800
  %86 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %87 = add i64 %86, 8
  %88 = getelementptr i64, i64* %85, i32 1
  %89 = load i64, i64* %85
  store i64 %89, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %90 = add i64 %87, 8
  %91 = load i64, i64* %88
  store i64 %91, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %92 = add i64 %90, 8
  %93 = getelementptr i64, i64* %88, i32 1
  %94 = load i64, i64* %93
  store i64 %94, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %95 = icmp eq i8 %84, 0
  %96 = zext i1 %95 to i8
  %97 = zext i8 %96 to i64
  %98 = and i64 %97, 255
  %99 = trunc i64 %98 to i32
  %100 = sub i32 0, %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %102 = icmp ne i32 %99, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %104 = and i32 %100, 255
  %105 = call i32 @llvm.ctpop.i32(i32 %104) #13, !range !1234
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  store i8 %108, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %109 = xor i32 %99, %100
  %110 = lshr i32 %109, 4
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  store i8 %112, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %113 = icmp eq i32 %99, 0
  %114 = zext i1 %113 to i8
  store i8 %114, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %115 = lshr i32 %100, 31
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %117 = add i64 %92, 8
  store i64 %117, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %79

inst_5588:                                        ; preds = %inst_5568
  %118 = load i64*, i64** @RSP_2312_56234d8e7800
  %119 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %120 = add i64 %119, 8
  %121 = getelementptr i64, i64* %118, i32 1
  %122 = load i64, i64* %118
  store i64 %122, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 4294967295, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %123 = add i64 %120, 8
  %124 = load i64, i64* %121
  store i64 %124, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %125 = add i64 %123, 8
  %126 = getelementptr i64, i64* %121, i32 1
  %127 = load i64, i64* %126
  store i64 %127, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %128 = add i64 %125, 8
  store i64 %128, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %22

inst_556c:                                        ; preds = %inst_5568
  %129 = add i64 %42, 5
  %130 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %131 = add i64 %130, -8
  %132 = inttoptr i64 %131 to i64*
  store i64 %129, i64* %132
  store i64 %131, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %133 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %22)
  %134 = load i32*, i32** @RAX_2216_56234d8ed000
  store i32 0, i32* %134
  store i64 4294967295, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %135 = load i64*, i64** @RSP_2312_56234d8e7800
  %136 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %137 = add i64 %136, 8
  %138 = getelementptr i64, i64* %135, i32 1
  %139 = load i64, i64* %135
  store i64 %139, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %140 = add i64 %137, 8
  %141 = load i64, i64* %138
  store i64 %141, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %142 = add i64 %140, 8
  %143 = getelementptr i64, i64* %138, i32 1
  %144 = load i64, i64* %143
  store i64 %144, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %145 = add i64 %142, 8
  store i64 %145, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %133
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_4b40(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_4b40:
  %0 = load i64, i64* @R13_2424_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @R12_2408_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i32, i32* @RDI_2296_56234d8dff90
  %8 = zext i32 %7 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %10 = load i64, i64* @RBP_2328_56234d8dffa8
  %11 = add i64 %5, -8
  %12 = getelementptr i64, i64* %6, i32 -1
  store i64 %10, i64* %12
  %13 = load i64, i64* @RBX_2232_56234d8dffa8
  %14 = add i64 %11, -8
  %15 = getelementptr i64, i64* %12, i32 -1
  store i64 %13, i64* %15
  %16 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %16, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %17 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %17, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %18 = sub i64 %14, 8
  store i64 %18, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %19 = icmp ult i64 %14, 8
  %20 = zext i1 %19 to i8
  store i8 %20, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %21 = trunc i64 %18 to i32
  %22 = and i32 %21, 255
  %23 = call i32 @llvm.ctpop.i32(i32 %22) #13, !range !1234
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  store i8 %26, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %27 = xor i64 8, %14
  %28 = xor i64 %27, %18
  %29 = lshr i64 %28, 4
  %30 = trunc i64 %29 to i8
  %31 = and i8 %30, 1
  store i8 %31, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %32 = icmp eq i64 %18, 0
  %33 = zext i1 %32 to i8
  store i8 %33, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %34 = lshr i64 %18, 63
  %35 = trunc i64 %34 to i8
  store i8 %35, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %36 = lshr i64 %14, 63
  %37 = xor i64 %34, %36
  %38 = add nuw nsw i64 %37, %36
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  store i8 %40, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  br label %inst_4b58

inst_4b90:                                        ; preds = %inst_4b83, %inst_4b7a, %inst_4b58
  %41 = phi %struct.Memory* [ %97, %inst_4b58 ], [ %113, %inst_4b7a ], [ %113, %inst_4b83 ]
  %42 = load i64*, i64** @RSP_2312_56234d8e7800
  %43 = load i64, i64* @RSP_2312_56234d8dffa8
  %44 = add i64 8, %43
  %45 = getelementptr i64, i64* %42, i32 1
  %46 = icmp ult i64 %44, %43
  %47 = icmp ult i64 %44, 8
  %48 = or i1 %46, %47
  %49 = zext i1 %48 to i8
  store i8 %49, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #13, !range !1234
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  store i8 %55, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %56 = xor i64 8, %43
  %57 = xor i64 %56, %44
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  store i8 %60, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %63 = lshr i64 %44, 63
  %64 = trunc i64 %63 to i8
  store i8 %64, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %65 = lshr i64 %43, 63
  %66 = xor i64 %63, %65
  %67 = add nuw nsw i64 %66, %63
  %68 = icmp eq i64 %67, 2
  %69 = zext i1 %68 to i8
  store i8 %69, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %70 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %70, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %71 = add i64 %44, 8
  %72 = getelementptr i64, i64* %45, i32 1
  %73 = load i64, i64* %45
  store i64 %73, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %74 = add i64 %71, 8
  %75 = getelementptr i64, i64* %72, i32 1
  %76 = load i64, i64* %72
  store i64 %76, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %77 = add i64 %74, 8
  %78 = load i64, i64* %75
  store i64 %78, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %79 = add i64 %77, 8
  %80 = getelementptr i64, i64* %75, i32 1
  %81 = load i64, i64* %80
  store i64 %81, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %82 = add i64 %79, 8
  store i64 %82, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %41

inst_4b58:                                        ; preds = %inst_4b88, %inst_4b6e, %inst_4b40
  %83 = phi i64 [ ptrtoint (i8* @data_4b58 to i64), %inst_4b40 ], [ %141, %inst_4b6e ], [ undef, %inst_4b88 ]
  %84 = phi %struct.Memory* [ %memory, %inst_4b40 ], [ %113, %inst_4b6e ], [ %113, %inst_4b88 ]
  %85 = add i64 %83, 3
  %86 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %86, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %87 = add i64 %85, 3
  %88 = load i64, i64* @R12_2408_56234d8dffa8
  store i64 %88, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %89 = add i64 %87, 3
  %90 = load i32, i32* @R13_2424_56234d8dff90
  %91 = zext i32 %90 to i64
  %92 = and i64 %91, 4294967295
  store i64 %92, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %93 = add i64 %89, 5
  %94 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %95 = add i64 %94, -8
  %96 = inttoptr i64 %95 to i64*
  store i64 %93, i64* %96
  store i64 %95, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %97 = call %struct.Memory* @ext_208330_read(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %84)
  %98 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %99 = trunc i64 %98 to i32
  %100 = and i32 %99, 255
  %101 = call i32 @llvm.ctpop.i32(i32 %100) #13, !range !1234
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  store i8 %104, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %105 = icmp eq i64 %98, 0
  %106 = zext i1 %105 to i8
  store i8 %106, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %107 = lshr i64 %98, 63
  %108 = trunc i64 %107 to i8
  store i8 %108, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 %98, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %inst_4b90, label %inst_4b6e

inst_4b6e:                                        ; preds = %inst_4b58
  %110 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 add (i64 ptrtoint (i8* @data_4b6e to i64), i64 5), i64* %112
  store i64 %111, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %113 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %97)
  %114 = load i32*, i32** @RAX_2216_56234d8ed000
  %115 = load i32, i32* %114
  %116 = zext i32 %115 to i64
  store i64 %116, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %117 = sub i32 %115, 4
  %118 = icmp ult i32 %115, 4
  %119 = zext i1 %118 to i8
  store i8 %119, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %120 = and i32 %117, 255
  %121 = call i32 @llvm.ctpop.i32(i32 %120) #13, !range !1234
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  %124 = xor i8 %123, 1
  store i8 %124, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %125 = xor i64 4, %116
  %126 = trunc i64 %125 to i32
  %127 = xor i32 %117, %126
  %128 = lshr i32 %127, 4
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  store i8 %130, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %131 = icmp eq i32 %117, 0
  %132 = zext i1 %131 to i8
  store i8 %132, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %133 = lshr i32 %117, 31
  %134 = trunc i32 %133 to i8
  store i8 %134, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %135 = lshr i32 %115, 31
  %136 = xor i32 %133, %135
  %137 = add nuw nsw i32 %136, %135
  %138 = icmp eq i32 %137, 2
  %139 = zext i1 %138 to i8
  store i8 %139, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %140 = icmp eq i8 %132, 0
  %141 = select i1 %140, i64 ptrtoint (i8* @data_4b7a to i64), i64 ptrtoint (i8* @data_4b58 to i64)
  br i1 %131, label %inst_4b58, label %inst_4b7a

inst_4b7a:                                        ; preds = %inst_4b6e
  %142 = load i64, i64* @RBX_2232_56234d8dffa8
  %143 = sub i64 %142, 2147475456
  %144 = icmp ult i64 %142, 2147475456
  %145 = zext i1 %144 to i8
  %146 = icmp eq i64 %143, 0
  %147 = zext i1 %146 to i8
  %148 = or i8 %147, %145
  %149 = icmp ne i8 %148, 0
  br i1 %149, label %inst_4b90, label %inst_4b83

inst_4b83:                                        ; preds = %inst_4b7a
  %150 = sub i32 %115, 22
  %151 = icmp ult i32 %115, 22
  %152 = zext i1 %151 to i8
  store i8 %152, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %153 = and i32 %150, 255
  %154 = call i32 @llvm.ctpop.i32(i32 %153) #13, !range !1234
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  store i8 %157, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %158 = xor i64 22, %116
  %159 = trunc i64 %158 to i32
  %160 = xor i32 %150, %159
  %161 = lshr i32 %160, 4
  %162 = trunc i32 %161 to i8
  %163 = and i8 %162, 1
  store i8 %163, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %164 = icmp eq i32 %150, 0
  %165 = zext i1 %164 to i8
  store i8 %165, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %166 = lshr i32 %150, 31
  %167 = trunc i32 %166 to i8
  store i8 %167, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %168 = xor i32 %166, %135
  %169 = add nuw nsw i32 %168, %135
  %170 = icmp eq i32 %169, 2
  %171 = zext i1 %170 to i8
  store i8 %171, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %172 = icmp eq i8 %165, 0
  br i1 %172, label %inst_4b90, label %inst_4b88

inst_4b88:                                        ; preds = %inst_4b83
  store i64 2147475456, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_4b58
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5b80_init(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5b80:
  %0 = load i64, i64* @R15_2456_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @R14_2440_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i32, i32* @RDI_2296_56234d8dff90
  %8 = zext i32 %7 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %10 = load i64, i64* @R13_2424_56234d8dffa8
  %11 = add i64 %5, -8
  %12 = getelementptr i64, i64* %6, i32 -1
  store i64 %10, i64* %12
  %13 = load i64, i64* @R12_2408_56234d8dffa8
  %14 = add i64 %11, -8
  %15 = getelementptr i64, i64* %12, i32 -1
  store i64 %13, i64* %15
  store i8** @data_207a70, i8*** @R12_2408_56234d8ee2d0
  %16 = load i64, i64* @RBP_2328_56234d8dffa8
  %17 = add i64 %14, -8
  %18 = getelementptr i64, i64* %15, i32 -1
  store i64 %16, i64* %18
  %19 = load i64, i64* @RBX_2232_56234d8dffa8
  %20 = add i64 %17, -8
  %21 = getelementptr i64, i64* %18, i32 -1
  store i64 %19, i64* %21
  %22 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %22, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %23 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %23, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %24 = sub i64 %20, 8
  store i64 1, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1240
  store i8 0, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1240
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1240
  store i8 0, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1240
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1240
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1240
  %25 = add i64 %24, -8
  %26 = inttoptr i64 %25 to i64*
  store i64 ptrtoint (i8* @data_5bb1 to i64), i64* %26
  store i64 %25, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %27 = call %struct.Memory* @sub_1720__init_proc(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %28 = load i64, i64* @RBP_2328_56234d8dffa8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %inst_5bd6, label %inst_5bb6

inst_5bc0:                                        ; preds = %inst_5bb6, %inst_5bc0
  %30 = phi i64 [ add (i64 ptrtoint (i8* @data_5bb6 to i64), i64 10), %inst_5bb6 ], [ %80, %inst_5bc0 ]
  %31 = phi %struct.Memory* [ %27, %inst_5bb6 ], [ %50, %inst_5bc0 ]
  %32 = add i64 %30, 3
  %33 = load i64, i64* @R13_2424_56234d8dffa8
  store i64 %33, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %34 = add i64 %32, 3
  %35 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %35, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %36 = add i64 %34, 3
  %37 = load i32, i32* @R15_2456_56234d8dff90
  %38 = zext i32 %37 to i64
  %39 = and i64 %38, 4294967295
  store i64 %39, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %40 = add i64 %36, 4
  %41 = load i64, i64* @R12_2408_56234d8dffa8
  %42 = load i64, i64* @RBX_2232_56234d8dffa8
  %43 = mul i64 %42, 8
  %44 = add i64 %43, %41
  %45 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47
  %49 = inttoptr i64 %46 to i64*
  store i64 %40, i64* %49
  store i64 %46, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  store i64 %48, i64* @RIP_2472_56234d8dffa8, align 8, !tbaa !1216
  %50 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 %48, %struct.Memory* %31)
  %51 = load i64, i64* @RBX_2232_56234d8dffa8
  %52 = add i64 1, %51
  store i64 %52, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %53 = lshr i64 %52, 63
  %54 = load i64, i64* @RBP_2328_56234d8dffa8
  %55 = sub i64 %54, %52
  %56 = icmp ult i64 %54, %52
  %57 = zext i1 %56 to i8
  store i8 %57, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %58 = trunc i64 %55 to i32
  %59 = and i32 %58, 255
  %60 = call i32 @llvm.ctpop.i32(i32 %59) #13, !range !1234
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  store i8 %63, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %64 = xor i64 %52, %54
  %65 = xor i64 %64, %55
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  store i8 %68, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %69 = icmp eq i64 %55, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %71 = lshr i64 %55, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %73 = lshr i64 %54, 63
  %74 = xor i64 %53, %73
  %75 = xor i64 %71, %73
  %76 = add nuw nsw i64 %75, %74
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %79 = icmp eq i8 %70, 0
  %80 = select i1 %79, i64 ptrtoint (i8* @data_5bc0 to i64), i64 ptrtoint (i8* @data_5bd6 to i64)
  br i1 %79, label %inst_5bc0, label %inst_5bd6

inst_5bd6:                                        ; preds = %inst_5bc0, %inst_5b80
  %81 = phi %struct.Memory* [ %27, %inst_5b80 ], [ %50, %inst_5bc0 ]
  %82 = load i64*, i64** @RSP_2312_56234d8e7800
  %83 = load i64, i64* @RSP_2312_56234d8dffa8
  %84 = add i64 8, %83
  %85 = getelementptr i64, i64* %82, i32 1
  %86 = icmp ult i64 %84, %83
  %87 = icmp ult i64 %84, 8
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  store i8 %89, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %90 = trunc i64 %84 to i32
  %91 = and i32 %90, 255
  %92 = call i32 @llvm.ctpop.i32(i32 %91) #13, !range !1234
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %96 = xor i64 8, %83
  %97 = xor i64 %96, %84
  %98 = lshr i64 %97, 4
  %99 = trunc i64 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %101 = icmp eq i64 %84, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %103 = lshr i64 %84, 63
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %105 = lshr i64 %83, 63
  %106 = xor i64 %103, %105
  %107 = add nuw nsw i64 %106, %103
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %110 = add i64 %84, 8
  %111 = getelementptr i64, i64* %85, i32 1
  %112 = load i64, i64* %85
  store i64 %112, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %113 = add i64 %110, 8
  %114 = getelementptr i64, i64* %111, i32 1
  %115 = load i64, i64* %111
  store i64 %115, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %116 = add i64 %113, 8
  %117 = getelementptr i64, i64* %114, i32 1
  %118 = load i64, i64* %114
  store i64 %118, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %119 = add i64 %116, 8
  %120 = getelementptr i64, i64* %117, i32 1
  %121 = load i64, i64* %117
  store i64 %121, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %122 = add i64 %119, 8
  %123 = load i64, i64* %120
  store i64 %123, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %124 = add i64 %122, 8
  %125 = getelementptr i64, i64* %120, i32 1
  %126 = load i64, i64* %125
  store i64 %126, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %127 = add i64 %124, 8
  store i64 %127, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %81

inst_5bb6:                                        ; preds = %inst_5b80
  store i64 0, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br label %inst_5bc0
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_49e0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
  br label %inst_49e0

inst_49e0:                                        ; preds = %inst_4a6c, %0
  %1 = phi %struct.Memory* [ %memory, %0 ], [ %81, %inst_4a6c ]
  %2 = load i64, i64* @RSP_2312_56234d8dffa8
  %3 = sub i64 %2, 72
  %4 = inttoptr i64 %3 to float*
  %5 = inttoptr i64 %3 to i64*
  store i64 %3, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %6 = load i64, i64* @RCX_2248_56234d8dffa8
  store i64 %6, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %7 = load i64, i64* bitcast (i8* @data_208250 to i64*)
  store i64 %7, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %8 = load i64, i64* bitcast (i8* @data_208220 to i64*)
  %9 = load i64, i64* bitcast (i8* @data_208228 to i64*)
  %10 = zext i64 %9 to i128
  %11 = shl nuw i128 %10, 64
  %12 = zext i64 %8 to i128
  %13 = or i128 %11, %12
  store i128 %13, i128* @XMM0_16_56234d8dffc0, align 1, !tbaa !1241
  %14 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %15 = add i64 %14, 40
  %16 = inttoptr i64 %15 to i64*
  %17 = load i64, i64* %16
  %18 = getelementptr i64, i64* %5, i32 7
  store i64 %17, i64* %18
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %19 = load <2 x float>, <2 x float>* @XMM0_16_56234d8ed4d0, align 1
  %20 = load <2 x float>, <2 x float>* @XMM0_24_56234d8ed4d0, align 1
  %21 = extractelement <2 x float> %19, i32 0
  store float %21, float* %4
  %22 = extractelement <2 x float> %19, i32 1
  %23 = getelementptr float, float* %4, i32 1
  store float %22, float* %23
  %24 = extractelement <2 x float> %20, i32 0
  %25 = getelementptr float, float* %4, i32 2
  store float %24, float* %25
  %26 = extractelement <2 x float> %20, i32 1
  %27 = getelementptr float, float* %4, i32 3
  store float %26, float* %27
  %28 = load i64, i64* @RSI_2280_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %29 = trunc i64 %28 to i32
  %30 = and i32 %29, 255
  %31 = call i32 @llvm.ctpop.i32(i32 %30) #13, !range !1234
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %35 = icmp eq i64 %28, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %37 = lshr i64 %28, 63
  %38 = trunc i64 %37 to i8
  store i8 %38, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %39 = getelementptr i64, i64* %5, i32 6
  store i64 %7, i64* %39
  %40 = inttoptr i64 %3 to i32*
  store i32 10, i32* %40
  %41 = load i64, i64* bitcast (i8* @data_208230 to i64*)
  %42 = load i64, i64* bitcast (i8* @data_208238 to i64*)
  %43 = zext i64 %42 to i128
  %44 = shl nuw i128 %43, 64
  %45 = zext i64 %41 to i128
  %46 = or i128 %44, %45
  store i128 %46, i128* @XMM0_16_56234d8dffc0, align 1, !tbaa !1241
  %47 = getelementptr float, float* %4, i32 4
  %48 = load <2 x float>, <2 x float>* @XMM0_16_56234d8ed4d0, align 1
  %49 = load <2 x float>, <2 x float>* @XMM0_24_56234d8ed4d0, align 1
  %50 = extractelement <2 x float> %48, i32 0
  store float %50, float* %47
  %51 = extractelement <2 x float> %48, i32 1
  %52 = getelementptr float, float* %47, i32 1
  store float %51, float* %52
  %53 = extractelement <2 x float> %49, i32 0
  %54 = getelementptr float, float* %47, i32 2
  store float %53, float* %54
  %55 = extractelement <2 x float> %49, i32 1
  %56 = getelementptr float, float* %47, i32 3
  store float %55, float* %56
  %57 = load i64, i64* bitcast (i8* @data_208240 to i64*)
  %58 = load i64, i64* bitcast (i8* @data_208248 to i64*)
  %59 = zext i64 %58 to i128
  %60 = shl nuw i128 %59, 64
  %61 = zext i64 %57 to i128
  %62 = or i128 %60, %61
  store i128 %62, i128* @XMM0_16_56234d8dffc0, align 1, !tbaa !1241
  %63 = getelementptr float, float* %4, i32 8
  %64 = load <2 x float>, <2 x float>* @XMM0_16_56234d8ed4d0, align 1
  %65 = load <2 x float>, <2 x float>* @XMM0_24_56234d8ed4d0, align 1
  %66 = extractelement <2 x float> %64, i32 0
  store float %66, float* %63
  %67 = extractelement <2 x float> %64, i32 1
  %68 = getelementptr float, float* %63, i32 1
  store float %67, float* %68
  %69 = extractelement <2 x float> %65, i32 0
  %70 = getelementptr float, float* %63, i32 2
  store float %69, float* %70
  %71 = extractelement <2 x float> %65, i32 1
  %72 = getelementptr float, float* %63, i32 3
  store float %71, float* %72
  %73 = icmp eq i8 %36, 0
  %74 = select i1 %73, i64 add (i64 ptrtoint (void ()* @callback_sub_49e0 to i64), i64 85), i64 add (i64 ptrtoint (void ()* @callback_sub_49e0 to i64), i64 135)
  br i1 %35, label %inst_4a67, label %inst_4a35

inst_4a6c:                                        ; preds = %inst_4a3a, %inst_4a67
  %75 = phi i64 [ ptrtoint (i8* @data_4a6c to i64), %inst_4a67 ], [ %136, %inst_4a3a ]
  %76 = phi %struct.Memory* [ %87, %inst_4a67 ], [ %115, %inst_4a3a ]
  %77 = add i64 %75, 5
  %78 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80
  store i64 %79, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %81 = call %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %76)
  store i64 -1, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_49e0

inst_4a67:                                        ; preds = %inst_4a35, %inst_49e0
  %82 = phi i64 [ %74, %inst_49e0 ], [ %103, %inst_4a35 ]
  %83 = add i64 %82, 5
  %84 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %83, i64* %86
  store i64 %85, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %87 = call %struct.Memory* @ext_208278_abort(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1)
  br label %inst_4a6c

inst_4a35:                                        ; preds = %inst_49e0
  %88 = add i64 %74, 3
  %89 = load i64, i64* @RDX_2264_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %90 = trunc i64 %89 to i32
  %91 = and i32 %90, 255
  %92 = call i32 @llvm.ctpop.i32(i32 %91) #13, !range !1234
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %96 = icmp eq i64 %89, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %98 = lshr i64 %89, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %100 = add i64 %88, 2
  %101 = add i64 %100, 45
  %102 = icmp eq i8 %97, 0
  %103 = select i1 %102, i64 %100, i64 %101
  br i1 %96, label %inst_4a67, label %inst_4a3a

inst_4a3a:                                        ; preds = %inst_4a35
  %104 = add i64 %103, 5
  %105 = getelementptr i64, i64* %5, i32 5
  store i64 %28, i64* %105
  %106 = add i64 %104, 5
  store i64 %89, i64* %39
  %107 = add i64 %106, 3
  store i64 %3, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %108 = add i64 %107, 3
  %109 = load i64, i64* @R8_2344_56234d8dffa8
  store i64 %109, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %110 = add i64 %108, 3
  store i64 %6, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %111 = add i64 %110, 5
  %112 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %113 = add i64 %112, -8
  %114 = inttoptr i64 %113 to i64*
  store i64 %111, i64* %114
  store i64 %113, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %115 = call %struct.Memory* @sub_41e0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1)
  %116 = load i64*, i64** @RSP_2312_56234d8e7800
  %117 = load i64, i64* @RSP_2312_56234d8dffa8
  %118 = getelementptr i64, i64* %116, i32 7
  %119 = load i64, i64* %118
  %120 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %121 = add i64 %120, 40
  %122 = inttoptr i64 %121 to i64*
  %123 = load i64, i64* %122
  %124 = xor i64 %123, %119
  store i64 %124, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %125 = trunc i64 %124 to i32
  %126 = and i32 %125, 255
  %127 = call i32 @llvm.ctpop.i32(i32 %126) #13, !range !1234
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = xor i8 %129, 1
  store i8 %130, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %131 = icmp eq i64 %124, 0
  %132 = zext i1 %131 to i8
  store i8 %132, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %133 = lshr i64 %124, 63
  %134 = trunc i64 %133 to i8
  store i8 %134, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %135 = icmp eq i8 %132, 0
  %136 = select i1 %135, i64 ptrtoint (i8* @data_4a6c to i64), i64 ptrtoint (i8* @data_4a62 to i64)
  br i1 %135, label %inst_4a6c, label %inst_4a62

inst_4a62:                                        ; preds = %inst_4a3a
  %137 = add i64 72, %117
  %138 = icmp ult i64 %137, %117
  %139 = icmp ult i64 %137, 72
  %140 = or i1 %138, %139
  %141 = zext i1 %140 to i8
  store i8 %141, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %142 = trunc i64 %137 to i32
  %143 = and i32 %142, 255
  %144 = call i32 @llvm.ctpop.i32(i32 %143) #13, !range !1234
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  store i8 %147, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %148 = xor i64 72, %117
  %149 = xor i64 %148, %137
  %150 = lshr i64 %149, 4
  %151 = trunc i64 %150 to i8
  %152 = and i8 %151, 1
  store i8 %152, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %153 = icmp eq i64 %137, 0
  %154 = zext i1 %153 to i8
  store i8 %154, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %155 = lshr i64 %137, 63
  %156 = trunc i64 %155 to i8
  store i8 %156, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %157 = lshr i64 %117, 63
  %158 = xor i64 %155, %157
  %159 = add nuw nsw i64 %158, %155
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %162 = add i64 %137, 8
  store i64 %162, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %115
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_27d0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_27d0:
  %0 = load i8, i8* @data_2080e8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1 = zext i8 %0 to i32
  %2 = call i32 @llvm.ctpop.i32(i32 %1) #13, !range !1234
  %3 = trunc i32 %2 to i8
  %4 = and i8 %3, 1
  %5 = xor i8 %4, 1
  store i8 %5, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %6 = icmp eq i8 %0, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %8 = lshr i8 %0, 7
  store i8 %8, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %9 = icmp eq i8 %7, 0
  br i1 %9, label %inst_2808, label %inst_27d9

inst_27f3:                                        ; preds = %inst_27e7, %inst_27d9
  %10 = phi i64 [ %40, %inst_27d9 ], [ ptrtoint (i8* @data_27f3 to i64), %inst_27e7 ]
  %11 = phi %struct.Memory* [ %memory, %inst_27d9 ], [ %46, %inst_27e7 ]
  %12 = add i64 %10, 5
  %13 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15
  store i64 %14, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %16 = call %struct.Memory* @sub_2740(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %11)
  store i8 1, i8* @data_2080e8
  %17 = load i64*, i64** @RSP_2312_56234d8e7800
  %18 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %19 = add i64 %18, 8
  %20 = load i64, i64* %17
  store i64 %20, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %21 = add i64 %19, 8
  store i64 %21, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %16

inst_2808:                                        ; preds = %inst_27d0
  %22 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %23 = add i64 %22, 8
  store i64 %23, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %memory

inst_27d9:                                        ; preds = %inst_27d0
  %24 = load i64, i64* bitcast (i8** @data_207ff8 to i64*)
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %25 = trunc i64 %24 to i32
  %26 = and i32 %25, 255
  %27 = call i32 @llvm.ctpop.i32(i32 %26) #13, !range !1234
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %31 = icmp eq i64 %24, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %33 = lshr i64 %24, 63
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %35 = load i64, i64* @RBP_2328_56234d8dffa8
  %36 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %37 = add i64 %36, -8
  %38 = inttoptr i64 %37 to i64*
  store i64 %35, i64* %38
  store i64 %37, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  store i64 %37, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %39 = icmp eq i8 %32, 0
  %40 = select i1 %39, i64 add (i64 ptrtoint (i8* @data_27d9 to i64), i64 14), i64 add (i64 ptrtoint (i8* @data_27d9 to i64), i64 26)
  br i1 %31, label %inst_27f3, label %inst_27e7

inst_27e7:                                        ; preds = %inst_27d9
  %41 = add i64 %40, 7
  %42 = load i64, i64* bitcast (i8** @data_208008 to i64*)
  store i64 %42, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %43 = add i64 %41, 5
  %44 = add i64 %37, -8
  %45 = getelementptr i64, i64* %38, i32 -1
  store i64 %43, i64* %45
  store i64 %44, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %46 = call %struct.Memory* @ext_208418___cxa_finalize(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  br label %inst_27f3
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_4950(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_4950:
  %0 = load i64, i64* @RSP_2312_56234d8dffa8
  %1 = sub i64 %0, 72
  %2 = inttoptr i64 %1 to i64*
  store i64 %1, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %3 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %3, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %4 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %5 = add i64 %4, 40
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  %8 = getelementptr i64, i64* %2, i32 7
  store i64 %7, i64* %8
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %9 = load i32, i32* @RSI_2280_56234d8dff90
  %10 = zext i32 %9 to i64
  %11 = sub i32 %9, 10
  %12 = icmp ult i32 %9, 10
  %13 = zext i1 %12 to i8
  store i8 %13, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %14 = and i32 %11, 255
  %15 = call i32 @llvm.ctpop.i32(i32 %14) #13, !range !1234
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %19 = xor i64 10, %10
  %20 = trunc i64 %19 to i32
  %21 = xor i32 %11, %20
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  store i8 %24, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %25 = icmp eq i32 %11, 0
  %26 = zext i1 %25 to i8
  store i8 %26, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %27 = lshr i32 %11, 31
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %29 = lshr i32 %9, 31
  %30 = xor i32 %27, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  store i8 %33, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %34 = icmp eq i8 %26, 0
  %35 = select i1 %34, i64 ptrtoint (i8* @data_496c to i64), i64 ptrtoint (i8* @data_49d4 to i64)
  br i1 %25, label %inst_49d4, label %inst_496c

inst_49d9:                                        ; preds = %inst_496c, %inst_49d4
  %36 = phi i64 [ ptrtoint (i8* @data_49d9 to i64), %inst_49d4 ], [ %99, %inst_496c ]
  %37 = phi %struct.Memory* [ %47, %inst_49d4 ], [ %78, %inst_496c ]
  %38 = add i64 %36, 5
  %39 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %38, i64* %41
  store i64 %40, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %42 = call %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %37)
  ret %struct.Memory* %42

inst_49d4:                                        ; preds = %inst_4950
  %43 = add i64 %35, 5
  %44 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %43, i64* %46
  store i64 %45, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %47 = call %struct.Memory* @ext_208278_abort(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  br label %inst_49d9

inst_496c:                                        ; preds = %inst_4950
  %48 = inttoptr i64 %1 to i32*
  %49 = add i64 %35, 3
  store i32 %9, i32* %48
  %50 = add i64 %49, 3
  store i64 %1, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %51 = add i64 %50, 7
  store i64 -1, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %52 = add i64 %51, 3
  store i64 %3, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %53 = add i64 %52, 9
  %54 = bitcast i64* %2 to i8*
  %55 = getelementptr i8, i8* %54, i32 4
  %56 = bitcast i8* %55 to i64*
  store i64 0, i64* %56
  %57 = add i64 %53, 9
  %58 = getelementptr i8, i8* %54, i32 12
  %59 = bitcast i8* %58 to i64*
  store i64 67108864, i64* %59
  %60 = add i64 %57, 9
  %61 = getelementptr i8, i8* %54, i32 20
  %62 = bitcast i8* %61 to i64*
  store i64 0, i64* %62
  %63 = add i64 %60, 9
  %64 = getelementptr i8, i8* %54, i32 28
  %65 = bitcast i8* %64 to i64*
  store i64 0, i64* %65
  %66 = add i64 %63, 9
  %67 = getelementptr i8, i8* %54, i32 36
  %68 = bitcast i8* %67 to i64*
  store i64 0, i64* %68
  %69 = add i64 %66, 9
  %70 = getelementptr i8, i8* %54, i32 44
  %71 = bitcast i8* %70 to i64*
  store i64 0, i64* %71
  %72 = add i64 %69, 8
  %73 = getelementptr i32, i32* %48, i32 13
  store i32 0, i32* %73
  %74 = add i64 %72, 5
  %75 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77
  store i64 %76, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %78 = call %struct.Memory* @sub_41e0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %79 = load i64*, i64** @RSP_2312_56234d8e7800
  %80 = load i64, i64* @RSP_2312_56234d8dffa8
  %81 = getelementptr i64, i64* %79, i32 7
  %82 = load i64, i64* %81
  %83 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %84 = add i64 %83, 40
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  %87 = xor i64 %86, %82
  store i64 %87, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %88 = trunc i64 %87 to i32
  %89 = and i32 %88, 255
  %90 = call i32 @llvm.ctpop.i32(i32 %89) #13, !range !1234
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %94 = icmp eq i64 %87, 0
  %95 = zext i1 %94 to i8
  store i8 %95, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %96 = lshr i64 %87, 63
  %97 = trunc i64 %96 to i8
  store i8 %97, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %98 = icmp eq i8 %95, 0
  %99 = select i1 %98, i64 ptrtoint (i8* @data_49d9 to i64), i64 ptrtoint (i8* @data_49cf to i64)
  br i1 %98, label %inst_49d9, label %inst_49cf

inst_49cf:                                        ; preds = %inst_496c
  %100 = add i64 72, %80
  %101 = icmp ult i64 %100, %80
  %102 = icmp ult i64 %100, 72
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  store i8 %104, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %105 = trunc i64 %100 to i32
  %106 = and i32 %105, 255
  %107 = call i32 @llvm.ctpop.i32(i32 %106) #13, !range !1234
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %111 = xor i64 72, %80
  %112 = xor i64 %111, %100
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %116 = icmp eq i64 %100, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %118 = lshr i64 %100, 63
  %119 = trunc i64 %118 to i8
  store i8 %119, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %120 = lshr i64 %80, 63
  %121 = xor i64 %118, %120
  %122 = add nuw nsw i64 %121, %118
  %123 = icmp eq i64 %122, 2
  %124 = zext i1 %123 to i8
  store i8 %124, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %125 = add i64 %100, 8
  store i64 %125, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_2740(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_2740:
  store i64* @program_invocation_short_name, i64** @RDI_2296_56234d8e7800
  %0 = load i64, i64* @RBP_2328_56234d8dffa8
  %1 = load i64*, i64** @RSP_2312_56234d8e7800
  %2 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %3 = getelementptr i64, i64* %1, i32 -1
  store i64 %0, i64* %3
  store i64* @program_invocation_short_name, i64** @RAX_2216_56234d8e7800
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %4 = load i64, i64* %3
  store i64 %4, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %5 = add i64 %2, 8
  store i64 %5, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %memory
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_2e10(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_2e10:
  %0 = load i64, i64* @RDI_2296_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1 = trunc i64 %0 to i32
  %2 = and i32 %1, 255
  %3 = call i32 @llvm.ctpop.i32(i32 %2) #13, !range !1234
  %4 = trunc i32 %3 to i8
  %5 = and i8 %4, 1
  %6 = xor i8 %5, 1
  store i8 %6, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %7 = icmp eq i64 %0, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %9 = lshr i64 %0, 63
  %10 = trunc i64 %9 to i8
  store i8 %10, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %11 = load i64, i64* @RBX_2232_56234d8dffa8
  %12 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  %15 = getelementptr i64, i64* %14, i32 -1
  store i64 %11, i64* %14
  %16 = icmp eq i8 %8, 0
  %17 = select i1 %16, i64 ptrtoint (i8* @data_2e16 to i64), i64 ptrtoint (i8* @data_2e87 to i64)
  br i1 %7, label %inst_2e87, label %inst_2e16

inst_2e77:                                        ; preds = %inst_2e6c, %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit, %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit1, %inst_2e28, %inst_2e16
  %18 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %18, i64* bitcast (i8* @data_208110 to i64*)
  store i64 %18, i64* @program_invocation_name
  %19 = load i64*, i64** @RSP_2312_56234d8e7800
  %20 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %21 = add i64 %20, 8
  %22 = load i64, i64* %19
  store i64 %22, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %23 = add i64 %21, 8
  store i64 %23, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %40

inst_2e87:                                        ; preds = %inst_2e10
  %24 = add i64 %17, 7
  %25 = load i64, i64* @stderr
  store i64 %25, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %26 = add i64 %24, 7
  store i8* @data_6288, i8** @RDI_2296_56234d8e76a0
  %27 = add i64 %26, 5
  store i64 55, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %28 = add i64 %27, 5
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %29 = add i64 %28, 5
  %30 = add i64 %13, -8
  store i64 %29, i64* %15
  store i64 %30, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %31 = call %struct.Memory* @ext_2083f8_fwrite(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %32 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 ptrtoint (i8* @data_2ea9 to i64), i64* %34
  store i64 %33, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %35 = call %struct.Memory* @ext_208278_abort(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %31)
  ret %struct.Memory* %35

inst_2e16:                                        ; preds = %inst_2e10
  %36 = add i64 %17, 5
  store i64 47, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %37 = add i64 %36, 3
  store i64 %0, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %38 = add i64 %37, 5
  %39 = add i64 %13, -8
  store i64 %38, i64* %15
  store i64 %39, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %40 = call %struct.Memory* @ext_2082f8_strrchr(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %41 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %42 = trunc i64 %41 to i32
  %43 = and i32 %42, 255
  %44 = call i32 @llvm.ctpop.i32(i32 %43) #13, !range !1234
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %48 = icmp eq i64 %41, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %50 = lshr i64 %41, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br i1 %48, label %inst_2e77, label %inst_2e28

inst_2e28:                                        ; preds = %inst_2e16
  %52 = add i64 %41, 1
  store i64 %52, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %53 = load i64, i64* @RBX_2232_56234d8dffa8
  %54 = sub i64 %52, %53
  store i64 %54, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %55 = lshr i64 %54, 63
  %56 = sub i64 %54, 6
  %57 = icmp ult i64 %54, 6
  %58 = zext i1 %57 to i8
  store i8 %58, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #13, !range !1234
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %65 = xor i64 6, %54
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %74 = xor i64 %72, %55
  %75 = add nuw nsw i64 %74, %55
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  store i8 %77, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %78 = icmp ne i8 %73, 0
  %79 = xor i1 %78, %76
  %80 = or i1 %70, %79
  br i1 %80, label %inst_2e77, label %inst_2e38

inst_2e38:                                        ; preds = %inst_2e28
  %81 = sub i64 %41, 6
  store i64 %81, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_62c0, i8** @RDI_2296_56234d8e76a0
  store i64 7, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %82 = load i8, i8* @DF_2075_56234d8dff60, align 1, !tbaa !1243
  %83 = icmp eq i8 %82, 0
  %84 = select i1 %83, i64 1, i64 -1
  %85 = load i8*, i8** @RSI_2280_56234d8e76a0
  %86 = load i64, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1240
  br label %87

87:                                               ; preds = %87, %inst_2e38
  %88 = phi i8* [ %102, %87 ], [ @data_62c0, %inst_2e38 ]
  %89 = phi i64 [ %98, %87 ], [ %86, %inst_2e38 ]
  %90 = phi i8* [ %103, %87 ], [ %85, %inst_2e38 ]
  %91 = phi i64 [ %97, %87 ], [ %81, %inst_2e38 ]
  %92 = phi i64 [ %99, %87 ], [ 7, %inst_2e38 ]
  %93 = load i8, i8* %90
  %94 = load i8, i8* %88
  %95 = sub i8 %93, %94
  %96 = icmp eq i8 %95, 0
  %97 = add i64 %84, %91
  %98 = add i64 %84, %89
  %99 = add i64 %92, -1
  %100 = icmp ne i64 %99, 0
  %101 = and i1 %100, %96
  %102 = inttoptr i64 %98 to i8*
  %103 = inttoptr i64 %97 to i8*
  br i1 %101, label %87, label %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit1

_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit1: ; preds = %87
  %104 = lshr i8 %95, 7
  %105 = lshr i8 %93, 7
  %106 = icmp ult i8 %93, %94
  %107 = zext i1 %106 to i8
  %108 = zext i8 %95 to i32
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #13, !range !1234
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  %113 = xor i8 %94, %93
  %114 = xor i8 %113, %95
  %115 = lshr i8 %114, 4
  %116 = and i8 %115, 1
  %117 = zext i1 %96 to i8
  %118 = xor i8 %104, %105
  %119 = lshr i8 %94, 7
  %120 = xor i8 %119, %105
  %121 = add nuw nsw i8 %118, %120
  %122 = icmp eq i8 %121, 2
  %123 = zext i1 %122 to i8
  store i64 %97, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1240
  store i64 %98, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1240
  store i8 %107, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 %112, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 %116, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i8 %117, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 %104, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 %123, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i64 %99, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %124 = icmp eq i8 %117, 0
  br i1 %124, label %inst_2e77, label %inst_2e4c

inst_2e4c:                                        ; preds = %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit1
  store i8* @data_62c8, i8** @RDI_2296_56234d8e76a0
  store i64 3, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 %52, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 %52, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %125 = load i8*, i8** @RSI_2280_56234d8e76a0
  %126 = load i64, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1240
  br label %127

127:                                              ; preds = %127, %inst_2e4c
  %128 = phi i8* [ %142, %127 ], [ @data_62c8, %inst_2e4c ]
  %129 = phi i64 [ %138, %127 ], [ %126, %inst_2e4c ]
  %130 = phi i8* [ %143, %127 ], [ %125, %inst_2e4c ]
  %131 = phi i64 [ %137, %127 ], [ %52, %inst_2e4c ]
  %132 = phi i64 [ %139, %127 ], [ 3, %inst_2e4c ]
  %133 = load i8, i8* %130
  %134 = load i8, i8* %128
  %135 = sub i8 %133, %134
  %136 = icmp eq i8 %135, 0
  %137 = add i64 %84, %131
  %138 = add i64 %84, %129
  %139 = add i64 %132, -1
  %140 = icmp ne i64 %139, 0
  %141 = and i1 %140, %136
  %142 = inttoptr i64 %138 to i8*
  %143 = inttoptr i64 %137 to i8*
  br i1 %141, label %127, label %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit

_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit: ; preds = %127
  %144 = icmp ult i8 %133, %134
  %145 = zext i1 %144 to i8
  %146 = zext i1 %136 to i8
  store i64 %137, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1240
  store i64 %138, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1240
  store i64 %139, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %147 = or i8 %146, %145
  %148 = icmp eq i8 %147, 0
  %149 = zext i1 %148 to i8
  store i8 %149, i8* @RSI_2280_56234d8dff60, align 1, !tbaa !1240
  store i8 %145, i8* @RCX_2248_56234d8dff60, align 1, !tbaa !1240
  %150 = zext i8 %149 to i64
  %151 = zext i8 %145 to i64
  %152 = sub i8 %149, %145
  %153 = icmp ult i8 %149, %145
  %154 = zext i1 %153 to i8
  store i8 %154, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %155 = zext i8 %152 to i32
  %156 = call i32 @llvm.ctpop.i32(i32 %155) #13, !range !1234
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  %159 = xor i8 %158, 1
  store i8 %159, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %160 = xor i64 %151, %150
  %161 = trunc i64 %160 to i8
  %162 = xor i8 %152, %161
  %163 = lshr i8 %162, 4
  %164 = and i8 %163, 1
  store i8 %164, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %165 = icmp eq i8 %152, 0
  %166 = zext i1 %165 to i8
  store i8 %166, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %167 = lshr i8 %152, 7
  store i8 %167, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %168 = icmp eq i8 %166, 0
  br i1 %168, label %inst_2e77, label %inst_2e6c

inst_2e6c:                                        ; preds = %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit
  %169 = add i64 %41, 4
  store i64 %169, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 %169, i64* @program_invocation_short_name
  br label %inst_2e77
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5c2c__term_proc(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5c2c:
  %0 = load i64, i64* @RSP_2312_56234d8dffa8
  %1 = sub i64 %0, 8
  %2 = icmp ult i64 %0, 8
  %3 = lshr i64 %1, 63
  %4 = lshr i64 %0, 63
  %5 = xor i64 %3, %4
  %6 = add nuw nsw i64 %5, %4
  %7 = icmp eq i64 %6, 2
  %8 = zext i1 %7 to i8
  %9 = icmp ult i64 %0, %1
  %10 = or i1 %9, %2
  %11 = zext i1 %10 to i8
  store i8 %11, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %12 = trunc i64 %0 to i32
  %13 = and i32 %12, 255
  %14 = call i32 @llvm.ctpop.i32(i32 %13) #13, !range !1234
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %18 = xor i64 8, %1
  %19 = xor i64 %18, %0
  %20 = lshr i64 %19, 4
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  store i8 %22, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %23 = icmp eq i64 %0, 0
  %24 = zext i1 %23 to i8
  store i8 %24, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %25 = trunc i64 %4 to i8
  store i8 %25, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 %8, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %26 = add i64 %0, 8
  store i64 %26, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %memory
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_4920(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_4920:
  store i64 58, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 -1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %0 = call %struct.Memory* @sub_4870(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  ret %struct.Memory* %0
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_55b0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_55b0:
  %0 = load i64, i64* @RSP_2312_56234d8dffa8
  %1 = sub i64 %0, 8
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 ptrtoint (i8* @data_55bb to i64), i64* %3
  store i64 %2, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %4 = call %struct.Memory* @ext_2083b0_setlocale(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %5 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %6 = icmp eq i64 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  br i1 %6, label %inst_55e7, label %inst_55c8

inst_55e7:                                        ; preds = %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit1, %inst_55b0
  %8 = load i64, i64* @RSP_2312_56234d8dffa8
  %9 = add i64 8, %8
  %10 = icmp ult i64 %9, %8
  %11 = icmp ult i64 %9, 8
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  store i8 %13, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %14 = trunc i64 %9 to i32
  %15 = and i32 %14, 255
  %16 = call i32 @llvm.ctpop.i32(i32 %15) #13, !range !1234
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %20 = xor i64 8, %8
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  store i8 %24, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  store i8 %26, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %27 = lshr i64 %9, 63
  %28 = trunc i64 %27 to i8
  store i8 %28, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %29 = lshr i64 %8, 63
  %30 = xor i64 %27, %29
  %31 = add nuw nsw i64 %30, %27
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  store i8 %33, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %34 = add i64 %9, 8
  store i64 %34, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %4

inst_55c8:                                        ; preds = %inst_55b0
  store i8* @data_6b20, i8** @RDI_2296_56234d8e76a0
  store i64 2, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 %5, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %35 = load i8, i8* @DF_2075_56234d8dff60, align 1, !tbaa !1243
  %36 = icmp eq i8 %35, 0
  %37 = select i1 %36, i64 1, i64 -1
  %38 = load i8*, i8** @RSI_2280_56234d8e76a0
  %39 = load i64, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1240
  br label %40

40:                                               ; preds = %40, %inst_55c8
  %41 = phi i8* [ %55, %40 ], [ @data_6b20, %inst_55c8 ]
  %42 = phi i64 [ %51, %40 ], [ %39, %inst_55c8 ]
  %43 = phi i8* [ %56, %40 ], [ %38, %inst_55c8 ]
  %44 = phi i64 [ %50, %40 ], [ %5, %inst_55c8 ]
  %45 = phi i64 [ %52, %40 ], [ 2, %inst_55c8 ]
  %46 = load i8, i8* %43
  %47 = load i8, i8* %41
  %48 = sub i8 %46, %47
  %49 = icmp eq i8 %48, 0
  %50 = add i64 %37, %44
  %51 = add i64 %37, %42
  %52 = add i64 %45, -1
  %53 = icmp ne i64 %52, 0
  %54 = and i1 %53, %49
  %55 = inttoptr i64 %51 to i8*
  %56 = inttoptr i64 %50 to i8*
  br i1 %54, label %40, label %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit1

_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit1: ; preds = %40
  %57 = icmp ult i8 %46, %47
  %58 = zext i1 %57 to i8
  %59 = zext i1 %49 to i8
  store i64 %50, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1240
  store i64 %51, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1240
  store i8 %58, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i64 %52, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %60 = or i8 %59, %58
  %61 = icmp eq i8 %60, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* @RSI_2280_56234d8dff60, align 1, !tbaa !1240
  store i8 %58, i8* @RCX_2248_56234d8dff60, align 1, !tbaa !1240
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %63 = sub i8 %62, %58
  %64 = icmp eq i8 %63, 0
  %65 = zext i1 %64 to i8
  store i8 %65, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %inst_55f0, label %inst_55e7

inst_55f0:                                        ; preds = %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit1
  store i8* @data_6b22, i8** @RDI_2296_56234d8e76a0
  store i64 6, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 %5, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %67 = load i8*, i8** @RSI_2280_56234d8e76a0
  %68 = load i64, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1240
  br label %69

69:                                               ; preds = %69, %inst_55f0
  %70 = phi i8* [ %84, %69 ], [ @data_6b22, %inst_55f0 ]
  %71 = phi i64 [ %80, %69 ], [ %68, %inst_55f0 ]
  %72 = phi i8* [ %85, %69 ], [ %67, %inst_55f0 ]
  %73 = phi i64 [ %79, %69 ], [ %5, %inst_55f0 ]
  %74 = phi i64 [ %81, %69 ], [ 6, %inst_55f0 ]
  %75 = load i8, i8* %72
  %76 = load i8, i8* %70
  %77 = sub i8 %75, %76
  %78 = icmp eq i8 %77, 0
  %79 = add i64 %37, %73
  %80 = add i64 %37, %71
  %81 = add i64 %74, -1
  %82 = icmp ne i64 %81, 0
  %83 = and i1 %82, %78
  %84 = inttoptr i64 %80 to i8*
  %85 = inttoptr i64 %79 to i8*
  br i1 %83, label %69, label %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit

_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit: ; preds = %69
  %86 = zext i1 %78 to i8
  store i64 %79, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1240
  store i64 %80, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1240
  store i64 %81, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %87 = icmp eq i8 %86, 0
  %88 = zext i1 %87 to i8
  store i8 %88, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %89 = load i64, i64* @RSP_2312_56234d8dffa8
  %90 = add i64 8, %89
  %91 = icmp ult i64 %90, %89
  %92 = icmp ult i64 %90, 8
  %93 = or i1 %91, %92
  %94 = zext i1 %93 to i8
  store i8 %94, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %95 = trunc i64 %90 to i32
  %96 = and i32 %95, 255
  %97 = call i32 @llvm.ctpop.i32(i32 %96) #13, !range !1234
  %98 = trunc i32 %97 to i8
  %99 = and i8 %98, 1
  %100 = xor i8 %99, 1
  store i8 %100, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %101 = xor i64 8, %89
  %102 = xor i64 %101, %90
  %103 = lshr i64 %102, 4
  %104 = trunc i64 %103 to i8
  %105 = and i8 %104, 1
  store i8 %105, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %106 = icmp eq i64 %90, 0
  %107 = zext i1 %106 to i8
  store i8 %107, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %108 = lshr i64 %90, 63
  %109 = trunc i64 %108 to i8
  store i8 %109, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %110 = lshr i64 %89, 63
  %111 = xor i64 %108, %110
  %112 = add nuw nsw i64 %111, %108
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  store i8 %114, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %115 = add i64 %90, 8
  store i64 %115, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5610(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5610:
  %0 = load i64, i64* @R15_2456_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @R14_2440_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  store i64 14, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %7 = load i64, i64* @R13_2424_56234d8dffa8
  %8 = add i64 %5, -8
  %9 = getelementptr i64, i64* %6, i32 -1
  store i64 %7, i64* %9
  %10 = load i64, i64* @R12_2408_56234d8dffa8
  %11 = add i64 %8, -8
  %12 = getelementptr i64, i64* %9, i32 -1
  store i64 %10, i64* %12
  %13 = load i64, i64* @RBP_2328_56234d8dffa8
  %14 = add i64 %11, -8
  %15 = getelementptr i64, i64* %12, i32 -1
  store i64 %13, i64* %15
  %16 = load i64, i64* @RBX_2232_56234d8dffa8
  %17 = add i64 %14, -8
  %18 = getelementptr i64, i64* %15, i32 -1
  store i64 %16, i64* %18
  %19 = sub i64 %17, 168
  %20 = inttoptr i64 %19 to i64*
  %21 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %22 = add i64 %21, 40
  %23 = inttoptr i64 %22 to i64*
  %24 = load i64, i64* %23
  %25 = getelementptr i64, i64* %20, i32 19
  store i64 %24, i64* %25
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %26 = add i64 %19, -8
  %27 = getelementptr i64, i64* %20, i32 -1
  store i64 ptrtoint (i8* @data_563e to i64), i64* %27
  store i64 %26, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %28 = call %struct.Memory* @ext_208380_nl_langinfo(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %29 = load i64, i64* bitcast (i8* @data_208258 to i64*)
  store i64 %29, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %30 = load i64, i64* @RAX_2216_56234d8dffa8
  %31 = icmp eq i64 %30, 0
  %32 = zext i1 %31 to i8
  store i8* @data_6801, i8** @RAX_2216_56234d8e76a0
  %33 = icmp eq i8 %32, 0
  %34 = select i1 %33, i64 %30, i64 ptrtoint (i8* @data_6801 to i64)
  store i64 %34, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %35 = trunc i64 %29 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #13, !range !1234
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %41 = icmp eq i64 %29, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %43 = lshr i64 %29, 63
  %44 = trunc i64 %43 to i8
  store i8 %44, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %45 = icmp eq i8 %42, 0
  %46 = select i1 %45, i64 ptrtoint (i8* @data_567a to i64), i64 ptrtoint (i8* @data_565b to i64)
  br i1 %45, label %inst_567a, label %inst_565b

inst_58c0:                                        ; preds = %inst_5899, %inst_58c0
  %47 = phi i64 [ %921, %inst_5899 ], [ %79, %inst_58c0 ]
  %48 = add i64 %47, 4
  %49 = load i32*, i32** @R13_2424_56234d8ed000
  %50 = load i64, i64* @R13_2424_56234d8dffa8
  %51 = load i32, i32* %49
  %52 = zext i32 %51 to i64
  %53 = add i64 %48, 4
  %54 = add i64 4, %50
  store i64 %54, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %55 = add i64 %53, 6
  %56 = sub i64 %52, 16843009
  %57 = and i64 %56, 4294967295
  %58 = add i64 %55, 2
  %59 = and i64 %52, 4294967295
  %60 = xor i64 %59, 4294967295
  %61 = add i64 %58, 2
  %62 = trunc i64 %57 to i32
  %63 = zext i32 %62 to i64
  %64 = trunc i64 %60 to i32
  %65 = zext i32 %64 to i64
  %66 = and i64 %65, %63
  %67 = and i64 %66, 4294967295
  %68 = add i64 %61, 5
  %69 = trunc i64 %67 to i32
  %70 = zext i32 %69 to i64
  %71 = and i64 -2139062144, %70
  %72 = trunc i64 %71 to i32
  %73 = and i64 %71, 4294967295
  store i64 %73, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %74 = icmp eq i32 %72, 0
  %75 = zext i1 %74 to i8
  %76 = add i64 %68, 2
  %77 = sub i64 %76, 25
  %78 = icmp eq i8 %75, 0
  %79 = select i1 %78, i64 %76, i64 %77
  br i1 %74, label %inst_58c0, label %inst_58d9

inst_5882:                                        ; preds = %inst_587f, %inst_5882
  %80 = phi i64 [ %873, %inst_587f ], [ %112, %inst_5882 ]
  %81 = add i64 %80, 2
  %82 = load i32*, i32** @RDX_2264_56234d8ed000
  %83 = load i64, i64* @RDX_2264_56234d8dffa8
  %84 = load i32, i32* %82
  %85 = zext i32 %84 to i64
  %86 = add i64 %81, 4
  %87 = add i64 4, %83
  store i64 %87, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %88 = add i64 %86, 6
  %89 = sub i64 %85, 16843009
  %90 = and i64 %89, 4294967295
  %91 = add i64 %88, 2
  %92 = and i64 %85, 4294967295
  %93 = xor i64 %92, 4294967295
  %94 = add i64 %91, 2
  %95 = trunc i64 %90 to i32
  %96 = zext i32 %95 to i64
  %97 = trunc i64 %93 to i32
  %98 = zext i32 %97 to i64
  %99 = and i64 %98, %96
  %100 = and i64 %99, 4294967295
  %101 = add i64 %94, 5
  %102 = trunc i64 %100 to i32
  %103 = zext i32 %102 to i64
  %104 = and i64 -2139062144, %103
  %105 = trunc i64 %104 to i32
  %106 = and i64 %104, 4294967295
  store i64 %106, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %107 = icmp eq i32 %105, 0
  %108 = zext i1 %107 to i8
  %109 = add i64 %101, 2
  %110 = sub i64 %109, 23
  %111 = icmp eq i8 %108, 0
  %112 = select i1 %111, i64 %109, i64 %110
  br i1 %107, label %inst_5882, label %inst_5899

inst_567a:                                        ; preds = %inst_5660, %inst_573d, %inst_5610
  %113 = phi i64 [ %46, %inst_5610 ], [ undef, %inst_573d ], [ ptrtoint (i8* @data_567a to i64), %inst_5660 ]
  %114 = phi %struct.Memory* [ %28, %inst_5610 ], [ %302, %inst_573d ], [ %478, %inst_5660 ]
  %115 = add i64 %113, 4
  %116 = load i8*, i8** @R15_2456_56234d8e76a0
  %117 = load i64, i64* @R15_2456_56234d8dffa8
  %118 = load i8, i8* %116
  %119 = zext i8 %118 to i64
  store i64 %119, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %120 = add i64 %115, 3
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %121 = trunc i64 %119 to i32
  %122 = and i32 %121, 255
  %123 = call i32 @llvm.ctpop.i32(i32 %122) #13, !range !1234
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %127 = icmp eq i8 %118, 0
  %128 = zext i1 %127 to i8
  store i8 %128, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %129 = lshr i8 %118, 7
  store i8 %129, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %130 = add i64 %120, 2
  %131 = add i64 %130, 41
  %132 = icmp eq i8 %128, 0
  %133 = select i1 %132, i64 %130, i64 %131
  br i1 %127, label %inst_56ac, label %inst_5683

inst_569f:                                        ; preds = %inst_5698, %inst_5683
  %134 = phi i64 [ %567, %inst_5683 ], [ %612, %inst_5698 ]
  %135 = add i64 %134, 3
  %136 = load i64, i64* @R15_2456_56234d8dffa8
  store i64 %136, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %137 = add i64 %135, 5
  %138 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140
  store i64 %139, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %141 = call %struct.Memory* @ext_2082d8_strlen(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %555)
  %142 = load i64, i64* @R15_2456_56234d8dffa8
  %143 = load i64, i64* @RAX_2216_56234d8dffa8
  %144 = add i64 %142, 1
  %145 = add i64 %144, %143
  store i64 %145, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_56ac

inst_5821:                                        ; preds = %inst_5842, %inst_580d, %inst_59f0, %inst_583a
  %146 = phi i64 [ %787, %inst_580d ], [ %301, %inst_583a ], [ %797, %inst_5842 ], [ undef, %inst_59f0 ]
  %147 = phi %struct.Memory* [ %756, %inst_580d ], [ %285, %inst_583a ], [ %285, %inst_5842 ], [ %305, %inst_59f0 ]
  %148 = add i64 %146, 4
  %149 = load i64*, i64** @R14_2440_56234d8e7800
  %150 = getelementptr i64, i64* %149, i32 1
  %151 = load i64, i64* %150
  store i64 %151, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %152 = add i64 %148, 4
  %153 = getelementptr i64, i64* %149, i32 2
  %154 = load i64, i64* %153
  %155 = sub i64 %151, %154
  %156 = icmp ugt i64 %154, %151
  %157 = zext i1 %156 to i8
  store i8 %157, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = call i32 @llvm.ctpop.i32(i32 %159) #13, !range !1234
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %164 = xor i64 %154, %151
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %173 = lshr i64 %151, 63
  %174 = lshr i64 %154, 63
  %175 = xor i64 %174, %173
  %176 = xor i64 %171, %173
  %177 = add nuw nsw i64 %176, %175
  %178 = icmp eq i64 %177, 2
  %179 = zext i1 %178 to i8
  store i8 %179, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %180 = add i64 %152, 6
  %181 = add i64 %180, 331
  %182 = icmp eq i8 %157, 0
  %183 = select i1 %182, i64 %181, i64 %180
  br i1 %182, label %inst_597a, label %inst_582f

inst_5725:                                        ; preds = %inst_5a43, %inst_5720
  %184 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %185 = add i64 %184, -8
  %186 = inttoptr i64 %185 to i64*
  store i64 add (i64 ptrtoint (i8* @data_5720 to i64), i64 10), i64* %186
  store i64 %185, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %187 = call %struct.Memory* @ext_208370_malloc(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %688)
  %188 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %189 = trunc i64 %188 to i32
  %190 = and i32 %189, 255
  %191 = call i32 @llvm.ctpop.i32(i32 %190) #13, !range !1234
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  %194 = xor i8 %193, 1
  store i8 %194, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %195 = icmp eq i64 %188, 0
  %196 = zext i1 %195 to i8
  store i8 %196, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %197 = lshr i64 %188, 63
  %198 = trunc i64 %197 to i8
  store i8 %198, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 %188, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %199 = icmp eq i8 %196, 0
  br i1 %199, label %inst_57d8, label %inst_5736

inst_5928:                                        ; preds = %inst_590f, %inst_59fa
  %200 = phi %struct.Memory* [ %1028, %inst_59fa ], [ %1042, %inst_590f ]
  %201 = load i64, i64* @R12_2408_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %202 = trunc i64 %201 to i32
  %203 = and i32 %202, 255
  %204 = call i32 @llvm.ctpop.i32(i32 %203) #13, !range !1234
  %205 = trunc i32 %204 to i8
  %206 = and i8 %205, 1
  %207 = xor i8 %206, 1
  store i8 %207, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %208 = icmp eq i64 %201, 0
  %209 = zext i1 %208 to i8
  store i8 %209, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %210 = lshr i64 %201, 63
  %211 = trunc i64 %210 to i8
  store i8 %211, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %212 = icmp eq i8 %209, 0
  %213 = select i1 %212, i64 add (i64 ptrtoint (i8* @data_5928 to i64), i64 9), i64 add (i64 ptrtoint (i8* @data_5928 to i64), i64 247)
  br i1 %208, label %inst_5a1f, label %inst_5931

inst_56ac:                                        ; preds = %inst_569f, %inst_567a
  %214 = phi i64 [ %133, %inst_567a ], [ ptrtoint (i8* @data_56ac to i64), %inst_569f ]
  %215 = phi %struct.Memory* [ %114, %inst_567a ], [ %141, %inst_569f ]
  %216 = load i8*, i8** @RBX_2232_56234d8e76a0
  %217 = load i64, i64* @RBX_2232_56234d8dffa8
  %218 = load i8, i8* %216
  %219 = icmp eq i8 %218, 0
  %220 = zext i1 %219 to i8
  %221 = icmp eq i8 %220, 0
  %222 = select i1 %221, i64 %217, i64 ptrtoint (i8* @data_6b28 to i64)
  store i64 %222, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %223 = load i64*, i64** @RSP_2312_56234d8e7800
  %224 = load i64, i64* @RSP_2312_56234d8dffa8
  %225 = getelementptr i64, i64* %223, i32 19
  %226 = load i64, i64* %225
  %227 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %228 = add i64 %227, 40
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  %231 = xor i64 %230, %226
  store i64 %231, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %232 = trunc i64 %231 to i32
  %233 = and i32 %232, 255
  %234 = call i32 @llvm.ctpop.i32(i32 %233) #13, !range !1234
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = xor i8 %236, 1
  store i8 %237, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %238 = icmp eq i64 %231, 0
  %239 = zext i1 %238 to i8
  store i8 %239, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %240 = lshr i64 %231, 63
  %241 = trunc i64 %240 to i8
  store i8 %241, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 %222, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %242 = icmp eq i8 %239, 0
  br i1 %242, label %inst_5a4c, label %inst_56d4

inst_582f:                                        ; preds = %inst_5931, %inst_5821
  %243 = phi i64 [ %1154, %inst_5931 ], [ %183, %inst_5821 ]
  %244 = phi %struct.Memory* [ %1122, %inst_5931 ], [ %147, %inst_5821 ]
  %245 = add i64 %243, 4
  %246 = load i8*, i8** @RAX_2216_56234d8e76a0
  %247 = load i64, i64* @RAX_2216_56234d8dffa8
  %248 = add i64 %247, 1
  store i64 %248, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %249 = add i64 %245, 4
  %250 = load i64, i64* @R14_2440_56234d8dffa8
  %251 = add i64 %250, 8
  %252 = inttoptr i64 %251 to i64*
  store i64 %248, i64* %252
  %253 = add i64 %249, 3
  %254 = load i8, i8* %246
  %255 = zext i8 %254 to i64
  store i64 %255, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_583a

inst_5736:                                        ; preds = %inst_5768, %inst_5725
  %256 = phi %struct.Memory* [ %489, %inst_5768 ], [ %187, %inst_5725 ]
  store i8* @data_6801, i8** @R15_2456_56234d8e76a0
  br label %inst_573d

inst_5789:                                        ; preds = %inst_5775, %inst_57d8
  %257 = phi %struct.Memory* [ %744, %inst_5775 ], [ %732, %inst_57d8 ]
  %258 = load i64, i64* @R12_2408_56234d8dffa8
  %259 = load i64, i64* @RBP_2328_56234d8dffa8
  %260 = add i64 %259, %258
  %261 = inttoptr i64 %260 to i32*
  %262 = inttoptr i64 %260 to i16*
  store i64 %260, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 131072, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %263 = inttoptr i64 %260 to i64*
  store i64 3347411969557751907, i64* %263
  %264 = getelementptr i32, i32* %261, i32 2
  store i32 1634298977, i32* %264
  %265 = getelementptr i16, i16* %262, i32 6
  store i16 115, i16* %265
  store i64 %259, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %266 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %267 = add i64 %266, -8
  %268 = inttoptr i64 %267 to i64*
  store i64 add (i64 ptrtoint (i8* @data_5789 to i64), i64 52), i64* %268
  store i64 %267, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %269 = call %struct.Memory* @ext_2083d0_open(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %257)
  %270 = load i32, i32* @RAX_2216_56234d8dff90
  %271 = zext i32 %270 to i64
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %272 = and i32 %270, 255
  %273 = call i32 @llvm.ctpop.i32(i32 %272) #13, !range !1234
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  %276 = xor i8 %275, 1
  store i8 %276, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %277 = icmp eq i32 %270, 0
  %278 = zext i1 %277 to i8
  store i8 %278, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %279 = lshr i32 %270, 31
  %280 = trunc i32 %279 to i8
  store i8 %280, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %281 = and i64 %271, 4294967295
  store i64 %281, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %282 = icmp eq i8 %280, 0
  %283 = select i1 %282, i64 ptrtoint (i8* @data_57e8 to i64), i64 ptrtoint (i8* @data_57c4 to i64)
  br i1 %282, label %inst_57e8, label %inst_57c4

inst_583a:                                        ; preds = %inst_597a, %inst_582f
  %284 = phi i64 [ %462, %inst_597a ], [ %253, %inst_582f ]
  %285 = phi %struct.Memory* [ %433, %inst_597a ], [ %244, %inst_582f ]
  %286 = add i64 %284, 3
  %287 = load i64, i64* @RDI_2296_56234d8dffa8
  %288 = sub i64 %287, 9
  %289 = and i64 %288, 4294967295
  store i64 %289, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %290 = add i64 %286, 3
  %291 = trunc i64 %289 to i32
  %292 = sub i32 %291, 1
  %293 = icmp ult i32 %291, 1
  %294 = zext i1 %293 to i8
  %295 = icmp eq i32 %292, 0
  %296 = zext i1 %295 to i8
  %297 = add i64 %290, 2
  %298 = sub i64 %297, 33
  %299 = or i8 %296, %294
  %300 = icmp ne i8 %299, 0
  %301 = select i1 %300, i64 %298, i64 %297
  br i1 %300, label %inst_5821, label %inst_5842

inst_573d:                                        ; preds = %inst_57cb, %inst_5736
  %302 = phi %struct.Memory* [ %256, %inst_5736 ], [ %367, %inst_57cb ]
  %303 = load i64, i64* @R15_2456_56234d8dffa8
  store i64 %303, i64* bitcast (i8* @data_208258 to i64*)
  br label %inst_567a

inst_59c0:                                        ; preds = %inst_59d3, %inst_59b0
  %304 = phi i64 [ %1173, %inst_59b0 ], [ undef, %inst_59d3 ]
  %305 = phi %struct.Memory* [ %321, %inst_59b0 ], [ %1179, %inst_59d3 ]
  %306 = add i64 %304, 3
  %307 = load i32, i32* @RAX_2216_56234d8dff90
  %308 = zext i32 %307 to i64
  %309 = sub i32 %307, 10
  %310 = icmp eq i32 %309, 0
  %311 = zext i1 %310 to i8
  %312 = lshr i32 %307, 31
  %313 = add i64 %306, 2
  %314 = add i64 %313, 43
  %315 = icmp eq i8 %311, 0
  %316 = select i1 %315, i64 %313, i64 %314
  br i1 %310, label %inst_59f0, label %inst_59c5

inst_57c4:                                        ; preds = %inst_59e3, %inst_598d, %inst_5789
  %317 = phi i64 [ undef, %inst_59e3 ], [ %390, %inst_598d ], [ %283, %inst_5789 ]
  %318 = phi %struct.Memory* [ %780, %inst_59e3 ], [ %376, %inst_598d ], [ %269, %inst_5789 ]
  %319 = add i64 %317, 7
  store i8* @data_6801, i8** @R15_2456_56234d8e76a0
  br label %inst_57cb

inst_59c9:                                        ; preds = %inst_59c5, %inst_5847
  %320 = phi i64 [ %826, %inst_5847 ], [ %1165, %inst_59c5 ]
  %321 = phi %struct.Memory* [ %285, %inst_5847 ], [ %305, %inst_59c5 ]
  %322 = add i64 %320, 4
  %323 = load i64*, i64** @R14_2440_56234d8e7800
  %324 = load i64, i64* @R14_2440_56234d8dffa8
  %325 = getelementptr i64, i64* %323, i32 1
  %326 = load i64, i64* %325
  store i64 %326, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %327 = add i64 %322, 4
  %328 = getelementptr i64, i64* %323, i32 2
  %329 = load i64, i64* %328
  %330 = sub i64 %326, %329
  %331 = icmp ugt i64 %329, %326
  %332 = zext i1 %331 to i8
  store i8 %332, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %333 = trunc i64 %330 to i32
  %334 = and i32 %333, 255
  %335 = call i32 @llvm.ctpop.i32(i32 %334) #13, !range !1234
  %336 = trunc i32 %335 to i8
  %337 = and i8 %336, 1
  %338 = xor i8 %337, 1
  store i8 %338, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %339 = xor i64 %329, %326
  %340 = xor i64 %339, %330
  %341 = lshr i64 %340, 4
  %342 = trunc i64 %341 to i8
  %343 = and i8 %342, 1
  store i8 %343, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %344 = icmp eq i64 %330, 0
  %345 = zext i1 %344 to i8
  store i8 %345, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %346 = lshr i64 %330, 63
  %347 = trunc i64 %346 to i8
  store i8 %347, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %348 = lshr i64 %326, 63
  %349 = lshr i64 %329, 63
  %350 = xor i64 %349, %348
  %351 = xor i64 %346, %348
  %352 = add nuw nsw i64 %351, %350
  %353 = icmp eq i64 %352, 2
  %354 = zext i1 %353 to i8
  store i8 %354, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %355 = add i64 %327, 2
  %356 = sub i64 %355, 35
  %357 = icmp eq i8 %332, 0
  %358 = select i1 %357, i64 %355, i64 %356
  br i1 %331, label %inst_59b0, label %inst_59d3

inst_57cb:                                        ; preds = %inst_59a2, %inst_5a1f, %inst_57c4
  %359 = phi i64 [ %319, %inst_57c4 ], [ undef, %inst_59a2 ], [ undef, %inst_5a1f ]
  %360 = phi %struct.Memory* [ %318, %inst_57c4 ], [ %376, %inst_59a2 ], [ %1060, %inst_5a1f ]
  %361 = add i64 %359, 3
  %362 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %362, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %363 = add i64 %361, 5
  %364 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %365 = add i64 %364, -8
  %366 = inttoptr i64 %365 to i64*
  store i64 %363, i64* %366
  store i64 %365, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %367 = call %struct.Memory* @ext_208270_free(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %360)
  br label %inst_573d

inst_598d:                                        ; preds = %inst_5850, %inst_59f0, %inst_597a
  %368 = phi i64 [ %529, %inst_59f0 ], [ %872, %inst_5850 ], [ %462, %inst_597a ]
  %369 = phi %struct.Memory* [ %305, %inst_59f0 ], [ %843, %inst_5850 ], [ %433, %inst_597a ]
  %370 = add i64 %368, 3
  %371 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %371, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %372 = add i64 %370, 5
  %373 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %374 = add i64 %373, -8
  %375 = inttoptr i64 %374 to i64*
  store i64 %372, i64* %375
  store i64 %374, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %376 = call %struct.Memory* @sub_5a60(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %369)
  %377 = load i64*, i64** @RSP_2312_56234d8e7800
  %378 = load i64, i64* %377
  store i64 %378, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %379 = trunc i64 %378 to i32
  %380 = and i32 %379, 255
  %381 = call i32 @llvm.ctpop.i32(i32 %380) #13, !range !1234
  %382 = trunc i32 %381 to i8
  %383 = and i8 %382, 1
  %384 = xor i8 %383, 1
  store i8 %384, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %385 = icmp eq i64 %378, 0
  %386 = zext i1 %385 to i8
  store i8 %386, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %387 = lshr i64 %378, 63
  %388 = trunc i64 %387 to i8
  store i8 %388, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %389 = icmp eq i8 %386, 0
  %390 = select i1 %389, i64 ptrtoint (i8* @data_59a2 to i64), i64 ptrtoint (i8* @data_57c4 to i64)
  br i1 %385, label %inst_57c4, label %inst_59a2

inst_5750:                                        ; preds = %inst_5704, %inst_565b
  %391 = phi i64 [ %547, %inst_565b ], [ %682, %inst_5704 ]
  %392 = add i64 %391, 7
  store i8* @data_6b2e, i8** @R13_2424_56234d8e76a0
  %393 = add i64 %392, 5
  store i64 40, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %394 = add i64 %393, 6
  store i64 26, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %395 = add i64 %394, 6
  store i64 25, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5768

inst_5a51:                                        ; preds = %inst_5a3b, %inst_5a4c
  %396 = phi %struct.Memory* [ %624, %inst_5a4c ], [ %688, %inst_5a3b ]
  %397 = load i64, i64* @RAX_2216_56234d8dffa8
  %398 = add i64 %397, 15
  store i64 %398, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %399 = load i64, i64* @R12_2408_56234d8dffa8
  %400 = add i64 1, %399
  store i64 %400, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %401 = icmp ult i64 %400, %399
  %402 = icmp ult i64 %400, 1
  %403 = or i1 %401, %402
  %404 = zext i1 %403 to i8
  store i8 %404, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %405 = trunc i64 %400 to i32
  %406 = and i32 %405, 255
  %407 = call i32 @llvm.ctpop.i32(i32 %406) #13, !range !1234
  %408 = trunc i32 %407 to i8
  %409 = and i8 %408, 1
  %410 = xor i8 %409, 1
  store i8 %410, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %411 = xor i64 1, %399
  %412 = xor i64 %411, %400
  %413 = lshr i64 %412, 4
  %414 = trunc i64 %413 to i8
  %415 = and i8 %414, 1
  store i8 %415, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %416 = icmp eq i64 %400, 0
  %417 = zext i1 %416 to i8
  store i8 %417, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %418 = lshr i64 %400, 63
  %419 = trunc i64 %418 to i8
  store i8 %419, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %420 = lshr i64 %399, 63
  %421 = xor i64 %418, %420
  %422 = add nuw nsw i64 %421, %418
  %423 = icmp eq i64 %422, 2
  %424 = zext i1 %423 to i8
  store i8 %424, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  br label %inst_5768

inst_597a:                                        ; preds = %inst_5931, %inst_5821
  %425 = phi i64 [ %183, %inst_5821 ], [ %1154, %inst_5931 ]
  %426 = phi %struct.Memory* [ %147, %inst_5821 ], [ %1122, %inst_5931 ]
  %427 = add i64 %425, 3
  %428 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %428, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %429 = add i64 %427, 5
  %430 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %431 = add i64 %430, -8
  %432 = inttoptr i64 %431 to i64*
  store i64 %429, i64* %432
  store i64 %431, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %433 = call %struct.Memory* @ext_208260___uflow(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %426)
  %434 = load i32, i32* @RAX_2216_56234d8dff90
  %435 = zext i32 %434 to i64
  %436 = sub i32 %434, -1
  %437 = icmp ult i32 %434, -1
  %438 = zext i1 %437 to i8
  store i8 %438, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %439 = and i32 %436, 255
  %440 = call i32 @llvm.ctpop.i32(i32 %439) #13, !range !1234
  %441 = trunc i32 %440 to i8
  %442 = and i8 %441, 1
  %443 = xor i8 %442, 1
  store i8 %443, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %444 = xor i64 -1, %435
  %445 = trunc i64 %444 to i32
  %446 = xor i32 %436, %445
  %447 = lshr i32 %446, 4
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  store i8 %449, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %450 = icmp eq i32 %436, 0
  %451 = zext i1 %450 to i8
  store i8 %451, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %452 = lshr i32 %436, 31
  %453 = trunc i32 %452 to i8
  store i8 %453, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %454 = lshr i32 %434, 31
  %455 = xor i32 1, %454
  %456 = xor i32 %452, %454
  %457 = add nuw nsw i32 %456, %455
  %458 = icmp eq i32 %457, 2
  %459 = zext i1 %458 to i8
  store i8 %459, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %460 = and i64 %435, 4294967295
  store i64 %460, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %461 = icmp eq i8 %451, 0
  %462 = select i1 %461, i64 ptrtoint (i8* @data_583a to i64), i64 ptrtoint (i8* @data_598d to i64)
  br i1 %461, label %inst_583a, label %inst_598d

inst_5660:                                        ; preds = %inst_5698, %inst_5692
  %463 = phi i64 [ %595, %inst_5692 ], [ %612, %inst_5698 ]
  %464 = add i64 %463, 3
  %465 = load i64, i64* @R15_2456_56234d8dffa8
  store i64 %465, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %466 = add i64 %464, 5
  %467 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %468 = add i64 %467, -8
  %469 = inttoptr i64 %468 to i64*
  store i64 %466, i64* %469
  store i64 %468, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %470 = call %struct.Memory* @ext_2082d8_strlen(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %555)
  %471 = load i64, i64* @R15_2456_56234d8dffa8
  %472 = load i64, i64* @RAX_2216_56234d8dffa8
  %473 = add i64 %471, 1
  %474 = add i64 %473, %472
  store i64 %474, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  store i64 %474, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %475 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %476 = add i64 %475, -8
  %477 = inttoptr i64 %476 to i64*
  store i64 ptrtoint (i8* @data_5675 to i64), i64* %477
  store i64 %476, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %478 = call %struct.Memory* @ext_2082d8_strlen(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %470)
  %479 = load i64, i64* @RBP_2328_56234d8dffa8
  %480 = load i64, i64* @RAX_2216_56234d8dffa8
  %481 = add i64 %479, 1
  %482 = add i64 %481, %480
  store i64 %482, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_567a

inst_5768:                                        ; preds = %inst_5a51, %inst_5750
  %483 = phi i64 [ undef, %inst_5a51 ], [ %395, %inst_5750 ]
  %484 = phi %struct.Memory* [ %396, %inst_5a51 ], [ %533, %inst_5750 ]
  %485 = add i64 %483, 5
  %486 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %487 = add i64 %486, -8
  %488 = inttoptr i64 %487 to i64*
  store i64 %485, i64* %488
  store i64 %487, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %489 = call %struct.Memory* @ext_208370_malloc(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %484)
  %490 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %491 = trunc i64 %490 to i32
  %492 = and i32 %491, 255
  %493 = call i32 @llvm.ctpop.i32(i32 %492) #13, !range !1234
  %494 = trunc i32 %493 to i8
  %495 = and i8 %494, 1
  %496 = xor i8 %495, 1
  store i8 %496, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %497 = icmp eq i64 %490, 0
  %498 = zext i1 %497 to i8
  store i8 %498, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %499 = lshr i64 %490, 63
  %500 = trunc i64 %499 to i8
  store i8 %500, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 %490, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  br i1 %497, label %inst_5736, label %inst_5775

inst_59f0:                                        ; preds = %inst_59c5, %inst_59c0
  %501 = phi i64 [ %316, %inst_59c0 ], [ %1165, %inst_59c5 ]
  %502 = add i64 %501, 3
  %503 = sub i32 %307, -1
  %504 = icmp ult i32 %307, -1
  %505 = zext i1 %504 to i8
  store i8 %505, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %506 = and i32 %503, 255
  %507 = call i32 @llvm.ctpop.i32(i32 %506) #13, !range !1234
  %508 = trunc i32 %507 to i8
  %509 = and i8 %508, 1
  %510 = xor i8 %509, 1
  store i8 %510, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %511 = xor i64 -1, %308
  %512 = trunc i64 %511 to i32
  %513 = xor i32 %503, %512
  %514 = lshr i32 %513, 4
  %515 = trunc i32 %514 to i8
  %516 = and i8 %515, 1
  store i8 %516, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %517 = icmp eq i32 %503, 0
  %518 = zext i1 %517 to i8
  store i8 %518, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %519 = lshr i32 %503, 31
  %520 = trunc i32 %519 to i8
  store i8 %520, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %521 = xor i32 1, %312
  %522 = xor i32 %519, %312
  %523 = add nuw nsw i32 %522, %521
  %524 = icmp eq i32 %523, 2
  %525 = zext i1 %524 to i8
  store i8 %525, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %526 = add i64 %502, 2
  %527 = sub i64 %526, 104
  %528 = icmp eq i8 %518, 0
  %529 = select i1 %528, i64 %526, i64 %527
  br i1 %517, label %inst_598d, label %inst_5821

inst_565b:                                        ; preds = %inst_5610
  store i8* @data_6b48, i8** @RDI_2296_56234d8e76a0
  %530 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %531 = add i64 %530, -8
  %532 = inttoptr i64 %531 to i64*
  store i64 undef, i64* %532
  store i64 %531, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %533 = call %struct.Memory* @ext_208268_getenv(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %28)
  %534 = load i8*, i8** @RAX_2216_56234d8e76a0
  %535 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %536 = trunc i64 %535 to i32
  %537 = and i32 %536, 255
  %538 = call i32 @llvm.ctpop.i32(i32 %537) #13, !range !1234
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = xor i8 %540, 1
  store i8 %541, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %542 = icmp eq i64 %535, 0
  %543 = zext i1 %542 to i8
  store i8 %543, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %544 = lshr i64 %535, 63
  %545 = trunc i64 %544 to i8
  store i8 %545, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 %535, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %546 = icmp eq i8 %543, 0
  %547 = select i1 %546, i64 ptrtoint (i8* @data_5704 to i64), i64 ptrtoint (i8* @data_5750 to i64)
  br i1 %542, label %inst_5750, label %inst_5704

inst_5683:                                        ; preds = %inst_567a
  %548 = add i64 %133, 3
  store i64 %117, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %549 = add i64 %548, 3
  %550 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %550, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %551 = add i64 %549, 5
  %552 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %553 = add i64 %552, -8
  %554 = inttoptr i64 %553 to i64*
  store i64 %551, i64* %554
  store i64 %553, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %555 = call %struct.Memory* @ext_208358_strcmp(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %114)
  %556 = load i32, i32* @RAX_2216_56234d8dff90
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %557 = and i32 %556, 255
  %558 = call i32 @llvm.ctpop.i32(i32 %557) #13, !range !1234
  %559 = trunc i32 %558 to i8
  %560 = and i8 %559, 1
  %561 = xor i8 %560, 1
  store i8 %561, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %562 = icmp eq i32 %556, 0
  %563 = zext i1 %562 to i8
  store i8 %563, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %564 = lshr i32 %556, 31
  %565 = trunc i32 %564 to i8
  store i8 %565, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %566 = icmp eq i8 %563, 0
  %567 = select i1 %566, i64 ptrtoint (i8* @data_5692 to i64), i64 ptrtoint (i8* @data_569f to i64)
  br i1 %562, label %inst_569f, label %inst_5692

inst_5692:                                        ; preds = %inst_5683
  %568 = add i64 %567, 4
  %569 = load i8, i8* @RBP_2328_56234d8dff60
  %570 = zext i8 %569 to i64
  %571 = sub i8 %569, 42
  %572 = icmp ult i8 %569, 42
  %573 = zext i1 %572 to i8
  store i8 %573, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %574 = zext i8 %571 to i32
  %575 = call i32 @llvm.ctpop.i32(i32 %574) #13, !range !1234
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  store i8 %578, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %579 = xor i64 42, %570
  %580 = trunc i64 %579 to i8
  %581 = xor i8 %571, %580
  %582 = lshr i8 %581, 4
  %583 = and i8 %582, 1
  store i8 %583, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %584 = icmp eq i8 %571, 0
  %585 = zext i1 %584 to i8
  store i8 %585, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %586 = lshr i8 %571, 7
  store i8 %586, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %587 = lshr i8 %569, 7
  %588 = xor i8 %586, %587
  %589 = add nuw nsw i8 %588, %587
  %590 = icmp eq i8 %589, 2
  %591 = zext i1 %590 to i8
  store i8 %591, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %592 = add i64 %568, 2
  %593 = sub i64 %592, 56
  %594 = icmp eq i8 %585, 0
  %595 = select i1 %594, i64 %593, i64 %592
  br i1 %594, label %inst_5660, label %inst_5698

inst_5698:                                        ; preds = %inst_5692
  %596 = add i64 %595, 5
  %597 = load i64, i64* @R15_2456_56234d8dffa8
  %598 = add i64 %597, 1
  %599 = inttoptr i64 %598 to i8*
  %600 = load i8, i8* %599
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %601 = zext i8 %600 to i32
  %602 = call i32 @llvm.ctpop.i32(i32 %601) #13, !range !1234
  %603 = trunc i32 %602 to i8
  %604 = and i8 %603, 1
  %605 = xor i8 %604, 1
  store i8 %605, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %606 = icmp eq i8 %600, 0
  %607 = zext i1 %606 to i8
  store i8 %607, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %608 = lshr i8 %600, 7
  store i8 %608, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %609 = add i64 %596, 2
  %610 = sub i64 %609, 63
  %611 = icmp eq i8 %607, 0
  %612 = select i1 %611, i64 %610, i64 %609
  br i1 %611, label %inst_5660, label %inst_569f

inst_5a4c:                                        ; preds = %inst_56ac
  %613 = add i64 %214, 3
  %614 = add i64 %613, 7
  %615 = add i64 %614, 4
  %616 = add i64 %615, 8
  %617 = add i64 %616, 9
  %618 = add i64 %617, 3
  %619 = add i64 %618, 6
  %620 = add i64 %619, 888
  %621 = add i64 %620, 5
  %622 = add i64 %224, -8
  %623 = inttoptr i64 %622 to i64*
  store i64 %621, i64* %623
  store i64 %622, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %624 = call %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %215)
  br label %inst_5a51

inst_56d4:                                        ; preds = %inst_56ac
  %625 = add i64 168, %224
  %626 = getelementptr i64, i64* %223, i32 21
  %627 = icmp ult i64 %625, %224
  %628 = icmp ult i64 %625, 168
  %629 = or i1 %627, %628
  %630 = zext i1 %629 to i8
  store i8 %630, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %631 = trunc i64 %625 to i32
  %632 = and i32 %631, 255
  %633 = call i32 @llvm.ctpop.i32(i32 %632) #13, !range !1234
  %634 = trunc i32 %633 to i8
  %635 = and i8 %634, 1
  %636 = xor i8 %635, 1
  store i8 %636, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %637 = xor i64 168, %224
  %638 = xor i64 %637, %625
  %639 = lshr i64 %638, 4
  %640 = trunc i64 %639 to i8
  %641 = and i8 %640, 1
  store i8 %641, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %642 = icmp eq i64 %625, 0
  %643 = zext i1 %642 to i8
  store i8 %643, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %644 = lshr i64 %625, 63
  %645 = trunc i64 %644 to i8
  store i8 %645, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %646 = lshr i64 %224, 63
  %647 = xor i64 %644, %646
  %648 = add nuw nsw i64 %647, %644
  %649 = icmp eq i64 %648, 2
  %650 = zext i1 %649 to i8
  store i8 %650, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %651 = add i64 %625, 8
  %652 = getelementptr i64, i64* %626, i32 1
  %653 = load i64, i64* %626
  store i64 %653, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %654 = add i64 %651, 8
  %655 = getelementptr i64, i64* %652, i32 1
  %656 = load i64, i64* %652
  store i64 %656, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %657 = add i64 %654, 8
  %658 = getelementptr i64, i64* %655, i32 1
  %659 = load i64, i64* %655
  store i64 %659, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %660 = add i64 %657, 8
  %661 = getelementptr i64, i64* %658, i32 1
  %662 = load i64, i64* %658
  store i64 %662, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %663 = add i64 %660, 8
  %664 = load i64, i64* %661
  store i64 %664, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %665 = add i64 %663, 8
  %666 = getelementptr i64, i64* %661, i32 1
  %667 = load i64, i64* %666
  store i64 %667, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %668 = add i64 %665, 8
  store i64 %668, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %215

inst_5704:                                        ; preds = %inst_565b
  %669 = add i64 %547, 3
  %670 = load i8, i8* %534
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %671 = zext i8 %670 to i32
  %672 = call i32 @llvm.ctpop.i32(i32 %671) #13, !range !1234
  %673 = trunc i32 %672 to i8
  %674 = and i8 %673, 1
  %675 = xor i8 %674, 1
  store i8 %675, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %676 = icmp eq i8 %670, 0
  %677 = zext i1 %676 to i8
  store i8 %677, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %678 = lshr i8 %670, 7
  store i8 %678, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %679 = add i64 %669, 2
  %680 = add i64 %679, 71
  %681 = icmp eq i8 %677, 0
  %682 = select i1 %681, i64 %679, i64 %680
  br i1 %676, label %inst_5750, label %inst_5709

inst_5709:                                        ; preds = %inst_5704
  %683 = add i64 %682, 3
  store i64 %535, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %684 = add i64 %683, 5
  %685 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %686 = add i64 %685, -8
  %687 = inttoptr i64 %686 to i64*
  store i64 %684, i64* %687
  store i64 %686, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %688 = call %struct.Memory* @ext_2082d8_strlen(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %533)
  %689 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %690 = trunc i64 %689 to i32
  %691 = and i32 %690, 255
  %692 = call i32 @llvm.ctpop.i32(i32 %691) #13, !range !1234
  %693 = trunc i32 %692 to i8
  %694 = and i8 %693, 1
  %695 = xor i8 %694, 1
  store i8 %695, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %696 = icmp eq i64 %689, 0
  %697 = zext i1 %696 to i8
  store i8 %697, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %698 = lshr i64 %689, 63
  %699 = trunc i64 %698 to i8
  store i8 %699, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 %689, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 %689, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %700 = icmp eq i8 %697, 0
  br i1 %700, label %inst_5a3b, label %inst_5720

inst_5a3b:                                        ; preds = %inst_5709
  %701 = load i64, i64* @R13_2424_56234d8dffa8
  %702 = add i64 %701, -1
  %703 = add i64 %702, %689
  %704 = inttoptr i64 %703 to i8*
  %705 = load i8, i8* %704
  %706 = sub i8 %705, 47
  %707 = icmp ult i8 %705, 47
  %708 = zext i1 %707 to i8
  store i8 %708, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %709 = zext i8 %706 to i32
  %710 = call i32 @llvm.ctpop.i32(i32 %709) #13, !range !1234
  %711 = trunc i32 %710 to i8
  %712 = and i8 %711, 1
  %713 = xor i8 %712, 1
  store i8 %713, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %714 = xor i8 %705, 47
  %715 = xor i8 %714, %706
  %716 = lshr i8 %715, 4
  %717 = and i8 %716, 1
  store i8 %717, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %718 = icmp eq i8 %706, 0
  %719 = zext i1 %718 to i8
  store i8 %719, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %720 = lshr i8 %706, 7
  store i8 %720, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %721 = lshr i8 %705, 7
  %722 = xor i8 %720, %721
  %723 = add nuw nsw i8 %722, %721
  %724 = icmp eq i8 %723, 2
  %725 = zext i1 %724 to i8
  store i8 %725, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %726 = icmp eq i8 %719, 0
  br i1 %726, label %inst_5a51, label %inst_5a43

inst_5720:                                        ; preds = %inst_5709
  store i64 14, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5725

inst_57d8:                                        ; preds = %inst_5725
  %727 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %727, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %728 = load i64, i64* @R13_2424_56234d8dffa8
  store i64 %728, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 %188, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %729 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %730 = add i64 %729, -8
  %731 = inttoptr i64 %730 to i64*
  store i64 add (i64 ptrtoint (i8* @data_57d8 to i64), i64 14), i64* %731
  store i64 %730, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %732 = call %struct.Memory* @ext_208360_memcpy(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %187)
  br label %inst_5789

inst_5775:                                        ; preds = %inst_5768
  %733 = icmp eq i8 %498, 0
  %734 = select i1 %733, i64 ptrtoint (i8* @data_5775 to i64), i64 ptrtoint (i8* @data_5736 to i64)
  %735 = add i64 %734, 3
  %736 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %736, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %737 = add i64 %735, 3
  %738 = load i64, i64* @R13_2424_56234d8dffa8
  store i64 %738, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %739 = add i64 %737, 3
  store i64 %490, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %740 = add i64 %739, 5
  %741 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %742 = add i64 %741, -8
  %743 = inttoptr i64 %742 to i64*
  store i64 %740, i64* %743
  store i64 %742, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %744 = call %struct.Memory* @ext_208360_memcpy(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %489)
  %745 = load i64, i64* @RBP_2328_56234d8dffa8
  %746 = load i64, i64* @R14_2440_56234d8dffa8
  %747 = add i64 %746, %745
  %748 = inttoptr i64 %747 to i8*
  store i8 47, i8* %748
  br label %inst_5789

inst_57e8:                                        ; preds = %inst_5789
  %749 = add i64 %283, 7
  store i8* @data_5d8f, i8** @RSI_2280_56234d8e76a0
  %750 = add i64 %749, 2
  store i64 %281, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %751 = add i64 %750, 3
  store i64 0, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %752 = add i64 %751, 5
  %753 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %754 = add i64 %753, -8
  %755 = inttoptr i64 %754 to i64*
  store i64 %752, i64* %755
  store i64 %754, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %756 = call %struct.Memory* @ext_2083a8_fdopen(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %269)
  %757 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %758 = trunc i64 %757 to i32
  %759 = and i32 %758, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #13, !range !1234
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  store i8 %763, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %764 = icmp eq i64 %757, 0
  %765 = zext i1 %764 to i8
  store i8 %765, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %766 = lshr i64 %757, 63
  %767 = trunc i64 %766 to i8
  store i8 %767, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 %757, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %768 = load i64*, i64** @RSP_2312_56234d8e7800
  %769 = load i64, i64* @RSP_2312_56234d8dffa8
  store i64 0, i64* %768
  %770 = icmp eq i8 %765, 0
  %771 = select i1 %770, i64 ptrtoint (i8* @data_580d to i64), i64 ptrtoint (i8* @data_59e3 to i64)
  br i1 %764, label %inst_59e3, label %inst_580d

inst_59e3:                                        ; preds = %inst_57e8
  %772 = add i64 %771, 3
  %773 = load i32, i32* @R12_2408_56234d8dff90
  %774 = zext i32 %773 to i64
  %775 = and i64 %774, 4294967295
  store i64 %775, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %776 = add i64 %772, 5
  %777 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %778 = add i64 %777, -8
  %779 = inttoptr i64 %778 to i64*
  store i64 %776, i64* %779
  store i64 %778, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %780 = call %struct.Memory* @ext_208320_close(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %756)
  br label %inst_57c4

inst_580d:                                        ; preds = %inst_57e8
  %781 = add i64 %771, 5
  %782 = add i64 %769, 96
  %783 = add i64 %781, 5
  %784 = getelementptr i64, i64* %768, i32 1
  store i64 %782, i64* %784
  %785 = add i64 %783, 5
  %786 = add i64 %769, 32
  %787 = add i64 %785, 5
  %788 = getelementptr i64, i64* %768, i32 2
  store i64 %786, i64* %788
  br label %inst_5821

inst_5842:                                        ; preds = %inst_583a
  %789 = add i64 %301, 3
  %790 = load i32, i32* @RDI_2296_56234d8dff90
  %791 = sub i32 %790, 32
  %792 = icmp eq i32 %791, 0
  %793 = zext i1 %792 to i8
  %794 = add i64 %789, 2
  %795 = sub i64 %794, 38
  %796 = icmp eq i8 %793, 0
  %797 = select i1 %796, i64 %794, i64 %795
  br i1 %792, label %inst_5821, label %inst_5847

inst_5847:                                        ; preds = %inst_5842
  %798 = zext i32 %790 to i64
  %799 = lshr i32 %790, 31
  %800 = add i64 %797, 3
  %801 = sub i32 %790, 35
  %802 = icmp ult i32 %790, 35
  %803 = zext i1 %802 to i8
  store i8 %803, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %804 = and i32 %801, 255
  %805 = call i32 @llvm.ctpop.i32(i32 %804) #13, !range !1234
  %806 = trunc i32 %805 to i8
  %807 = and i8 %806, 1
  %808 = xor i8 %807, 1
  store i8 %808, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %809 = xor i64 35, %798
  %810 = trunc i64 %809 to i32
  %811 = xor i32 %801, %810
  %812 = lshr i32 %811, 4
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  store i8 %814, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %815 = icmp eq i32 %801, 0
  %816 = zext i1 %815 to i8
  store i8 %816, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %817 = lshr i32 %801, 31
  %818 = trunc i32 %817 to i8
  store i8 %818, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %819 = xor i32 %817, %799
  %820 = add nuw nsw i32 %819, %799
  %821 = icmp eq i32 %820, 2
  %822 = zext i1 %821 to i8
  store i8 %822, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %823 = add i64 %800, 6
  %824 = add i64 %823, 377
  %825 = icmp eq i8 %816, 0
  %826 = select i1 %825, i64 %823, i64 %824
  br i1 %815, label %inst_59c9, label %inst_5850

inst_5850:                                        ; preds = %inst_5847
  %827 = add i64 %826, 3
  %828 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %828, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %829 = add i64 %827, 5
  %830 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %831 = add i64 %830, -8
  %832 = inttoptr i64 %831 to i64*
  store i64 %829, i64* %832
  store i64 %831, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %833 = call %struct.Memory* @ext_208388_ungetc(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %285)
  %834 = load i64*, i64** @RSP_2312_56234d8e7800
  %835 = load i64, i64* @RSP_2312_56234d8dffa8
  %836 = getelementptr i64, i64* %834, i32 2
  %837 = load i64, i64* %836
  store i64 %837, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %838 = getelementptr i64, i64* %834, i32 1
  %839 = load i64, i64* %838
  store i64 %839, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_6b58, i8** @RSI_2280_56234d8e76a0
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %840 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %840, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 %837, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %841 = add i64 %835, -8
  %842 = getelementptr i64, i64* %834, i32 -1
  store i64 ptrtoint (i8* @data_5876 to i64), i64* %842
  store i64 %841, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %843 = call %struct.Memory* @ext_208310_fscanf(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %833)
  %844 = load i32, i32* @RAX_2216_56234d8dff90
  %845 = zext i32 %844 to i64
  %846 = sub i32 %844, 1
  %847 = icmp ult i32 %844, 1
  %848 = zext i1 %847 to i8
  store i8 %848, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %849 = and i32 %846, 255
  %850 = call i32 @llvm.ctpop.i32(i32 %849) #13, !range !1234
  %851 = trunc i32 %850 to i8
  %852 = and i8 %851, 1
  %853 = xor i8 %852, 1
  store i8 %853, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %854 = xor i64 1, %845
  %855 = trunc i64 %854 to i32
  %856 = xor i32 %846, %855
  %857 = lshr i32 %856, 4
  %858 = trunc i32 %857 to i8
  %859 = and i8 %858, 1
  store i8 %859, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %860 = icmp eq i32 %846, 0
  %861 = zext i1 %860 to i8
  store i8 %861, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %862 = lshr i32 %846, 31
  %863 = trunc i32 %862 to i8
  store i8 %863, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %864 = lshr i32 %844, 31
  %865 = xor i32 %862, %864
  %866 = add nuw nsw i32 %865, %864
  %867 = icmp eq i32 %866, 2
  %868 = zext i1 %867 to i8
  store i8 %868, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %869 = icmp ne i8 %863, 0
  %870 = xor i1 %869, %867
  %871 = or i1 %860, %870
  %872 = select i1 %871, i64 ptrtoint (i8* @data_598d to i64), i64 ptrtoint (i8* @data_587f to i64)
  br i1 %871, label %inst_598d, label %inst_587f

inst_587f:                                        ; preds = %inst_5850
  %873 = add i64 %872, 3
  %874 = load i64, i64* @R13_2424_56234d8dffa8
  store i64 %874, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5882

inst_5899:                                        ; preds = %inst_5882
  %875 = add i64 %112, 2
  %876 = load i32, i32* @RAX_2216_56234d8dff90
  %877 = zext i32 %876 to i64
  %878 = and i64 %877, 4294967295
  %879 = add i64 %875, 5
  %880 = load i64*, i64** @RSP_2312_56234d8e7800
  %881 = getelementptr i64, i64* %880, i32 1
  %882 = load i64, i64* %881
  store i64 %882, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %883 = add i64 %879, 3
  %884 = trunc i64 %878 to i32
  %885 = zext i32 %884 to i64
  %886 = and i64 %885, 4294967295
  %887 = lshr i64 %886, 15
  %888 = lshr i64 %887, 1
  %889 = trunc i64 %888 to i32
  %890 = and i32 %889, 2147483647
  %891 = zext i32 %890 to i64
  %892 = add i64 %883, 5
  %893 = and i64 32896, %877
  %894 = trunc i64 %893 to i32
  %895 = icmp eq i32 %894, 0
  %896 = zext i1 %895 to i8
  %897 = add i64 %892, 3
  %898 = icmp eq i8 %896, 0
  %899 = select i1 %898, i64 %106, i64 %891
  %900 = and i64 %899, 4294967295
  %901 = add i64 %897, 4
  %902 = add i64 %87, 2
  %903 = add i64 %901, 4
  %904 = select i1 %898, i64 %87, i64 %902
  %905 = add i64 %903, 2
  %906 = trunc i64 %900 to i32
  %907 = zext i32 %906 to i64
  %908 = and i64 %907, 4294967295
  %909 = add i64 %905, 2
  %910 = trunc i64 %908 to i8
  %911 = trunc i32 %906 to i8
  %912 = add i8 %911, %910
  %913 = icmp ult i8 %912, %910
  %914 = icmp ult i8 %912, %911
  %915 = or i1 %913, %914
  %916 = zext i1 %915 to i8
  %917 = add i64 %909, 4
  %918 = zext i8 %916 to i64
  %919 = sub i64 %904, 3
  %920 = sub i64 %919, %918
  %921 = add i64 %917, 5
  %922 = getelementptr i64, i64* %880, i32 2
  %923 = load i64, i64* %922
  %924 = sub i64 %920, %923
  store i64 %924, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_58c0

inst_58d9:                                        ; preds = %inst_58c0
  %925 = add i64 %79, 2
  %926 = load i32, i32* @RAX_2216_56234d8dff90
  %927 = zext i32 %926 to i64
  %928 = and i64 %927, 4294967295
  %929 = add i64 %925, 5
  %930 = getelementptr i64, i64* %880, i32 3
  store i64 %924, i64* %930
  %931 = add i64 %929, 3
  %932 = trunc i64 %928 to i32
  %933 = zext i32 %932 to i64
  %934 = and i64 %933, 4294967295
  %935 = lshr i64 %934, 15
  %936 = lshr i64 %935, 1
  %937 = trunc i64 %936 to i32
  %938 = and i32 %937, 2147483647
  %939 = zext i32 %938 to i64
  %940 = add i64 %931, 5
  %941 = and i64 32896, %927
  %942 = trunc i64 %941 to i32
  %943 = icmp eq i32 %942, 0
  %944 = zext i1 %943 to i8
  %945 = add i64 %940, 3
  %946 = icmp eq i8 %944, 0
  %947 = select i1 %946, i64 %73, i64 %939
  %948 = and i64 %947, 4294967295
  %949 = add i64 %945, 4
  %950 = add i64 %54, 2
  store i64 %950, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %951 = add i64 %949, 2
  %952 = trunc i64 %948 to i32
  %953 = zext i32 %952 to i64
  %954 = and i64 %953, 4294967295
  %955 = add i64 %951, 4
  %956 = select i1 %946, i64 %54, i64 %950
  %957 = add i64 %955, 2
  %958 = trunc i64 %954 to i8
  %959 = trunc i32 %952 to i8
  %960 = add i8 %959, %958
  %961 = icmp ult i8 %960, %958
  %962 = icmp ult i8 %960, %959
  %963 = or i1 %961, %962
  %964 = zext i1 %963 to i8
  %965 = add i64 %957, 4
  %966 = zext i8 %964 to i64
  %967 = sub i64 %956, 3
  %968 = sub i64 %967, %966
  %969 = add i64 %965, 5
  %970 = load i64, i64* %881
  %971 = sub i64 %968, %970
  store i64 %971, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %972 = add i64 %969, 5
  %973 = load i64, i64* %880
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %974 = trunc i64 %973 to i32
  %975 = and i32 %974, 255
  %976 = call i32 @llvm.ctpop.i32(i32 %975) #13, !range !1234
  %977 = trunc i32 %976 to i8
  %978 = and i8 %977, 1
  %979 = xor i8 %978, 1
  store i8 %979, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %980 = icmp eq i64 %973, 0
  %981 = zext i1 %980 to i8
  store i8 %981, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %982 = lshr i64 %973, 63
  %983 = trunc i64 %982 to i8
  store i8 %983, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %984 = add i64 %972, 4
  %985 = add i64 %971, %924
  store i64 %985, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %986 = add i64 %984, 6
  %987 = add i64 %986, 235
  %988 = icmp eq i8 %981, 0
  %989 = select i1 %988, i64 %987, i64 %986
  %990 = add i64 %989, 4
  br i1 %988, label %inst_59fa, label %inst_590f

inst_59fa:                                        ; preds = %inst_58d9
  %991 = add i64 %973, %985
  store i64 %991, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %992 = icmp ult i64 %991, %985
  %993 = icmp ult i64 %991, %973
  %994 = or i1 %992, %993
  %995 = zext i1 %994 to i8
  store i8 %995, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %996 = trunc i64 %991 to i32
  %997 = and i32 %996, 255
  %998 = call i32 @llvm.ctpop.i32(i32 %997) #13, !range !1234
  %999 = trunc i32 %998 to i8
  %1000 = and i8 %999, 1
  %1001 = xor i8 %1000, 1
  store i8 %1001, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1002 = xor i64 %973, %985
  %1003 = xor i64 %1002, %991
  %1004 = lshr i64 %1003, 4
  %1005 = trunc i64 %1004 to i8
  %1006 = and i8 %1005, 1
  store i8 %1006, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1007 = icmp eq i64 %991, 0
  %1008 = zext i1 %1007 to i8
  store i8 %1008, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1009 = lshr i64 %991, 63
  %1010 = trunc i64 %1009 to i8
  store i8 %1010, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1011 = lshr i64 %985, 63
  %1012 = xor i64 %1009, %1011
  %1013 = xor i64 %1009, %982
  %1014 = add nuw nsw i64 %1012, %1013
  %1015 = icmp eq i64 %1014, 2
  %1016 = zext i1 %1015 to i8
  store i8 %1016, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1017 = add i64 %990, 3
  %1018 = load i64, i64* @R15_2456_56234d8dffa8
  store i64 %1018, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1019 = add i64 %1017, 4
  %1020 = add i64 %991, 2
  store i64 %1020, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %1021 = add i64 %1019, 4
  %1022 = add i64 %991, 3
  store i64 %1022, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1023 = add i64 %1021, 4
  store i64 %1020, i64* %880
  %1024 = add i64 %1023, 5
  %1025 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1026 = add i64 %1025, -8
  %1027 = inttoptr i64 %1026 to i64*
  store i64 %1024, i64* %1027
  store i64 %1026, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1028 = call %struct.Memory* @ext_2083a0_realloc(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %843)
  %1029 = load i64, i64* @RSP_2312_56234d8dffa8
  %1030 = add i64 %1029, 24
  %1031 = inttoptr i64 %1030 to i64*
  %1032 = load i64, i64* %1031
  store i64 %1032, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1033 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %1033, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5928

inst_590f:                                        ; preds = %inst_58d9
  %1034 = add i64 %985, 2
  store i64 %1034, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %1035 = add i64 %990, 4
  %1036 = add i64 %985, 3
  store i64 %1036, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1037 = add i64 %1035, 4
  store i64 %1034, i64* %880
  %1038 = add i64 %1037, 5
  %1039 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1040 = add i64 %1039, -8
  %1041 = inttoptr i64 %1040 to i64*
  store i64 %1038, i64* %1041
  store i64 %1040, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1042 = call %struct.Memory* @ext_208370_malloc(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %843)
  %1043 = load i64, i64* @RSP_2312_56234d8dffa8
  %1044 = add i64 %1043, 24
  %1045 = inttoptr i64 %1044 to i64*
  %1046 = load i64, i64* %1045
  store i64 %1046, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1047 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %1047, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5928

inst_5a1f:                                        ; preds = %inst_5928
  %1048 = add i64 %213, 3
  %1049 = load i64, i64* @R15_2456_56234d8dffa8
  store i64 %1049, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1050 = add i64 %1048, 7
  store i8* @data_6801, i8** @R15_2456_56234d8e76a0
  %1051 = add i64 %1050, 5
  %1052 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1053 = add i64 %1052, -8
  %1054 = inttoptr i64 %1053 to i64*
  store i64 %1051, i64* %1054
  store i64 %1053, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1055 = call %struct.Memory* @ext_208270_free(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %200)
  %1056 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %1056, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1057 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1058 = add i64 %1057, -8
  %1059 = inttoptr i64 %1058 to i64*
  store i64 ptrtoint (i8* @data_5a36 to i64), i64* %1059
  store i64 %1058, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1060 = call %struct.Memory* @sub_5a60(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1055)
  br label %inst_57cb

inst_5931:                                        ; preds = %inst_5928
  %1061 = add i64 %213, 4
  %1062 = load i64*, i64** @RSP_2312_56234d8e7800
  %1063 = load i64, i64* @RSP_2312_56234d8dffa8
  %1064 = load i64, i64* %1062
  %1065 = add i64 %1061, 7
  %1066 = add i64 %1065, 5
  %1067 = getelementptr i64, i64* %1062, i32 2
  %1068 = load i64, i64* %1067
  store i64 %1068, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1069 = add i64 %1066, 3
  %1070 = load i64, i64* @RDX_2264_56234d8dffa8
  %1071 = sub i64 -2, %1070
  %1072 = add i64 %1069, 4
  %1073 = add i64 1, %1070
  store i64 %1073, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1074 = add i64 %1072, 3
  %1075 = load i64, i64* @R13_2424_56234d8dffa8
  %1076 = sub i64 %1064, %1075
  store i64 %1076, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1077 = add i64 %1074, 3
  %1078 = add i64 %1076, %1071
  %1079 = lshr i64 %1078, 63
  %1080 = add i64 %1077, 3
  %1081 = add i64 %201, %1078
  store i64 %1081, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1082 = icmp ult i64 %1081, %1078
  %1083 = icmp ult i64 %1081, %201
  %1084 = or i1 %1082, %1083
  %1085 = zext i1 %1084 to i8
  store i8 %1085, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1086 = trunc i64 %1081 to i32
  %1087 = and i32 %1086, 255
  %1088 = call i32 @llvm.ctpop.i32(i32 %1087) #13, !range !1234
  %1089 = trunc i32 %1088 to i8
  %1090 = and i8 %1089, 1
  %1091 = xor i8 %1090, 1
  store i8 %1091, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1092 = xor i64 %201, %1078
  %1093 = xor i64 %1092, %1081
  %1094 = lshr i64 %1093, 4
  %1095 = trunc i64 %1094 to i8
  %1096 = and i8 %1095, 1
  store i8 %1096, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1097 = icmp eq i64 %1081, 0
  %1098 = zext i1 %1097 to i8
  store i8 %1098, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1099 = lshr i64 %1081, 63
  %1100 = trunc i64 %1099 to i8
  store i8 %1100, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1101 = xor i64 %1099, %1079
  %1102 = xor i64 %1099, %210
  %1103 = add nuw nsw i64 %1101, %1102
  %1104 = icmp eq i64 %1103, 2
  %1105 = zext i1 %1104 to i8
  store i8 %1105, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1106 = add i64 %1080, 5
  %1107 = add i64 %1063, -8
  %1108 = getelementptr i64, i64* %1062, i32 -1
  store i64 %1106, i64* %1108
  store i64 %1107, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1109 = call %struct.Memory* @ext_208360_memcpy(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %200)
  %1110 = load i64*, i64** @RSP_2312_56234d8e7800
  %1111 = load i64, i64* @RSP_2312_56234d8dffa8
  %1112 = getelementptr i64, i64* %1110, i32 1
  %1113 = load i64, i64* %1112
  store i64 %1113, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1114 = load i64, i64* @R12_2408_56234d8dffa8
  %1115 = load i64, i64* @R15_2456_56234d8dffa8
  %1116 = add i64 %1114, -1
  %1117 = add i64 %1116, %1115
  store i64 %1117, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1118 = load i64, i64* @R13_2424_56234d8dffa8
  %1119 = add i64 %1118, 1
  store i64 %1119, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 %1114, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1120 = add i64 %1111, -8
  %1121 = getelementptr i64, i64* %1110, i32 -1
  store i64 ptrtoint (i8* @data_596c to i64), i64* %1121
  store i64 %1120, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1122 = call %struct.Memory* @ext_208360_memcpy(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1109)
  %1123 = load i64*, i64** @R14_2440_56234d8e7800
  %1124 = getelementptr i64, i64* %1123, i32 1
  %1125 = load i64, i64* %1124
  store i64 %1125, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1126 = getelementptr i64, i64* %1123, i32 2
  %1127 = load i64, i64* %1126
  %1128 = sub i64 %1125, %1127
  %1129 = icmp ugt i64 %1127, %1125
  %1130 = zext i1 %1129 to i8
  store i8 %1130, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1131 = trunc i64 %1128 to i32
  %1132 = and i32 %1131, 255
  %1133 = call i32 @llvm.ctpop.i32(i32 %1132) #13, !range !1234
  %1134 = trunc i32 %1133 to i8
  %1135 = and i8 %1134, 1
  %1136 = xor i8 %1135, 1
  store i8 %1136, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1137 = xor i64 %1127, %1125
  %1138 = xor i64 %1137, %1128
  %1139 = lshr i64 %1138, 4
  %1140 = trunc i64 %1139 to i8
  %1141 = and i8 %1140, 1
  store i8 %1141, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1142 = icmp eq i64 %1128, 0
  %1143 = zext i1 %1142 to i8
  store i8 %1143, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1144 = lshr i64 %1128, 63
  %1145 = trunc i64 %1144 to i8
  store i8 %1145, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1146 = lshr i64 %1125, 63
  %1147 = lshr i64 %1127, 63
  %1148 = xor i64 %1147, %1146
  %1149 = xor i64 %1144, %1146
  %1150 = add nuw nsw i64 %1149, %1148
  %1151 = icmp eq i64 %1150, 2
  %1152 = zext i1 %1151 to i8
  store i8 %1152, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1153 = icmp eq i8 %1130, 0
  %1154 = select i1 %1153, i64 ptrtoint (i8* @data_597a to i64), i64 ptrtoint (i8* @data_582f to i64)
  br i1 %1129, label %inst_582f, label %inst_597a

inst_59a2:                                        ; preds = %inst_598d
  %1155 = load i64, i64* @R15_2456_56234d8dffa8
  %1156 = add i64 %378, %1155
  %1157 = inttoptr i64 %1156 to i8*
  store i8 0, i8* %1157
  br label %inst_57cb

inst_59c5:                                        ; preds = %inst_59c0
  %1158 = add i64 %316, 2
  %1159 = load i8, i8* @RDX_2264_56234d8dff60
  %1160 = icmp eq i8 %1159, 0
  %1161 = zext i1 %1160 to i8
  %1162 = add i64 %1158, 2
  %1163 = add i64 %1162, 39
  %1164 = icmp eq i8 %1161, 0
  %1165 = select i1 %1164, i64 %1162, i64 %1163
  br i1 %1160, label %inst_59f0, label %inst_59c9

inst_59b0:                                        ; preds = %inst_59c9
  %1166 = add i64 %358, 4
  %1167 = add i64 %326, 1
  %1168 = add i64 %1166, 4
  store i64 %1167, i64* %325
  %1169 = add i64 %1168, 3
  %1170 = inttoptr i64 %326 to i8*
  %1171 = load i8, i8* %1170
  %1172 = zext i8 %1171 to i64
  store i64 %1172, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1173 = add i64 %1169, 5
  store i64 1, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_59c0

inst_59d3:                                        ; preds = %inst_59c9
  %1174 = add i64 %358, 3
  store i64 %324, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1175 = add i64 %1174, 5
  %1176 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1177 = add i64 %1176, -8
  %1178 = inttoptr i64 %1177 to i64*
  store i64 %1175, i64* %1178
  store i64 %1177, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1179 = call %struct.Memory* @ext_208260___uflow(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %321)
  %1180 = load i32, i32* @RAX_2216_56234d8dff90
  %1181 = sub i32 %1180, -1
  %1182 = icmp eq i32 %1181, 0
  %1183 = zext i1 %1182 to i8
  %1184 = icmp eq i8 %1183, 0
  %1185 = zext i1 %1184 to i8
  store i8 %1185, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  br label %inst_59c0

inst_5a43:                                        ; preds = %inst_5a3b
  %1186 = add i64 %689, 14
  store i64 %1186, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5725
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_4ba0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_4ba0:
  %0 = load i64, i64* @R13_2424_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @R12_2408_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i32, i32* @RDI_2296_56234d8dff90
  %8 = zext i32 %7 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %10 = load i64, i64* @RBP_2328_56234d8dffa8
  %11 = add i64 %5, -8
  %12 = getelementptr i64, i64* %6, i32 -1
  store i64 %10, i64* %12
  %13 = load i64, i64* @RBX_2232_56234d8dffa8
  %14 = add i64 %11, -8
  %15 = getelementptr i64, i64* %12, i32 -1
  store i64 %13, i64* %15
  %16 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %16, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %17 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %17, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %18 = sub i64 %14, 8
  store i64 %18, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %19 = icmp ult i64 %14, 8
  %20 = zext i1 %19 to i8
  store i8 %20, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %21 = trunc i64 %18 to i32
  %22 = and i32 %21, 255
  %23 = call i32 @llvm.ctpop.i32(i32 %22) #13, !range !1234
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  store i8 %26, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %27 = xor i64 8, %14
  %28 = xor i64 %27, %18
  %29 = lshr i64 %28, 4
  %30 = trunc i64 %29 to i8
  %31 = and i8 %30, 1
  store i8 %31, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %32 = icmp eq i64 %18, 0
  %33 = zext i1 %32 to i8
  store i8 %33, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %34 = lshr i64 %18, 63
  %35 = trunc i64 %34 to i8
  store i8 %35, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %36 = lshr i64 %14, 63
  %37 = xor i64 %34, %36
  %38 = add nuw nsw i64 %37, %36
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  store i8 %40, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  br label %inst_4bb8

inst_4bf0:                                        ; preds = %inst_4bdf, %inst_4bda, %inst_4bb8
  %41 = phi %struct.Memory* [ %97, %inst_4bb8 ], [ %113, %inst_4bda ], [ %113, %inst_4bdf ]
  %42 = load i64*, i64** @RSP_2312_56234d8e7800
  %43 = load i64, i64* @RSP_2312_56234d8dffa8
  %44 = add i64 8, %43
  %45 = getelementptr i64, i64* %42, i32 1
  %46 = icmp ult i64 %44, %43
  %47 = icmp ult i64 %44, 8
  %48 = or i1 %46, %47
  %49 = zext i1 %48 to i8
  store i8 %49, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #13, !range !1234
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  store i8 %55, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %56 = xor i64 8, %43
  %57 = xor i64 %56, %44
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  store i8 %60, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %63 = lshr i64 %44, 63
  %64 = trunc i64 %63 to i8
  store i8 %64, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %65 = lshr i64 %43, 63
  %66 = xor i64 %63, %65
  %67 = add nuw nsw i64 %66, %63
  %68 = icmp eq i64 %67, 2
  %69 = zext i1 %68 to i8
  store i8 %69, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %70 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %70, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %71 = add i64 %44, 8
  %72 = getelementptr i64, i64* %45, i32 1
  %73 = load i64, i64* %45
  store i64 %73, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %74 = add i64 %71, 8
  %75 = getelementptr i64, i64* %72, i32 1
  %76 = load i64, i64* %72
  store i64 %76, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %77 = add i64 %74, 8
  %78 = load i64, i64* %75
  store i64 %78, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %79 = add i64 %77, 8
  %80 = getelementptr i64, i64* %75, i32 1
  %81 = load i64, i64* %80
  store i64 %81, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %82 = add i64 %79, 8
  store i64 %82, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %41

inst_4bb8:                                        ; preds = %inst_4be8, %inst_4bce, %inst_4ba0
  %83 = phi i64 [ ptrtoint (i8* @data_4bb8 to i64), %inst_4ba0 ], [ %141, %inst_4bce ], [ undef, %inst_4be8 ]
  %84 = phi %struct.Memory* [ %memory, %inst_4ba0 ], [ %113, %inst_4bce ], [ %113, %inst_4be8 ]
  %85 = add i64 %83, 3
  %86 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %86, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %87 = add i64 %85, 3
  %88 = load i64, i64* @R12_2408_56234d8dffa8
  store i64 %88, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %89 = add i64 %87, 3
  %90 = load i32, i32* @R13_2424_56234d8dff90
  %91 = zext i32 %90 to i64
  %92 = and i64 %91, 4294967295
  store i64 %92, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %93 = add i64 %89, 5
  %94 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %95 = add i64 %94, -8
  %96 = inttoptr i64 %95 to i64*
  store i64 %93, i64* %96
  store i64 %95, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %97 = call %struct.Memory* @ext_2082a0_write(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %84)
  %98 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %99 = trunc i64 %98 to i32
  %100 = and i32 %99, 255
  %101 = call i32 @llvm.ctpop.i32(i32 %100) #13, !range !1234
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  store i8 %104, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %105 = icmp eq i64 %98, 0
  %106 = zext i1 %105 to i8
  store i8 %106, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %107 = lshr i64 %98, 63
  %108 = trunc i64 %107 to i8
  store i8 %108, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 %98, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %inst_4bf0, label %inst_4bce

inst_4bce:                                        ; preds = %inst_4bb8
  %110 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 add (i64 ptrtoint (i8* @data_4bce to i64), i64 5), i64* %112
  store i64 %111, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %113 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %97)
  %114 = load i32*, i32** @RAX_2216_56234d8ed000
  %115 = load i32, i32* %114
  %116 = zext i32 %115 to i64
  store i64 %116, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %117 = sub i32 %115, 4
  %118 = icmp ult i32 %115, 4
  %119 = zext i1 %118 to i8
  store i8 %119, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %120 = and i32 %117, 255
  %121 = call i32 @llvm.ctpop.i32(i32 %120) #13, !range !1234
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  %124 = xor i8 %123, 1
  store i8 %124, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %125 = xor i64 4, %116
  %126 = trunc i64 %125 to i32
  %127 = xor i32 %117, %126
  %128 = lshr i32 %127, 4
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  store i8 %130, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %131 = icmp eq i32 %117, 0
  %132 = zext i1 %131 to i8
  store i8 %132, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %133 = lshr i32 %117, 31
  %134 = trunc i32 %133 to i8
  store i8 %134, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %135 = lshr i32 %115, 31
  %136 = xor i32 %133, %135
  %137 = add nuw nsw i32 %136, %135
  %138 = icmp eq i32 %137, 2
  %139 = zext i1 %138 to i8
  store i8 %139, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %140 = icmp eq i8 %132, 0
  %141 = select i1 %140, i64 ptrtoint (i8* @data_4bda to i64), i64 ptrtoint (i8* @data_4bb8 to i64)
  br i1 %131, label %inst_4bb8, label %inst_4bda

inst_4bda:                                        ; preds = %inst_4bce
  %142 = sub i32 %115, 22
  %143 = icmp eq i32 %142, 0
  %144 = zext i1 %143 to i8
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %inst_4bf0, label %inst_4bdf

inst_4bdf:                                        ; preds = %inst_4bda
  %146 = load i64, i64* @RBX_2232_56234d8dffa8
  %147 = sub i64 %146, 2147475456
  %148 = icmp ult i64 %146, 2147475456
  %149 = zext i1 %148 to i8
  store i8 %149, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 255
  %152 = call i32 @llvm.ctpop.i32(i32 %151) #13, !range !1234
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  store i8 %155, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %156 = xor i64 2147475456, %146
  %157 = xor i64 %156, %147
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  store i8 %160, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %161 = icmp eq i64 %147, 0
  %162 = zext i1 %161 to i8
  store i8 %162, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %163 = lshr i64 %147, 63
  %164 = trunc i64 %163 to i8
  store i8 %164, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %165 = lshr i64 %146, 63
  %166 = xor i64 %163, %165
  %167 = add nuw nsw i64 %166, %165
  %168 = icmp eq i64 %167, 2
  %169 = zext i1 %168 to i8
  store i8 %169, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %170 = or i8 %162, %149
  %171 = icmp ne i8 %170, 0
  br i1 %171, label %inst_4bf0, label %inst_4be8

inst_4be8:                                        ; preds = %inst_4bdf
  store i64 2147475456, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_4bb8
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5270(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
  br label %inst_5270

inst_530a:                                        ; preds = %inst_5336, %inst_52ff
  %1 = phi %struct.Memory* [ %15, %inst_5336 ], [ %116, %inst_52ff ]
  %2 = load i64*, i64** @RSI_2280_56234d8e7800
  %3 = load i64, i64* @RCX_2248_56234d8dffa8
  store i64 %3, i64* %2
  %4 = load i64, i64* @R9_2360_56234d8dffa8
  %5 = zext i64 %3 to i128
  %6 = zext i64 %4 to i128
  %7 = mul i128 %6, %5
  %8 = trunc i128 %7 to i64
  store i64 %8, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 %8, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5270

inst_5290:                                        ; preds = %inst_528b, %inst_527e
  %9 = load i64*, i64** @RSP_2312_56234d8e7800
  %10 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %11 = add i64 %10, 8
  %12 = load i64, i64* %9
  store i64 %12, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %13 = add i64 %11, 8
  store i64 %13, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %148

inst_5325:                                        ; preds = %inst_5320, %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit2
  %14 = phi i64 [ undef, %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit2 ], [ %232, %inst_5320 ]
  %15 = phi %struct.Memory* [ %71, %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit2 ], [ %116, %inst_5320 ]
  %16 = add i64 %14, 3
  %17 = load i64, i64* @RCX_2248_56234d8dffa8
  %18 = add i64 %16, 3
  %19 = load i64, i64* @R9_2360_56234d8dffa8
  %20 = zext i64 %17 to i128
  %21 = zext i64 %19 to i128
  %22 = mul nuw i128 %20, %21
  %23 = trunc i128 %22 to i64
  store i64 %23, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %24 = icmp ugt i128 %22, 18446744073709551615
  %25 = zext i1 %24 to i8
  %26 = add i64 %18, 3
  %27 = add i64 %26, 3
  %28 = lshr i64 %23, 63
  %29 = trunc i64 %28 to i8
  %30 = add i64 %27, 3
  %31 = zext i8 %25 to i64
  %32 = and i64 %31, 255
  store i64 %32, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %33 = add i64 %30, 2
  %34 = add i64 %33, 5
  %35 = icmp eq i8 %29, 0
  %36 = select i1 %35, i64 %33, i64 %34
  %37 = icmp eq i8 %29, 1
  br i1 %37, label %inst_533b, label %inst_5336

inst_533b:                                        ; preds = %inst_5336, %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit, %inst_5325
  %38 = phi i64 [ %36, %inst_5325 ], [ %264, %inst_5336 ], [ %254, %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit ]
  %39 = phi %struct.Memory* [ %15, %inst_5325 ], [ %15, %inst_5336 ], [ %116, %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit ]
  %40 = add i64 %38, 4
  %41 = load i64, i64* @RSP_2312_56234d8dffa8
  %42 = sub i64 %41, 8
  %43 = inttoptr i64 %42 to i64*
  %44 = icmp ult i64 %41, 8
  %45 = zext i1 %44 to i8
  store i8 %45, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %46 = trunc i64 %42 to i32
  %47 = and i32 %46, 255
  %48 = call i32 @llvm.ctpop.i32(i32 %47) #13, !range !1234
  %49 = trunc i32 %48 to i8
  %50 = and i8 %49, 1
  %51 = xor i8 %50, 1
  store i8 %51, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %52 = xor i64 8, %41
  %53 = xor i64 %52, %42
  %54 = lshr i64 %53, 4
  %55 = trunc i64 %54 to i8
  %56 = and i8 %55, 1
  store i8 %56, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %57 = icmp eq i64 %42, 0
  %58 = zext i1 %57 to i8
  store i8 %58, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %59 = lshr i64 %42, 63
  %60 = trunc i64 %59 to i8
  store i8 %60, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %61 = lshr i64 %41, 63
  %62 = xor i64 %59, %61
  %63 = add nuw nsw i64 %62, %61
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  store i8 %65, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %66 = add i64 %40, 5
  %67 = add i64 %42, -8
  %68 = getelementptr i64, i64* %43, i32 -1
  store i64 %66, i64* %68
  store i64 %67, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %69 = call %struct.Memory* @sub_5460(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %39)
  br label %inst_5348

inst_5348:                                        ; preds = %inst_5320, %inst_533b
  %70 = phi i64 [ %232, %inst_5320 ], [ ptrtoint (i8* @data_5348 to i64), %inst_533b ]
  %71 = phi %struct.Memory* [ %116, %inst_5320 ], [ %69, %inst_533b ]
  %72 = add i64 %70, 2
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %73 = add i64 %72, 5
  store i64 128, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %74 = add i64 %73, 3
  store i64 0, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %75 = add i64 %74, 3
  %76 = load i64, i64* @R9_2360_56234d8dffa8
  store i64 %75, i64* @RIP_2472_56234d8dffa8, align 8, !tbaa !1216
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit2

78:                                               ; preds = %inst_5348
  call void @abort() #13
  unreachable

_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit2: ; preds = %inst_5348
  %79 = zext i64 %76 to i128
  %80 = udiv i128 128, %79
  %81 = trunc i128 %80 to i64
  %82 = icmp eq i64 %81, 0
  %83 = zext i1 %82 to i8
  store i8 %83, i8* @R8_2344_56234d8dff60, align 1, !tbaa !1240
  %84 = load i64, i64* @R8_2344_56234d8dffa8
  %85 = add i64 %81, %84
  store i64 %85, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5325

inst_52cb:                                        ; preds = %inst_52c1, %inst_52a1
  %86 = phi i64 [ %214, %inst_52a1 ], [ %225, %inst_52c1 ]
  %87 = add i64 %86, 4
  %88 = load i64, i64* @RSP_2312_56234d8dffa8
  %89 = sub i64 %88, 8
  %90 = inttoptr i64 %89 to i64*
  %91 = icmp ult i64 %88, 8
  %92 = zext i1 %91 to i8
  store i8 %92, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %93 = trunc i64 %89 to i32
  %94 = and i32 %93, 255
  %95 = call i32 @llvm.ctpop.i32(i32 %94) #13, !range !1234
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %99 = xor i64 8, %88
  %100 = xor i64 %99, %89
  %101 = lshr i64 %100, 4
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  store i8 %103, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %104 = icmp eq i64 %89, 0
  %105 = zext i1 %104 to i8
  store i8 %105, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %106 = lshr i64 %89, 63
  %107 = trunc i64 %106 to i8
  store i8 %107, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %108 = lshr i64 %88, 63
  %109 = xor i64 %106, %108
  %110 = add nuw nsw i64 %109, %108
  %111 = icmp eq i64 %110, 2
  %112 = zext i1 %111 to i8
  store i8 %112, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %113 = add i64 %87, 5
  %114 = add i64 %89, -8
  %115 = getelementptr i64, i64* %90, i32 -1
  store i64 %113, i64* %115
  store i64 %114, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %116 = call %struct.Memory* @sub_5460(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %200)
  %117 = load i64, i64* @RDI_2296_56234d8dffa8
  %118 = icmp eq i64 %117, 0
  %119 = zext i1 %118 to i8
  %120 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %120, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %121 = load i64*, i64** @RSI_2280_56234d8e7800
  %122 = load i64, i64* %121
  store i64 %122, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %123 = icmp eq i8 %119, 0
  %124 = select i1 %123, i64 ptrtoint (i8* @data_52eb to i64), i64 ptrtoint (i8* @data_5320 to i64)
  br i1 %118, label %inst_5320, label %inst_52eb

inst_5270:                                        ; preds = %inst_52c1, %inst_530a, %0
  %125 = phi %struct.Memory* [ %memory, %0 ], [ %1, %inst_530a ], [ %200, %inst_52c1 ]
  %126 = load i64, i64* @RSI_2280_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %127 = trunc i64 %126 to i32
  %128 = and i32 %127, 255
  %129 = call i32 @llvm.ctpop.i32(i32 %128) #13, !range !1234
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  %132 = xor i8 %131, 1
  store i8 %132, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %133 = icmp eq i64 %126, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %135 = lshr i64 %126, 63
  %136 = trunc i64 %135 to i8
  store i8 %136, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %137 = load i64, i64* @RBX_2232_56234d8dffa8
  %138 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  %141 = getelementptr i64, i64* %140, i32 -1
  store i64 %137, i64* %140
  store i64 %126, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %142 = icmp eq i8 %134, 0
  %143 = select i1 %142, i64 add (i64 ptrtoint (void ()* @callback_sub_5270 to i64), i64 14), i64 add (i64 ptrtoint (void ()* @callback_sub_5270 to i64), i64 9)
  br i1 %142, label %inst_527e, label %inst_5279

inst_527e:                                        ; preds = %inst_5279, %inst_5270
  %144 = phi i64 [ %143, %inst_5270 ], [ %176, %inst_5279 ]
  %145 = add i64 %144, 3
  %146 = add i64 %145, 5
  %147 = add i64 %139, -8
  store i64 %146, i64* %141
  store i64 %147, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %148 = call %struct.Memory* @ext_2083a0_realloc(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %125)
  %149 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %150 = trunc i64 %149 to i32
  %151 = and i32 %150, 255
  %152 = call i32 @llvm.ctpop.i32(i32 %151) #13, !range !1234
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  store i8 %155, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %156 = icmp eq i64 %149, 0
  %157 = zext i1 %156 to i8
  store i8 %157, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %158 = lshr i64 %149, 63
  %159 = trunc i64 %158 to i8
  store i8 %159, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %160 = icmp eq i8 %157, 0
  br i1 %160, label %inst_5290, label %inst_528b

inst_5279:                                        ; preds = %inst_5270
  %161 = add i64 %143, 3
  %162 = load i64, i64* @RDI_2296_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %163 = trunc i64 %162 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #13, !range !1234
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %169 = icmp eq i64 %162, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %171 = lshr i64 %162, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %173 = add i64 %161, 2
  %174 = add i64 %173, 26
  %175 = icmp eq i8 %170, 0
  %176 = select i1 %175, i64 %174, i64 %173
  br i1 %175, label %inst_5298, label %inst_527e

inst_5298:                                        ; preds = %inst_5279
  %177 = add i64 %176, 5
  %178 = add i64 %139, -8
  store i64 %177, i64* %141
  store i64 %178, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %179 = call %struct.Memory* @ext_208270_free(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %125)
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %180 = load i64*, i64** @RSP_2312_56234d8e7800
  %181 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %182 = add i64 %181, 8
  %183 = load i64, i64* %180
  store i64 %183, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %184 = add i64 %182, 8
  store i64 %184, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %179

inst_528b:                                        ; preds = %inst_527e
  %185 = load i64, i64* @RBX_2232_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %186 = trunc i64 %185 to i32
  %187 = and i32 %186, 255
  %188 = call i32 @llvm.ctpop.i32(i32 %187) #13, !range !1234
  %189 = trunc i32 %188 to i8
  %190 = and i8 %189, 1
  %191 = xor i8 %190, 1
  store i8 %191, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %192 = icmp eq i64 %185, 0
  %193 = zext i1 %192 to i8
  store i8 %193, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %194 = lshr i64 %185, 63
  %195 = trunc i64 %194 to i8
  store i8 %195, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %196 = icmp eq i8 %193, 0
  br i1 %196, label %inst_52a1, label %inst_5290

inst_52a1:                                        ; preds = %inst_528b
  %197 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %198 = add i64 %197, -8
  %199 = inttoptr i64 %198 to i64*
  store i64 add (i64 ptrtoint (i8* @data_528b to i64), i64 27), i64* %199
  store i64 %198, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %200 = call %struct.Memory* @sub_5460(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %148)
  %201 = load i64, i64* @RSI_2280_56234d8dffa8
  %202 = load i64, i64* @RDX_2264_56234d8dffa8
  %203 = zext i64 %201 to i128
  %204 = zext i64 %202 to i128
  %205 = mul nuw i128 %203, %204
  %206 = trunc i128 %205 to i64
  %207 = lshr i128 %205, 64
  %208 = trunc i128 %207 to i64
  store i64 %206, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 %208, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %209 = icmp ugt i128 %205, 18446744073709551615
  %210 = zext i1 %209 to i8
  store i64 %206, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 %210, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %211 = lshr i64 %206, 63
  %212 = trunc i64 %211 to i8
  %213 = icmp eq i8 %212, 0
  %214 = select i1 %213, i64 ptrtoint (i8* @data_52c1 to i64), i64 ptrtoint (i8* @data_52cb to i64)
  %215 = icmp eq i8 %212, 1
  br i1 %215, label %inst_52cb, label %inst_52c1

inst_52c1:                                        ; preds = %inst_52a1
  %216 = add i64 %214, 3
  %217 = zext i8 %210 to i64
  %218 = and i64 %217, 255
  store i64 %218, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %219 = add i64 %216, 3
  %220 = icmp eq i64 %218, 0
  %221 = zext i1 %220 to i8
  %222 = add i64 %219, 2
  %223 = add i64 %222, 2
  %224 = icmp eq i8 %221, 0
  %225 = select i1 %224, i64 %223, i64 %222
  br i1 %224, label %inst_52cb, label %inst_5270

inst_5320:                                        ; preds = %inst_52cb
  %226 = add i64 %124, 3
  %227 = icmp eq i64 %122, 0
  %228 = zext i1 %227 to i8
  %229 = add i64 %226, 2
  %230 = add i64 %229, 35
  %231 = icmp eq i8 %228, 0
  %232 = select i1 %231, i64 %229, i64 %230
  br i1 %227, label %inst_5348, label %inst_5325

inst_52eb:                                        ; preds = %inst_52cb
  %233 = add i64 %124, 2
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %234 = add i64 %233, 10
  store i64 6148914691236517204, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %235 = add i64 %234, 3
  store i64 %235, i64* @RIP_2472_56234d8dffa8, align 8, !tbaa !1216
  %236 = icmp eq i64 %120, 0
  br i1 %236, label %237, label %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit

237:                                              ; preds = %inst_52eb
  call void @abort() #13
  unreachable

_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit: ; preds = %inst_52eb
  %238 = zext i64 %120 to i128
  %239 = udiv i128 6148914691236517204, %238
  %240 = mul i128 %239, %238
  %241 = sub i128 6148914691236517204, %240
  %242 = trunc i128 %241 to i64
  %243 = trunc i128 %239 to i64
  store i64 %243, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 %242, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %244 = add i64 %235, 3
  %245 = sub i64 %243, %122
  %246 = icmp ult i64 %243, %122
  %247 = zext i1 %246 to i8
  %248 = icmp eq i64 %245, 0
  %249 = zext i1 %248 to i8
  %250 = add i64 %244, 2
  %251 = add i64 %250, 60
  %252 = or i8 %249, %247
  %253 = icmp ne i8 %252, 0
  %254 = select i1 %253, i64 %251, i64 %250
  br i1 %253, label %inst_533b, label %inst_52ff

inst_52ff:                                        ; preds = %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit
  %255 = lshr i64 %122, 1
  store i64 %255, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %256 = add i64 %255, 1
  %257 = add i64 %256, %122
  store i64 %257, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_530a

inst_5336:                                        ; preds = %inst_5325
  %258 = add i64 %36, 3
  %259 = icmp eq i64 %32, 0
  %260 = zext i1 %259 to i8
  %261 = add i64 %258, 2
  %262 = sub i64 %261, 49
  %263 = icmp eq i8 %260, 0
  %264 = select i1 %263, i64 %261, i64 %262
  br i1 %259, label %inst_530a, label %inst_533b
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_4850(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_4850:
  %0 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1 = load i32, i32* @RDI_2296_56234d8dff90
  %2 = zext i32 %1 to i64
  %3 = and i64 %2, 4294967295
  store i64 %3, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %4 = call %struct.Memory* @sub_4730(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_47c0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_47c0:
  %0 = load i64, i64* @RSP_2312_56234d8dffa8
  %1 = sub i64 %0, 72
  %2 = inttoptr i64 %1 to i64*
  store i64 %1, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %3 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %3, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %4 = load i64, i64* @RCX_2248_56234d8dffa8
  store i64 %4, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %5 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %6 = add i64 %5, 40
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7
  %9 = getelementptr i64, i64* %2, i32 7
  store i64 %8, i64* %9
  store i64 0, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %10 = load i32, i32* @RSI_2280_56234d8dff90
  %11 = zext i32 %10 to i64
  %12 = sub i32 %10, 10
  %13 = icmp ult i32 %10, 10
  %14 = zext i1 %13 to i8
  store i8 %14, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %15 = and i32 %12, 255
  %16 = call i32 @llvm.ctpop.i32(i32 %15) #13, !range !1234
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %20 = xor i64 10, %11
  %21 = trunc i64 %20 to i32
  %22 = xor i32 %12, %21
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %26 = icmp eq i32 %12, 0
  %27 = zext i1 %26 to i8
  store i8 %27, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %28 = lshr i32 %12, 31
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %30 = lshr i32 %10, 31
  %31 = xor i32 %28, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  store i8 %34, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %35 = icmp eq i8 %27, 0
  %36 = select i1 %35, i64 ptrtoint (i8* @data_47df to i64), i64 ptrtoint (i8* @data_4840 to i64)
  br i1 %26, label %inst_4840, label %inst_47df

inst_4845:                                        ; preds = %inst_47df, %inst_4840
  %37 = phi i64 [ ptrtoint (i8* @data_4845 to i64), %inst_4840 ], [ %99, %inst_47df ]
  %38 = phi %struct.Memory* [ %48, %inst_4840 ], [ %78, %inst_47df ]
  %39 = add i64 %37, 5
  %40 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %39, i64* %42
  store i64 %41, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %43 = call %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %38)
  ret %struct.Memory* %43

inst_4840:                                        ; preds = %inst_47c0
  %44 = add i64 %36, 5
  %45 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47
  store i64 %46, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %48 = call %struct.Memory* @ext_208278_abort(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  br label %inst_4845

inst_47df:                                        ; preds = %inst_47c0
  %49 = inttoptr i64 %1 to i32*
  %50 = add i64 %36, 3
  store i32 %10, i32* %49
  %51 = add i64 %50, 3
  store i64 %1, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %52 = add i64 %51, 3
  store i64 %3, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %53 = add i64 %52, 9
  %54 = bitcast i64* %2 to i8*
  %55 = getelementptr i8, i8* %54, i32 4
  %56 = bitcast i8* %55 to i64*
  store i64 0, i64* %56
  %57 = add i64 %53, 9
  %58 = getelementptr i8, i8* %54, i32 12
  %59 = bitcast i8* %58 to i64*
  store i64 0, i64* %59
  %60 = add i64 %57, 9
  %61 = getelementptr i8, i8* %54, i32 20
  %62 = bitcast i8* %61 to i64*
  store i64 0, i64* %62
  %63 = add i64 %60, 9
  %64 = getelementptr i8, i8* %54, i32 28
  %65 = bitcast i8* %64 to i64*
  store i64 0, i64* %65
  %66 = add i64 %63, 9
  %67 = getelementptr i8, i8* %54, i32 36
  %68 = bitcast i8* %67 to i64*
  store i64 0, i64* %68
  %69 = add i64 %66, 9
  %70 = getelementptr i8, i8* %54, i32 44
  %71 = bitcast i8* %70 to i64*
  store i64 0, i64* %71
  %72 = add i64 %69, 8
  %73 = getelementptr i32, i32* %49, i32 13
  store i32 0, i32* %73
  %74 = add i64 %72, 5
  %75 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77
  store i64 %76, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %78 = call %struct.Memory* @sub_41e0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %79 = load i64*, i64** @RSP_2312_56234d8e7800
  %80 = load i64, i64* @RSP_2312_56234d8dffa8
  %81 = getelementptr i64, i64* %79, i32 7
  %82 = load i64, i64* %81
  %83 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %84 = add i64 %83, 40
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  %87 = xor i64 %86, %82
  store i64 %87, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %88 = trunc i64 %87 to i32
  %89 = and i32 %88, 255
  %90 = call i32 @llvm.ctpop.i32(i32 %89) #13, !range !1234
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %94 = icmp eq i64 %87, 0
  %95 = zext i1 %94 to i8
  store i8 %95, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %96 = lshr i64 %87, 63
  %97 = trunc i64 %96 to i8
  store i8 %97, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %98 = icmp eq i8 %95, 0
  %99 = select i1 %98, i64 ptrtoint (i8* @data_4845 to i64), i64 ptrtoint (i8* @data_483b to i64)
  br i1 %98, label %inst_4845, label %inst_483b

inst_483b:                                        ; preds = %inst_47df
  %100 = add i64 72, %80
  %101 = icmp ult i64 %100, %80
  %102 = icmp ult i64 %100, 72
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  store i8 %104, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %105 = trunc i64 %100 to i32
  %106 = and i32 %105, 255
  %107 = call i32 @llvm.ctpop.i32(i32 %106) #13, !range !1234
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %111 = xor i64 72, %80
  %112 = xor i64 %111, %100
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %116 = icmp eq i64 %100, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %118 = lshr i64 %100, 63
  %119 = trunc i64 %118 to i8
  store i8 %119, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %120 = lshr i64 %80, 63
  %121 = xor i64 %118, %120
  %122 = add nuw nsw i64 %121, %118
  %123 = icmp eq i64 %122, 2
  %124 = zext i1 %123 to i8
  store i8 %124, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %125 = add i64 %100, 8
  store i64 %125, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_4730(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_4730:
  %0 = load i64, i64* @RSP_2312_56234d8dffa8
  %1 = sub i64 %0, 72
  %2 = inttoptr i64 %1 to i64*
  store i64 %1, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %3 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %3, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %4 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %5 = add i64 %4, 40
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  %8 = getelementptr i64, i64* %2, i32 7
  store i64 %7, i64* %8
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %9 = load i32, i32* @RSI_2280_56234d8dff90
  %10 = zext i32 %9 to i64
  %11 = sub i32 %9, 10
  %12 = icmp ult i32 %9, 10
  %13 = zext i1 %12 to i8
  store i8 %13, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %14 = and i32 %11, 255
  %15 = call i32 @llvm.ctpop.i32(i32 %14) #13, !range !1234
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %19 = xor i64 10, %10
  %20 = trunc i64 %19 to i32
  %21 = xor i32 %11, %20
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  store i8 %24, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %25 = icmp eq i32 %11, 0
  %26 = zext i1 %25 to i8
  store i8 %26, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %27 = lshr i32 %11, 31
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %29 = lshr i32 %9, 31
  %30 = xor i32 %27, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  store i8 %33, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %34 = icmp eq i8 %26, 0
  %35 = select i1 %34, i64 ptrtoint (i8* @data_474c to i64), i64 ptrtoint (i8* @data_47b4 to i64)
  br i1 %25, label %inst_47b4, label %inst_474c

inst_47b9:                                        ; preds = %inst_474c, %inst_47b4
  %36 = phi i64 [ ptrtoint (i8* @data_47b9 to i64), %inst_47b4 ], [ %99, %inst_474c ]
  %37 = phi %struct.Memory* [ %47, %inst_47b4 ], [ %78, %inst_474c ]
  %38 = add i64 %36, 5
  %39 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %38, i64* %41
  store i64 %40, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %42 = call %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %37)
  ret %struct.Memory* %42

inst_47b4:                                        ; preds = %inst_4730
  %43 = add i64 %35, 5
  %44 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %43, i64* %46
  store i64 %45, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %47 = call %struct.Memory* @ext_208278_abort(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  br label %inst_47b9

inst_474c:                                        ; preds = %inst_4730
  %48 = inttoptr i64 %1 to i32*
  %49 = add i64 %35, 3
  store i32 %9, i32* %48
  %50 = add i64 %49, 3
  store i64 %1, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %51 = add i64 %50, 7
  store i64 -1, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %52 = add i64 %51, 3
  store i64 %3, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %53 = add i64 %52, 9
  %54 = bitcast i64* %2 to i8*
  %55 = getelementptr i8, i8* %54, i32 4
  %56 = bitcast i8* %55 to i64*
  store i64 0, i64* %56
  %57 = add i64 %53, 9
  %58 = getelementptr i8, i8* %54, i32 12
  %59 = bitcast i8* %58 to i64*
  store i64 0, i64* %59
  %60 = add i64 %57, 9
  %61 = getelementptr i8, i8* %54, i32 20
  %62 = bitcast i8* %61 to i64*
  store i64 0, i64* %62
  %63 = add i64 %60, 9
  %64 = getelementptr i8, i8* %54, i32 28
  %65 = bitcast i8* %64 to i64*
  store i64 0, i64* %65
  %66 = add i64 %63, 9
  %67 = getelementptr i8, i8* %54, i32 36
  %68 = bitcast i8* %67 to i64*
  store i64 0, i64* %68
  %69 = add i64 %66, 9
  %70 = getelementptr i8, i8* %54, i32 44
  %71 = bitcast i8* %70 to i64*
  store i64 0, i64* %71
  %72 = add i64 %69, 8
  %73 = getelementptr i32, i32* %48, i32 13
  store i32 0, i32* %73
  %74 = add i64 %72, 5
  %75 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77
  store i64 %76, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %78 = call %struct.Memory* @sub_41e0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %79 = load i64*, i64** @RSP_2312_56234d8e7800
  %80 = load i64, i64* @RSP_2312_56234d8dffa8
  %81 = getelementptr i64, i64* %79, i32 7
  %82 = load i64, i64* %81
  %83 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %84 = add i64 %83, 40
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  %87 = xor i64 %86, %82
  store i64 %87, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %88 = trunc i64 %87 to i32
  %89 = and i32 %88, 255
  %90 = call i32 @llvm.ctpop.i32(i32 %89) #13, !range !1234
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %94 = icmp eq i64 %87, 0
  %95 = zext i1 %94 to i8
  store i8 %95, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %96 = lshr i64 %87, 63
  %97 = trunc i64 %96 to i8
  store i8 %97, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %98 = icmp eq i8 %95, 0
  %99 = select i1 %98, i64 ptrtoint (i8* @data_47b9 to i64), i64 ptrtoint (i8* @data_47af to i64)
  br i1 %98, label %inst_47b9, label %inst_47af

inst_47af:                                        ; preds = %inst_474c
  %100 = add i64 72, %80
  %101 = icmp ult i64 %100, %80
  %102 = icmp ult i64 %100, 72
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  store i8 %104, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %105 = trunc i64 %100 to i32
  %106 = and i32 %105, 255
  %107 = call i32 @llvm.ctpop.i32(i32 %106) #13, !range !1234
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %111 = xor i64 72, %80
  %112 = xor i64 %111, %100
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %116 = icmp eq i64 %100, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %118 = lshr i64 %100, 63
  %119 = trunc i64 %118 to i8
  store i8 %119, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %120 = lshr i64 %80, 63
  %121 = xor i64 %118, %120
  %122 = add nuw nsw i64 %121, %118
  %123 = icmp eq i64 %122, 2
  %124 = zext i1 %123 to i8
  store i8 %124, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %125 = add i64 %100, 8
  store i64 %125, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_4c00(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
  br label %inst_4c00

inst_4c00:                                        ; preds = %inst_502b, %0
  %1 = phi %struct.Memory* [ %memory, %0 ], [ %58, %inst_502b ]
  %2 = load i64, i64* @R15_2456_56234d8dffa8
  %3 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %4 = add i64 %3, -8
  %5 = inttoptr i64 %4 to i64*
  store i64 %2, i64* %5
  %6 = load i64, i64* @R14_2440_56234d8dffa8
  %7 = add i64 %4, -8
  %8 = getelementptr i64, i64* %5, i32 -1
  store i64 %6, i64* %8
  %9 = load i64, i64* @R13_2424_56234d8dffa8
  %10 = add i64 %7, -8
  %11 = getelementptr i64, i64* %8, i32 -1
  store i64 %9, i64* %11
  %12 = load i64, i64* @R12_2408_56234d8dffa8
  %13 = add i64 %10, -8
  %14 = getelementptr i64, i64* %11, i32 -1
  store i64 %12, i64* %14
  %15 = load i64, i64* @R9_2360_56234d8dffa8
  store i64 %15, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %16 = load i64, i64* @RBP_2328_56234d8dffa8
  %17 = add i64 %13, -8
  %18 = getelementptr i64, i64* %14, i32 -1
  store i64 %16, i64* %18
  %19 = load i64, i64* @RBX_2232_56234d8dffa8
  %20 = add i64 %17, -8
  %21 = getelementptr i64, i64* %18, i32 -1
  store i64 %19, i64* %21
  %22 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 %22, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %23 = load i64, i64* @R8_2344_56234d8dffa8
  store i64 %23, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %24 = sub i64 %20, 40
  store i64 %24, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %25 = load i64, i64* @RSI_2280_56234d8dffa8
  %26 = icmp eq i64 %25, 0
  %27 = zext i1 %26 to i8
  %28 = icmp eq i8 %27, 0
  %29 = select i1 %28, i64 add (i64 ptrtoint (void ()* @callback_sub_4c00 to i64), i64 32), i64 add (i64 ptrtoint (void ()* @callback_sub_4c00 to i64), i64 176)
  br i1 %26, label %inst_4cb0, label %inst_4c20

inst_4e80:                                        ; preds = %712, %inst_4c96, %inst_4e77
  %30 = phi i64 [ %686, %712 ], [ %667, %inst_4e77 ], [ %686, %inst_4c96 ]
  %31 = add i64 %30, 7
  store i8* @data_6918, i8** @RSI_2280_56234d8e76a0
  %32 = add i64 %31, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %33 = add i64 %32, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %34 = add i64 %33, 4
  %35 = load i64*, i64** @RBX_2232_56234d8e7800
  %36 = getelementptr i64, i64* %35, i32 3
  %37 = load i64, i64* %36
  store i64 %37, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %38 = add i64 %34, 4
  %39 = getelementptr i64, i64* %35, i32 2
  %40 = load i64, i64* %39
  store i64 %40, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %41 = add i64 %38, 4
  %42 = getelementptr i64, i64* %35, i32 1
  %43 = load i64, i64* %42
  store i64 %43, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %44 = add i64 %41, 3
  %45 = load i64, i64* %35
  store i64 %45, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %46 = add i64 %44, 5
  %47 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %46, i64* %49
  store i64 %48, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %50 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %437)
  %51 = load i64, i64* @RSP_2312_56234d8dffa8
  %52 = sub i64 %51, 8
  store i64 %52, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_4ea6

inst_4f02:                                        ; preds = %712, %inst_4c96
  %53 = add i64 %686, 6
  br label %inst_4f08

inst_5007:                                        ; preds = %712, %inst_4c96
  %54 = add i64 %686, 5
  %55 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57
  store i64 %56, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %58 = call %struct.Memory* @ext_208278_abort(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %437)
  store i64 0, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %59 = load i64*, i64** @R8_2344_56234d8e7800
  %60 = load i64, i64* @R8_2344_56234d8dffa8
  %61 = load i64, i64* %59
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %inst_502b, label %inst_5020

inst_4f08:                                        ; preds = %712, %inst_4c96, %inst_4f02
  %63 = phi i64 [ %53, %inst_4f02 ], [ %686, %712 ], [ %686, %inst_4c96 ]
  %64 = add i64 %63, 4
  %65 = load i64*, i64** @RBX_2232_56234d8e7800
  %66 = getelementptr i64, i64* %65, i32 1
  %67 = load i64, i64* %66
  store i64 %67, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %68 = add i64 %64, 4
  %69 = getelementptr i64, i64* %65, i32 5
  %70 = load i64, i64* %69
  store i64 %70, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %71 = add i64 %68, 7
  store i8* @data_6960, i8** @RSI_2280_56234d8e76a0
  %72 = add i64 %71, 4
  %73 = getelementptr i64, i64* %65, i32 4
  %74 = load i64, i64* %73
  store i64 %74, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %75 = add i64 %72, 4
  %76 = getelementptr i64, i64* %65, i32 3
  %77 = load i64, i64* %76
  store i64 %77, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %78 = add i64 %75, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %79 = add i64 %78, 4
  %80 = getelementptr i64, i64* %65, i32 2
  %81 = load i64, i64* %80
  store i64 %81, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %82 = add i64 %79, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %83 = add i64 %82, 3
  %84 = load i64, i64* %65
  store i64 %84, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %85 = add i64 %83, 4
  %86 = load i64*, i64** @RSP_2312_56234d8e7800
  %87 = load i64, i64* @RSP_2312_56234d8dffa8
  store i64 %67, i64* %86
  %88 = add i64 %85, 5
  %89 = add i64 %87, -8
  %90 = getelementptr i64, i64* %86, i32 -1
  store i64 %88, i64* %90
  store i64 %89, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %91 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %437)
  %92 = load i64, i64* @RSP_2312_56234d8dffa8
  %93 = sub i64 %92, 8
  %94 = load i64, i64* @R13_2424_56234d8dffa8
  store i64 %94, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %95 = load i64, i64* @R12_2408_56234d8dffa8
  %96 = add i64 %93, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %95, i64* %97
  %98 = load i64, i64* @R15_2456_56234d8dffa8
  %99 = add i64 %96, -8
  %100 = getelementptr i64, i64* %97, i32 -1
  store i64 %98, i64* %100
  %101 = load i64, i64* @R14_2440_56234d8dffa8
  %102 = add i64 %99, -8
  %103 = getelementptr i64, i64* %100, i32 -1
  store i64 %101, i64* %103
  store i64 %102, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_4f43

inst_4cb0:                                        ; preds = %inst_4ca6, %inst_4c00
  %104 = phi i64 [ %29, %inst_4c00 ], [ %617, %inst_4ca6 ]
  %105 = phi %struct.Memory* [ %1, %inst_4c00 ], [ %437, %inst_4ca6 ]
  %106 = add i64 %104, 3
  %107 = load i64, i64* @RCX_2248_56234d8dffa8
  store i64 %107, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %108 = add i64 %106, 3
  %109 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %109, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %110 = add i64 %108, 7
  store i8* @data_67b4, i8** @RDX_2264_56234d8e76a0
  %111 = add i64 %110, 5
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %112 = add i64 %111, 2
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %113 = add i64 %112, 5
  %114 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %115 = add i64 %114, -8
  %116 = inttoptr i64 %115 to i64*
  store i64 %113, i64* %116
  store i64 %115, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %117 = call %struct.Memory* @ext_208400___fprintf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %105)
  br label %inst_4c3c

inst_4ed8:                                        ; preds = %712, %inst_4c96, %inst_4ed4
  %118 = phi i64 [ %577, %inst_4ed4 ], [ %686, %712 ], [ %686, %inst_4c96 ]
  %119 = add i64 %118, 4
  %120 = load i64*, i64** @RBX_2232_56234d8e7800
  %121 = getelementptr i64, i64* %120, i32 4
  %122 = load i64, i64* %121
  store i64 %122, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %123 = add i64 %119, 7
  store i8* @data_6938, i8** @RSI_2280_56234d8e76a0
  %124 = add i64 %123, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %125 = add i64 %124, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %126 = add i64 %125, 4
  %127 = getelementptr i64, i64* %120, i32 3
  %128 = load i64, i64* %127
  store i64 %128, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %129 = add i64 %126, 4
  %130 = getelementptr i64, i64* %120, i32 2
  %131 = load i64, i64* %130
  store i64 %131, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %132 = add i64 %129, 4
  %133 = getelementptr i64, i64* %120, i32 1
  %134 = load i64, i64* %133
  store i64 %134, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %135 = add i64 %132, 3
  %136 = load i64, i64* %120
  store i64 %136, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %137 = add i64 %135, 5
  %138 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140
  store i64 %139, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %141 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %437)
  %142 = load i64, i64* @R15_2456_56234d8dffa8
  %143 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %144 = add i64 %143, -8
  %145 = inttoptr i64 %144 to i64*
  store i64 %142, i64* %145
  store i64 %144, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_4ea6

inst_4d14:                                        ; preds = %inst_4cd0, %inst_4d9a
  %146 = phi %struct.Memory* [ %267, %inst_4d9a ], [ %574, %inst_4cd0 ]
  %147 = load i64*, i64** @RSP_2312_56234d8e7800
  %148 = load i64, i64* @RSP_2312_56234d8dffa8
  %149 = getelementptr i64, i64* %147, i32 3
  %150 = load i64, i64* %149
  %151 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %151, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %152 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %152, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %153 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %153, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %154 = add i64 %148, -8
  %155 = getelementptr i64, i64* %147, i32 -1
  store i64 %150, i64* %155
  %156 = load i64, i64* @R13_2424_56234d8dffa8
  %157 = add i64 %154, -8
  %158 = getelementptr i64, i64* %155, i32 -1
  store i64 %156, i64* %158
  %159 = load i64, i64* @R12_2408_56234d8dffa8
  %160 = add i64 %157, -8
  %161 = getelementptr i64, i64* %158, i32 -1
  store i64 %159, i64* %161
  %162 = load i64, i64* @R15_2456_56234d8dffa8
  %163 = add i64 %160, -8
  %164 = getelementptr i64, i64* %161, i32 -1
  store i64 %162, i64* %164
  %165 = load i64, i64* @R14_2440_56234d8dffa8
  %166 = add i64 %163, -8
  %167 = getelementptr i64, i64* %164, i32 -1
  store i64 %165, i64* %167
  %168 = getelementptr i64, i64* %167, i32 6
  %169 = load i64, i64* %168
  store i64 %169, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %170 = getelementptr i64, i64* %167, i32 7
  %171 = load i64, i64* %170
  store i64 %171, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %172 = add i64 %166, -8
  %173 = getelementptr i64, i64* %167, i32 -1
  store i64 add (i64 ptrtoint (i8* @data_4d14 to i64), i64 46), i64* %173
  store i64 %172, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %174 = call %struct.Memory* @ext_208400___fprintf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %146)
  %175 = load i64, i64* @RSP_2312_56234d8dffa8
  %176 = add i64 48, %175
  %177 = inttoptr i64 %176 to i64*
  %178 = lshr i64 %176, 63
  %179 = add i64 40, %176
  %180 = getelementptr i64, i64* %177, i32 5
  %181 = icmp ult i64 %179, %176
  %182 = icmp ult i64 %179, 40
  %183 = or i1 %181, %182
  %184 = zext i1 %183 to i8
  store i8 %184, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %185 = trunc i64 %179 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #13, !range !1234
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %191 = xor i64 40, %176
  %192 = xor i64 %191, %179
  %193 = lshr i64 %192, 4
  %194 = trunc i64 %193 to i8
  %195 = and i8 %194, 1
  store i8 %195, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %196 = icmp eq i64 %179, 0
  %197 = zext i1 %196 to i8
  store i8 %197, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %198 = lshr i64 %179, 63
  %199 = trunc i64 %198 to i8
  store i8 %199, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %200 = xor i64 %198, %178
  %201 = add nuw nsw i64 %200, %198
  %202 = icmp eq i64 %201, 2
  %203 = zext i1 %202 to i8
  store i8 %203, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %204 = add i64 %179, 8
  %205 = getelementptr i64, i64* %180, i32 1
  %206 = load i64, i64* %180
  store i64 %206, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %207 = add i64 %204, 8
  %208 = getelementptr i64, i64* %205, i32 1
  %209 = load i64, i64* %205
  store i64 %209, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %210 = add i64 %207, 8
  %211 = getelementptr i64, i64* %208, i32 1
  %212 = load i64, i64* %208
  store i64 %212, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %213 = add i64 %210, 8
  %214 = getelementptr i64, i64* %211, i32 1
  %215 = load i64, i64* %211
  store i64 %215, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %216 = add i64 %213, 8
  %217 = load i64, i64* %214
  store i64 %217, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %218 = add i64 %216, 8
  %219 = getelementptr i64, i64* %214, i32 1
  %220 = load i64, i64* %219
  store i64 %220, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %221 = add i64 %218, 8
  store i64 %221, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %174

inst_4df0:                                        ; preds = %712, %inst_4c96, %inst_4de9
  %222 = phi i64 [ %618, %inst_4de9 ], [ %686, %712 ], [ %686, %inst_4c96 ]
  %223 = add i64 %222, 4
  %224 = load i64*, i64** @RBX_2232_56234d8e7800
  %225 = getelementptr i64, i64* %224, i32 1
  %226 = load i64, i64* %225
  store i64 %226, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %227 = add i64 %223, 7
  store i8* @data_67cf, i8** @RSI_2280_56234d8e76a0
  %228 = add i64 %227, 3
  %229 = load i64, i64* %224
  store i64 %229, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %230 = add i64 %228, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %231 = add i64 %230, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %232 = add i64 %231, 5
  %233 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %234 = add i64 %233, -8
  %235 = inttoptr i64 %234 to i64*
  store i64 %232, i64* %235
  store i64 %234, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %236 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %437)
  %237 = load i64, i64* @RSP_2312_56234d8dffa8
  %238 = add i64 40, %237
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* @R12_2408_56234d8dffa8
  store i64 %240, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %241 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %241, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %242 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %242, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %243 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %243, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %244 = add i64 %238, 8
  %245 = getelementptr i64, i64* %239, i32 1
  %246 = load i64, i64* %239
  store i64 %246, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %247 = add i64 %244, 8
  %248 = getelementptr i64, i64* %245, i32 1
  %249 = load i64, i64* %245
  store i64 %249, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %250 = add i64 %247, 8
  %251 = getelementptr i64, i64* %248, i32 1
  %252 = load i64, i64* %248
  store i64 %252, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %253 = add i64 %250, 8
  %254 = getelementptr i64, i64* %251, i32 1
  %255 = load i64, i64* %251
  store i64 %255, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %256 = add i64 %253, 8
  %257 = load i64, i64* %254
  store i64 %257, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %258 = add i64 %256, 8
  store i64 %258, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %259 = getelementptr i64, i64* %254, i32 1
  %260 = load i64, i64* %259
  store i64 %260, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br label %inst_1a80

inst_4d9a:                                        ; preds = %inst_4d58, %inst_4fc0
  %261 = phi i64 [ undef, %inst_4fc0 ], [ %615, %inst_4d58 ]
  %262 = add i64 %261, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %263 = add i64 %262, 5
  %264 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %265 = add i64 %264, -8
  %266 = inttoptr i64 %265 to i64*
  store i64 %263, i64* %266
  store i64 %265, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %267 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %437)
  %268 = load i64*, i64** @RSP_2312_56234d8e7800
  %269 = load i64, i64* @RSP_2312_56234d8dffa8
  %270 = getelementptr i64, i64* %268, i32 3
  %271 = load i64, i64* %270
  store i64 %271, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %272 = add i64 %269, -8
  %273 = getelementptr i64, i64* %268, i32 -1
  store i64 %271, i64* %273
  store i64 %272, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_4d14

inst_4db0:                                        ; preds = %712, %inst_4c96, %inst_4dad
  %274 = phi i64 [ %686, %712 ], [ %374, %inst_4dad ], [ %686, %inst_4c96 ]
  %275 = add i64 %274, 3
  %276 = load i64*, i64** @RBX_2232_56234d8e7800
  %277 = load i64, i64* %276
  store i64 %277, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %278 = add i64 %275, 7
  store i8* @data_67bf, i8** @RSI_2280_56234d8e76a0
  %279 = add i64 %278, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %280 = add i64 %279, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %281 = add i64 %280, 5
  %282 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %284
  store i64 %283, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %285 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %437)
  %286 = load i64, i64* @RSP_2312_56234d8dffa8
  %287 = add i64 40, %286
  %288 = inttoptr i64 %287 to i64*
  %289 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %289, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %290 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %290, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %291 = add i64 %287, 8
  %292 = getelementptr i64, i64* %288, i32 1
  %293 = load i64, i64* %288
  store i64 %293, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %294 = add i64 %291, 8
  %295 = getelementptr i64, i64* %292, i32 1
  %296 = load i64, i64* %292
  store i64 %296, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %297 = add i64 %294, 8
  %298 = getelementptr i64, i64* %295, i32 1
  %299 = load i64, i64* %295
  store i64 %299, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %300 = add i64 %297, 8
  %301 = getelementptr i64, i64* %298, i32 1
  %302 = load i64, i64* %298
  store i64 %302, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %303 = add i64 %300, 8
  %304 = load i64, i64* %301
  store i64 %304, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %305 = add i64 %303, 8
  store i64 %305, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %306 = getelementptr i64, i64* %301, i32 1
  %307 = load i64, i64* %306
  store i64 %307, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %308 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %308, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br label %inst_1a80

inst_4ea6:                                        ; preds = %inst_4ed8, %inst_4e80
  %309 = phi %struct.Memory* [ %141, %inst_4ed8 ], [ %50, %inst_4e80 ]
  %310 = load i64, i64* @R14_2440_56234d8dffa8
  %311 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313
  %314 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %314, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %315 = load i64, i64* @R13_2424_56234d8dffa8
  store i64 %315, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %316 = load i64, i64* @R12_2408_56234d8dffa8
  store i64 %316, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %317 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %317, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %318 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %318, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %319 = add i64 %312, -8
  %320 = getelementptr i64, i64* %313, i32 -1
  store i64 add (i64 ptrtoint (i8* @data_4ea6 to i64), i64 29), i64* %320
  store i64 %319, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %321 = call %struct.Memory* @ext_208400___fprintf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %309)
  %322 = load i64*, i64** @RSP_2312_56234d8e7800
  %323 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %324 = add i64 %323, 8
  %325 = getelementptr i64, i64* %322, i32 1
  %326 = load i64, i64* %322
  store i64 %326, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %327 = add i64 %324, 8
  %328 = getelementptr i64, i64* %325, i32 1
  %329 = load i64, i64* %325
  store i64 %329, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %330 = add i64 40, %327
  %331 = getelementptr i64, i64* %328, i32 5
  %332 = icmp ult i64 %330, %327
  %333 = icmp ult i64 %330, 40
  %334 = or i1 %332, %333
  %335 = zext i1 %334 to i8
  store i8 %335, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %336 = trunc i64 %330 to i32
  %337 = and i32 %336, 255
  %338 = call i32 @llvm.ctpop.i32(i32 %337) #13, !range !1234
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  store i8 %341, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %342 = xor i64 40, %327
  %343 = xor i64 %342, %330
  %344 = lshr i64 %343, 4
  %345 = trunc i64 %344 to i8
  %346 = and i8 %345, 1
  store i8 %346, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %347 = icmp eq i64 %330, 0
  %348 = zext i1 %347 to i8
  store i8 %348, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %349 = lshr i64 %330, 63
  %350 = trunc i64 %349 to i8
  store i8 %350, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %351 = lshr i64 %327, 63
  %352 = xor i64 %349, %351
  %353 = add nuw nsw i64 %352, %349
  %354 = icmp eq i64 %353, 2
  %355 = zext i1 %354 to i8
  store i8 %355, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %356 = add i64 %330, 8
  %357 = getelementptr i64, i64* %331, i32 1
  %358 = load i64, i64* %331
  store i64 %358, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %359 = add i64 %356, 8
  %360 = getelementptr i64, i64* %357, i32 1
  %361 = load i64, i64* %357
  store i64 %361, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %362 = add i64 %359, 8
  %363 = getelementptr i64, i64* %360, i32 1
  %364 = load i64, i64* %360
  store i64 %364, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %365 = add i64 %362, 8
  %366 = getelementptr i64, i64* %363, i32 1
  %367 = load i64, i64* %363
  store i64 %367, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %368 = add i64 %365, 8
  %369 = load i64, i64* %366
  store i64 %369, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %370 = add i64 %368, 8
  %371 = getelementptr i64, i64* %366, i32 1
  %372 = load i64, i64* %371
  store i64 %372, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %373 = add i64 %370, 8
  store i64 %373, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %321

inst_502b:                                        ; preds = %inst_5020, %inst_5007
  br label %inst_4c00

inst_4dad:                                        ; preds = %712, %inst_4c96
  %374 = add i64 %686, 3
  br label %inst_4db0

inst_4e30:                                        ; preds = %712, %inst_4c96
  %375 = add i64 %686, 4
  %376 = load i64*, i64** @RBX_2232_56234d8e7800
  %377 = getelementptr i64, i64* %376, i32 2
  %378 = load i64, i64* %377
  store i64 %378, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %379 = add i64 %375, 4
  %380 = getelementptr i64, i64* %376, i32 1
  %381 = load i64, i64* %380
  store i64 %381, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %382 = add i64 %379, 7
  store i8* @data_67e6, i8** @RSI_2280_56234d8e76a0
  %383 = add i64 %382, 3
  %384 = load i64, i64* %376
  store i64 %384, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %385 = add i64 %383, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %386 = add i64 %385, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %387 = add i64 %386, 5
  %388 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %389 = add i64 %388, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %387, i64* %390
  store i64 %389, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %391 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %437)
  %392 = load i64, i64* @RSP_2312_56234d8dffa8
  %393 = add i64 40, %392
  %394 = inttoptr i64 %393 to i64*
  %395 = load i64, i64* @R13_2424_56234d8dffa8
  store i64 %395, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %396 = load i64, i64* @R12_2408_56234d8dffa8
  store i64 %396, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %397 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %397, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %398 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %398, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %399 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %399, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %400 = add i64 %393, 8
  %401 = getelementptr i64, i64* %394, i32 1
  %402 = load i64, i64* %394
  store i64 %402, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %403 = add i64 %400, 8
  %404 = getelementptr i64, i64* %401, i32 1
  %405 = load i64, i64* %401
  store i64 %405, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %406 = add i64 %403, 8
  %407 = getelementptr i64, i64* %404, i32 1
  %408 = load i64, i64* %404
  store i64 %408, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %409 = add i64 %406, 8
  %410 = getelementptr i64, i64* %407, i32 1
  %411 = load i64, i64* %407
  store i64 %411, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %412 = add i64 %409, 8
  %413 = load i64, i64* %410
  store i64 %413, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %414 = add i64 %412, 8
  store i64 %414, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %415 = getelementptr i64, i64* %410, i32 1
  %416 = load i64, i64* %415
  store i64 %416, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br label %inst_1a80

inst_4c3c:                                        ; preds = %inst_4c20, %inst_4cb0
  %417 = phi %struct.Memory* [ %117, %inst_4cb0 ], [ %679, %inst_4c20 ]
  store i8* @data_67bb, i8** @RSI_2280_56234d8e76a0
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %418 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %419 = add i64 %418, -8
  %420 = inttoptr i64 %419 to i64*
  store i64 add (i64 ptrtoint (i8* @data_4c3c to i64), i64 19), i64* %420
  store i64 %419, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %421 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %417)
  store i8* @data_6ae0, i8** @RDX_2264_56234d8e76a0
  %422 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %422, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 2017, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %423 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %423, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %424 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %425 = add i64 %424, -8
  %426 = inttoptr i64 %425 to i64*
  store i64 ptrtoint (i8* @data_4c6e to i64), i64* %426
  store i64 %425, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %427 = call %struct.Memory* @ext_208400___fprintf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %421)
  store i8* @data_6848, i8** @RSI_2280_56234d8e76a0
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %428 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %429 = add i64 %428, -8
  %430 = inttoptr i64 %429 to i64*
  store i64 ptrtoint (i8* @data_4c81 to i64), i64* %430
  store i64 %429, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %431 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %427)
  %432 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %432, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %433 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %433, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %434 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %435 = add i64 %434, -8
  %436 = inttoptr i64 %435 to i64*
  store i64 ptrtoint (i8* @data_4c8c to i64), i64* %436
  store i64 %435, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %437 = call %struct.Memory* @ext_208348_fputs_unlocked(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %431)
  %438 = load i64, i64* @R12_2408_56234d8dffa8
  %439 = sub i64 %438, 9
  %440 = icmp ult i64 %438, 9
  %441 = zext i1 %440 to i8
  %442 = icmp eq i64 %439, 0
  %443 = zext i1 %442 to i8
  %444 = or i8 %443, %441
  %445 = icmp eq i8 %444, 0
  br i1 %445, label %inst_4fc0, label %inst_4c96

inst_4fc0:                                        ; preds = %712, %inst_4c96, %inst_4c3c
  %446 = load i64*, i64** @RBX_2232_56234d8e7800
  %447 = getelementptr i64, i64* %446, i32 8
  %448 = load i64, i64* %447
  store i64 %448, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %449 = getelementptr i64, i64* %446, i32 7
  %450 = load i64, i64* %449
  store i64 %450, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %451 = getelementptr i64, i64* %446, i32 2
  %452 = load i64, i64* %451
  store i64 %452, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %453 = getelementptr i64, i64* %446, i32 1
  %454 = load i64, i64* %453
  store i64 %454, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_6a20, i8** @RSI_2280_56234d8e76a0
  %455 = getelementptr i64, i64* %446, i32 6
  %456 = load i64, i64* %455
  store i64 %456, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %457 = getelementptr i64, i64* %446, i32 5
  %458 = load i64, i64* %457
  store i64 %458, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %459 = getelementptr i64, i64* %446, i32 4
  %460 = load i64, i64* %459
  store i64 %460, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %461 = getelementptr i64, i64* %446, i32 3
  %462 = load i64, i64* %461
  store i64 %462, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %463 = load i64*, i64** @RSP_2312_56234d8e7800
  %464 = getelementptr i64, i64* %463, i32 3
  store i64 %448, i64* %464
  %465 = getelementptr i64, i64* %463, i32 2
  store i64 %450, i64* %465
  store i64 %452, i64* %463
  %466 = getelementptr i64, i64* %463, i32 1
  store i64 %454, i64* %466
  %467 = load i64, i64* %446
  store i64 %467, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_4d9a

inst_5020:                                        ; preds = %inst_5020, %inst_5007
  %468 = load i64, i64* @R9_2360_56234d8dffa8
  %469 = add i64 1, %468
  store i64 %469, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %470 = mul i64 %469, 8
  %471 = add i64 %470, %60
  %472 = inttoptr i64 %471 to i64*
  %473 = load i64, i64* %472
  %474 = icmp eq i64 %473, 0
  %475 = zext i1 %474 to i8
  %476 = icmp eq i8 %475, 0
  br i1 %476, label %inst_5020, label %inst_502b

inst_4f43:                                        ; preds = %inst_4f70, %inst_4f08
  %477 = phi %struct.Memory* [ %91, %inst_4f08 ], [ %651, %inst_4f70 ]
  %478 = load i64*, i64** @RSP_2312_56234d8e7800
  %479 = load i64, i64* @RSP_2312_56234d8dffa8
  %480 = getelementptr i64, i64* %478, i32 4
  %481 = load i64, i64* %480
  store i64 %481, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %482 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %482, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %483 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %483, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %484 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %484, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %485 = add i64 %479, -8
  %486 = getelementptr i64, i64* %478, i32 -1
  store i64 add (i64 ptrtoint (i8* @data_4f43 to i64), i64 26), i64* %486
  store i64 %485, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %487 = call %struct.Memory* @ext_208400___fprintf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %477)
  %488 = load i64, i64* @RSP_2312_56234d8dffa8
  %489 = add i64 32, %488
  %490 = inttoptr i64 %489 to i64*
  %491 = lshr i64 %489, 63
  %492 = add i64 40, %489
  %493 = getelementptr i64, i64* %490, i32 5
  %494 = icmp ult i64 %492, %489
  %495 = icmp ult i64 %492, 40
  %496 = or i1 %494, %495
  %497 = zext i1 %496 to i8
  store i8 %497, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %498 = trunc i64 %492 to i32
  %499 = and i32 %498, 255
  %500 = call i32 @llvm.ctpop.i32(i32 %499) #13, !range !1234
  %501 = trunc i32 %500 to i8
  %502 = and i8 %501, 1
  %503 = xor i8 %502, 1
  store i8 %503, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %504 = xor i64 40, %489
  %505 = xor i64 %504, %492
  %506 = lshr i64 %505, 4
  %507 = trunc i64 %506 to i8
  %508 = and i8 %507, 1
  store i8 %508, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %509 = icmp eq i64 %492, 0
  %510 = zext i1 %509 to i8
  store i8 %510, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %511 = lshr i64 %492, 63
  %512 = trunc i64 %511 to i8
  store i8 %512, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %513 = xor i64 %511, %491
  %514 = add nuw nsw i64 %513, %511
  %515 = icmp eq i64 %514, 2
  %516 = zext i1 %515 to i8
  store i8 %516, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %517 = add i64 %492, 8
  %518 = getelementptr i64, i64* %493, i32 1
  %519 = load i64, i64* %493
  store i64 %519, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %520 = add i64 %517, 8
  %521 = getelementptr i64, i64* %518, i32 1
  %522 = load i64, i64* %518
  store i64 %522, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %523 = add i64 %520, 8
  %524 = getelementptr i64, i64* %521, i32 1
  %525 = load i64, i64* %521
  store i64 %525, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %526 = add i64 %523, 8
  %527 = getelementptr i64, i64* %524, i32 1
  %528 = load i64, i64* %524
  store i64 %528, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %529 = add i64 %526, 8
  %530 = load i64, i64* %527
  store i64 %530, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %531 = add i64 %529, 8
  %532 = getelementptr i64, i64* %527, i32 1
  %533 = load i64, i64* %532
  store i64 %533, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %534 = add i64 %531, 8
  store i64 %534, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %487

inst_4cce:                                        ; preds = %712, %inst_4c96
  %535 = add i64 %686, 2
  br label %inst_4cd0

inst_4cd0:                                        ; preds = %712, %inst_4c96, %inst_4cce
  %536 = phi i64 [ %535, %inst_4cce ], [ %686, %712 ], [ %686, %inst_4c96 ]
  %537 = add i64 %536, 4
  %538 = load i64*, i64** @RBX_2232_56234d8e7800
  %539 = getelementptr i64, i64* %538, i32 7
  %540 = load i64, i64* %539
  store i64 %540, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %541 = add i64 %537, 4
  %542 = getelementptr i64, i64* %538, i32 2
  %543 = load i64, i64* %542
  store i64 %543, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %544 = add i64 %541, 7
  store i8* @data_69b8, i8** @RSI_2280_56234d8e76a0
  %545 = add i64 %544, 4
  %546 = getelementptr i64, i64* %538, i32 1
  %547 = load i64, i64* %546
  store i64 %547, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %548 = add i64 %545, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %549 = add i64 %548, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %550 = add i64 %549, 4
  %551 = getelementptr i64, i64* %538, i32 6
  %552 = load i64, i64* %551
  store i64 %552, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %553 = add i64 %550, 4
  %554 = getelementptr i64, i64* %538, i32 5
  %555 = load i64, i64* %554
  store i64 %555, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %556 = add i64 %553, 5
  %557 = load i64*, i64** @RSP_2312_56234d8e7800
  %558 = load i64, i64* @RSP_2312_56234d8dffa8
  %559 = getelementptr i64, i64* %557, i32 2
  store i64 %540, i64* %559
  %560 = add i64 %556, 4
  %561 = getelementptr i64, i64* %538, i32 4
  %562 = load i64, i64* %561
  store i64 %562, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %563 = add i64 %560, 4
  %564 = getelementptr i64, i64* %538, i32 3
  %565 = load i64, i64* %564
  store i64 %565, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %566 = add i64 %563, 4
  store i64 %543, i64* %557
  %567 = add i64 %566, 5
  %568 = getelementptr i64, i64* %557, i32 1
  store i64 %547, i64* %568
  %569 = add i64 %567, 3
  %570 = load i64, i64* %538
  store i64 %570, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %571 = add i64 %569, 5
  %572 = add i64 %558, -8
  %573 = getelementptr i64, i64* %557, i32 -1
  store i64 %571, i64* %573
  store i64 %572, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %574 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %437)
  %575 = load i64, i64* @RSP_2312_56234d8dffa8
  %576 = sub i64 %575, 8
  store i64 %576, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_4d14

inst_4ed4:                                        ; preds = %712, %inst_4c96
  %577 = add i64 %686, 4
  br label %inst_4ed8

inst_4d55:                                        ; preds = %712, %inst_4c96
  %578 = add i64 %686, 3
  br label %inst_4d58

inst_4d58:                                        ; preds = %712, %inst_4c96, %inst_4d55
  %579 = phi i64 [ %578, %inst_4d55 ], [ %686, %712 ], [ %686, %inst_4c96 ]
  %580 = add i64 %579, 4
  %581 = load i64*, i64** @RBX_2232_56234d8e7800
  %582 = getelementptr i64, i64* %581, i32 8
  %583 = load i64, i64* %582
  store i64 %583, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %584 = add i64 %580, 4
  %585 = getelementptr i64, i64* %581, i32 7
  %586 = load i64, i64* %585
  store i64 %586, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %587 = add i64 %584, 7
  store i8* @data_69e8, i8** @RSI_2280_56234d8e76a0
  %588 = add i64 %587, 4
  %589 = getelementptr i64, i64* %581, i32 2
  %590 = load i64, i64* %589
  store i64 %590, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %591 = add i64 %588, 4
  %592 = getelementptr i64, i64* %581, i32 1
  %593 = load i64, i64* %592
  store i64 %593, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %594 = add i64 %591, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %595 = add i64 %594, 4
  %596 = getelementptr i64, i64* %581, i32 6
  %597 = load i64, i64* %596
  store i64 %597, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %598 = add i64 %595, 4
  %599 = getelementptr i64, i64* %581, i32 5
  %600 = load i64, i64* %599
  store i64 %600, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %601 = add i64 %598, 4
  %602 = getelementptr i64, i64* %581, i32 4
  %603 = load i64, i64* %602
  store i64 %603, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %604 = add i64 %601, 4
  %605 = getelementptr i64, i64* %581, i32 3
  %606 = load i64, i64* %605
  store i64 %606, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %607 = add i64 %604, 3
  %608 = load i64, i64* %581
  store i64 %608, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %609 = add i64 %607, 5
  %610 = load i64*, i64** @RSP_2312_56234d8e7800
  %611 = getelementptr i64, i64* %610, i32 3
  store i64 %583, i64* %611
  %612 = add i64 %609, 5
  %613 = getelementptr i64, i64* %610, i32 2
  store i64 %586, i64* %613
  %614 = add i64 %612, 4
  store i64 %590, i64* %610
  %615 = add i64 %614, 5
  %616 = getelementptr i64, i64* %610, i32 1
  store i64 %593, i64* %616
  br label %inst_4d9a

inst_4ca6:                                        ; preds = %712, %inst_4c96
  %617 = add i64 %686, 10
  br label %inst_4cb0

inst_4de9:                                        ; preds = %712, %inst_4c96
  %618 = add i64 %686, 7
  br label %inst_4df0

inst_4f70:                                        ; preds = %712, %inst_4c96
  %619 = add i64 %686, 4
  %620 = load i64*, i64** @RBX_2232_56234d8e7800
  %621 = getelementptr i64, i64* %620, i32 2
  %622 = load i64, i64* %621
  store i64 %622, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %623 = add i64 %619, 4
  %624 = getelementptr i64, i64* %620, i32 6
  %625 = load i64, i64* %624
  store i64 %625, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %626 = add i64 %623, 7
  store i8* @data_6988, i8** @RSI_2280_56234d8e76a0
  %627 = add i64 %626, 4
  %628 = getelementptr i64, i64* %620, i32 5
  %629 = load i64, i64* %628
  store i64 %629, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %630 = add i64 %627, 4
  %631 = getelementptr i64, i64* %620, i32 4
  %632 = load i64, i64* %631
  store i64 %632, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %633 = add i64 %630, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %634 = add i64 %633, 4
  %635 = getelementptr i64, i64* %620, i32 3
  %636 = load i64, i64* %635
  store i64 %636, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %637 = add i64 %634, 4
  %638 = getelementptr i64, i64* %620, i32 1
  %639 = load i64, i64* %638
  store i64 %639, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %640 = add i64 %637, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %641 = add i64 %640, 5
  %642 = load i64*, i64** @RSP_2312_56234d8e7800
  %643 = load i64, i64* @RSP_2312_56234d8dffa8
  %644 = getelementptr i64, i64* %642, i32 1
  store i64 %622, i64* %644
  %645 = add i64 %641, 3
  %646 = load i64, i64* %620
  store i64 %646, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %647 = add i64 %645, 4
  store i64 %639, i64* %642
  %648 = add i64 %647, 5
  %649 = add i64 %643, -8
  %650 = getelementptr i64, i64* %642, i32 -1
  store i64 %648, i64* %650
  store i64 %649, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %651 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %437)
  %652 = load i64, i64* @R13_2424_56234d8dffa8
  %653 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %654 = add i64 %653, -8
  %655 = inttoptr i64 %654 to i64*
  store i64 %652, i64* %655
  %656 = load i64, i64* @R12_2408_56234d8dffa8
  %657 = add i64 %654, -8
  %658 = getelementptr i64, i64* %655, i32 -1
  store i64 %656, i64* %658
  %659 = load i64, i64* @R15_2456_56234d8dffa8
  %660 = add i64 %657, -8
  %661 = getelementptr i64, i64* %658, i32 -1
  store i64 %659, i64* %661
  %662 = load i64, i64* @R14_2440_56234d8dffa8
  %663 = add i64 %660, -8
  %664 = getelementptr i64, i64* %661, i32 -1
  store i64 %662, i64* %664
  store i64 %663, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %665 = getelementptr i64, i64* %664, i32 5
  %666 = load i64, i64* %665
  store i64 %666, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_4f43

inst_4e77:                                        ; preds = %712, %inst_4c96
  %667 = add i64 %686, 9
  br label %inst_4e80

inst_4c20:                                        ; preds = %inst_4c00
  %668 = add i64 %29, 3
  %669 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %669, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %670 = add i64 %668, 7
  store i8* @data_67a8, i8** @RDX_2264_56234d8e76a0
  %671 = add i64 %670, 3
  %672 = load i64, i64* @RCX_2248_56234d8dffa8
  store i64 %672, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %673 = add i64 %671, 2
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %674 = add i64 %673, 3
  store i64 %25, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %675 = add i64 %674, 5
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %676 = add i64 %675, 5
  %677 = add i64 %24, -8
  %678 = inttoptr i64 %677 to i64*
  store i64 %676, i64* %678
  store i64 %677, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %679 = call %struct.Memory* @ext_208400___fprintf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1)
  br label %inst_4c3c

inst_4c96:                                        ; preds = %inst_4c3c
  store i8* @data_6aa0, i8** @RDX_2264_56234d8e76a0
  %680 = mul i64 %438, 4
  %681 = trunc i64 %680 to i32
  %682 = getelementptr i8, i8* @data_6aa0, i32 %681
  %683 = bitcast i8* %682 to i32*
  %684 = load i32, i32* %683
  %685 = sext i32 %684 to i64
  %686 = add i64 ptrtoint (i8* @data_6aa0 to i64), %685
  store i64 %686, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %687 = icmp ult i64 %686, %685
  %688 = icmp ult i64 %686, ptrtoint (i8* @data_6aa0 to i64)
  %689 = or i1 %687, %688
  %690 = zext i1 %689 to i8
  store i8 %690, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %691 = trunc i64 %686 to i32
  %692 = and i32 %691, 255
  %693 = call i32 @llvm.ctpop.i32(i32 %692) #13, !range !1234
  %694 = trunc i32 %693 to i8
  %695 = and i8 %694, 1
  %696 = xor i8 %695, 1
  store i8 %696, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %697 = xor i64 ptrtoint (i8* @data_6aa0 to i64), %685
  %698 = xor i64 %697, %686
  %699 = lshr i64 %698, 4
  %700 = trunc i64 %699 to i8
  %701 = and i8 %700, 1
  store i8 %701, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %702 = icmp eq i64 %686, 0
  %703 = zext i1 %702 to i8
  store i8 %703, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %704 = lshr i64 %686, 63
  %705 = trunc i64 %704 to i8
  store i8 %705, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %706 = lshr i64 %685, 63
  %707 = xor i64 %704, %706
  %708 = add nuw nsw i64 %707, %704
  %709 = icmp eq i64 %708, 2
  %710 = zext i1 %709 to i8
  store i8 %710, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i64 %686, i64* @RIP_2472_56234d8dffa8, align 8, !tbaa !1216
  %711 = add i64 %685, 27296
  switch i64 %711, label %712 [
    i64 20087, label %inst_4e77
    i64 19622, label %inst_4ca6
    i64 20232, label %inst_4f08
    i64 20487, label %inst_5007
    i64 20016, label %inst_4e30
    i64 19952, label %inst_4df0
    i64 19664, label %inst_4cd0
    i64 20096, label %inst_4e80
    i64 19800, label %inst_4d58
    i64 19885, label %inst_4dad
    i64 20336, label %inst_4f70
    i64 20226, label %inst_4f02
    i64 19888, label %inst_4db0
    i64 20184, label %inst_4ed8
    i64 20406, label %inst_4fc0
    i64 19662, label %inst_4cce
    i64 20180, label %inst_4ed4
    i64 19945, label %inst_4de9
    i64 19797, label %inst_4d55
  ]

712:                                              ; preds = %inst_4c96
  %713 = sub i64 ptrtoint (i8* @data_5007 to i64), %711
  %714 = trunc i64 %713 to i32
  %715 = zext i32 %714 to i64
  switch i64 %715, label %716 [
    i64 400, label %inst_4e77
    i64 865, label %inst_4ca6
    i64 255, label %inst_4f08
    i64 0, label %inst_5007
    i64 471, label %inst_4e30
    i64 535, label %inst_4df0
    i64 823, label %inst_4cd0
    i64 391, label %inst_4e80
    i64 687, label %inst_4d58
    i64 602, label %inst_4dad
    i64 151, label %inst_4f70
    i64 261, label %inst_4f02
    i64 599, label %inst_4db0
    i64 303, label %inst_4ed8
    i64 81, label %inst_4fc0
    i64 825, label %inst_4cce
    i64 307, label %inst_4ed4
    i64 542, label %inst_4de9
    i64 690, label %inst_4d55
  ]

716:                                              ; preds = %712
  %717 = call %struct.Memory* @__remill_jump(%struct.State* @__mcsema_reg_state, i64 %686, %struct.Memory* %437)
  ret %struct.Memory* %717

inst_1a80:                                        ; preds = %inst_4e30, %inst_4db0, %inst_4df0
  %718 = phi %struct.Memory* [ %236, %inst_4df0 ], [ %285, %inst_4db0 ], [ %391, %inst_4e30 ]
  %719 = call %struct.Memory* @ext_1a80___fprintf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %718)
  ret %struct.Memory* %719
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_2fa0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_2fa0:
  %0 = load i64, i64* @R15_2456_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @R14_2440_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i32, i32* @R8_2344_56234d8dff90
  %8 = zext i32 %7 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %10 = load i64, i64* @R13_2424_56234d8dffa8
  %11 = add i64 %5, -8
  %12 = getelementptr i64, i64* %6, i32 -1
  store i64 %10, i64* %12
  %13 = load i64, i64* @R12_2408_56234d8dffa8
  %14 = add i64 %11, -8
  %15 = getelementptr i64, i64* %12, i32 -1
  store i64 %13, i64* %15
  %16 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 %16, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %17 = load i64, i64* @RBP_2328_56234d8dffa8
  %18 = add i64 %14, -8
  %19 = getelementptr i64, i64* %15, i32 -1
  store i64 %17, i64* %19
  %20 = load i64, i64* @RBX_2232_56234d8dffa8
  %21 = add i64 %18, -8
  %22 = getelementptr i64, i64* %19, i32 -1
  store i64 %20, i64* %22
  %23 = load i32, i32* @R9_2360_56234d8dff90
  %24 = zext i32 %23 to i64
  %25 = and i64 %24, 4294967295
  %26 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %26, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %27 = load i64, i64* @RCX_2248_56234d8dffa8
  store i64 %27, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %28 = trunc i64 %25 to i32
  %29 = zext i32 %28 to i64
  %30 = and i64 2, %29
  store i64 %30, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %31 = sub i64 %21, 184
  %32 = inttoptr i64 %31 to i64*
  %33 = inttoptr i64 %31 to i32*
  %34 = getelementptr i64, i64* %32, i32 30
  %35 = load i64, i64* %34
  %36 = load i64, i64* @RDX_2264_56234d8dffa8
  %37 = getelementptr i64, i64* %32, i32 2
  store i64 %36, i64* %37
  %38 = getelementptr i32, i32* %33, i32 2
  store i32 %7, i32* %38
  %39 = getelementptr i32, i32* %33, i32 30
  store i32 %23, i32* %39
  %40 = getelementptr i64, i64* %32, i32 4
  store i64 %35, i64* %40
  %41 = getelementptr i64, i64* %32, i32 31
  %42 = load i64, i64* %41
  %43 = getelementptr i64, i64* %32, i32 13
  store i64 %42, i64* %43
  %44 = getelementptr i64, i64* %32, i32 32
  %45 = load i64, i64* %44
  %46 = getelementptr i64, i64* %32, i32 12
  store i64 %45, i64* %46
  %47 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %48 = add i64 %47, 40
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49
  %51 = getelementptr i64, i64* %32, i32 21
  store i64 %50, i64* %51
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %52 = add i64 %31, -8
  %53 = getelementptr i64, i64* %32, i32 -1
  store i64 ptrtoint (i8* @data_3011 to i64), i64* %53
  store i64 %52, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %54 = call %struct.Memory* @ext_2082d0___ctype_get_mb_cur_max(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %55 = load i32, i32* @R15_2456_56234d8dff90
  %56 = zext i32 %55 to i64
  %57 = sub i32 %55, 10
  %58 = icmp ult i32 %55, 10
  %59 = zext i1 %58 to i8
  store i8 %59, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %60 = and i32 %57, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #13, !range !1234
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %65 = xor i64 10, %56
  %66 = trunc i64 %65 to i32
  %67 = xor i32 %57, %66
  %68 = lshr i32 %67, 4
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  store i8 %70, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %71 = icmp eq i32 %57, 0
  %72 = zext i1 %71 to i8
  store i8 %72, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %73 = lshr i32 %57, 31
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %75 = lshr i32 %55, 31
  %76 = xor i32 %73, %75
  %77 = add nuw nsw i32 %76, %75
  %78 = icmp eq i32 %77, 2
  %79 = zext i1 %78 to i8
  store i8 %79, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %80 = load i64, i64* @RSP_2312_56234d8dffa8
  %81 = add i64 %80, 88
  %82 = load i64, i64* @RAX_2216_56234d8dffa8
  %83 = inttoptr i64 %81 to i64*
  store i64 %82, i64* %83
  %84 = or i8 %72, %59
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %inst_41cf, label %inst_3020

inst_3400:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %86 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %87 = load i64, i64* @RSP_2312_56234d8dffa8
  %88 = add i64 %87, 8
  %89 = inttoptr i64 %88 to i32*
  %90 = load i32, i32* %89
  %91 = sub i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  br label %inst_3408

inst_3c04:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %94 = phi i64 [ %1836, %1862 ], [ %2050, %2076 ], [ %2050, %inst_3509 ], [ %1836, %inst_317d ], [ %1629, %1655 ], [ %1629, %inst_3020 ]
  %95 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %96 = add i64 %94, 2
  %97 = load i32, i32* @RBX_2232_56234d8dff90
  %98 = icmp eq i32 %97, 0
  %99 = zext i1 %98 to i8
  %100 = add i64 %96, 6
  %101 = sub i64 %100, 3033
  %102 = icmp eq i8 %99, 0
  %103 = select i1 %102, i64 %101, i64 %100
  br i1 %102, label %inst_3033, label %inst_3c0c

inst_3a05:                                        ; preds = %inst_3a00, %inst_39fb
  %104 = add i64 %1609, 1
  %105 = sub i64 %1608, %104
  %106 = icmp ult i64 %1608, %104
  %107 = zext i1 %106 to i8
  %108 = icmp eq i64 %105, 0
  %109 = zext i1 %108 to i8
  %110 = or i8 %109, %107
  %111 = icmp ne i8 %110, 0
  br i1 %111, label %inst_3a1b, label %inst_3a0e

inst_3f00:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_3f07
  %112 = phi %struct.Memory* [ %931, %inst_3f07 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %113 = load i64, i64* @R9_2360_56234d8dffa8
  %114 = load i64, i64* @RAX_2216_56234d8dffa8
  %115 = add i64 %114, %113
  %116 = inttoptr i64 %115 to i8*
  %117 = load i8, i8* %116
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %inst_3f15, label %inst_3f07

inst_3408:                                        ; preds = %inst_31ac, %inst_3638, %inst_3400
  %119 = phi %struct.Memory* [ %677, %inst_31ac ], [ %246, %inst_3638 ], [ %86, %inst_3400 ]
  %120 = load i64, i64* @RBP_2328_56234d8dffa8
  %121 = icmp eq i64 %120, 0
  %122 = zext i1 %121 to i8
  %123 = icmp eq i8 %122, 0
  br i1 %123, label %inst_31bc, label %inst_3411

inst_360b:                                        ; preds = %inst_35f2, %inst_35e9
  %124 = load i32, i32* @R12_2408_56234d8dff90
  %125 = zext i32 %124 to i64
  %126 = and i64 %125, 4294967295
  store i64 %126, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 48, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31c8

inst_320c:                                        ; preds = %inst_3202, %inst_36eb, %inst_3a81
  %127 = phi %struct.Memory* [ %361, %inst_3a81 ], [ %806, %inst_36eb ], [ %1553, %inst_3202 ]
  %128 = load i8, i8* @RAX_2216_56234d8dff60
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %inst_3230, label %inst_3210

inst_3b79:                                        ; preds = %inst_40db, %inst_413d, %inst_3b40, %inst_40d2
  %130 = phi i64 [ ptrtoint (i8* @data_3b79 to i64), %inst_3b40 ], [ %704, %inst_40d2 ], [ undef, %inst_40db ], [ undef, %inst_413d ]
  %131 = phi %struct.Memory* [ %1301, %inst_3b40 ], [ %691, %inst_40d2 ], [ %691, %inst_40db ], [ %2270, %inst_413d ]
  %132 = load i64*, i64** @RSP_2312_56234d8e7800
  %133 = load i64, i64* @RSP_2312_56234d8dffa8
  %134 = getelementptr i64, i64* %132, i32 21
  %135 = load i64, i64* %134
  %136 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %137 = add i64 %136, 40
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138
  %140 = xor i64 %139, %135
  store i64 %140, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %141 = trunc i64 %140 to i32
  %142 = and i32 %141, 255
  %143 = call i32 @llvm.ctpop.i32(i32 %142) #13, !range !1234
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  store i8 %146, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %147 = icmp eq i64 %140, 0
  %148 = zext i1 %147 to i8
  store i8 %148, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %149 = lshr i64 %140, 63
  %150 = trunc i64 %149 to i8
  store i8 %150, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %151 = load i64, i64* @R15_2456_56234d8dffa8
  store i64 %151, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %152 = icmp eq i8 %148, 0
  br i1 %152, label %inst_4193, label %inst_3b93

inst_3411:                                        ; preds = %inst_3668, %inst_3440, %inst_3430, %inst_3650, %inst_3408
  %153 = phi %struct.Memory* [ %188, %inst_3650 ], [ %119, %inst_3408 ], [ %268, %inst_3440 ], [ %210, %inst_3430 ], [ %374, %inst_3668 ]
  %154 = load i64, i64* @RSP_2312_56234d8dffa8
  %155 = add i64 %154, 15
  %156 = inttoptr i64 %155 to i8*
  %157 = load i8, i8* %156
  %158 = zext i8 %157 to i64
  store i64 %158, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %159 = load i8, i8* @RDX_2264_56234d8dff60
  %160 = zext i8 %159 to i64
  %161 = and i64 %160, %158
  %162 = trunc i64 %161 to i8
  store i8 %162, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %inst_31c8, label %inst_341e

inst_3e14:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %164 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %165 = load i8*, i8** @RSP_2312_56234d8e76a0
  %166 = bitcast i8* %165 to i64*
  %167 = getelementptr i8, i8* %165, i32 14
  store i8 1, i8* %167
  %168 = getelementptr i8, i8* %165, i32 124
  store i8 0, i8* %168
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %169 = getelementptr i64, i64* %166, i32 10
  store i64 0, i64* %169
  %170 = getelementptr i8, i8* %165, i32 15
  store i8 1, i8* %170
  %171 = getelementptr i8, i8* %165, i32 13
  store i8 1, i8* %171
  br label %inst_3053

inst_321a:                                        ; preds = %inst_3215, %inst_3210
  %172 = add i64 %1917, 1
  %173 = sub i64 %1916, %172
  %174 = icmp ult i64 %1916, %172
  %175 = zext i1 %174 to i8
  %176 = icmp eq i64 %173, 0
  %177 = zext i1 %176 to i8
  %178 = or i8 %177, %175
  %179 = icmp ne i8 %178, 0
  br i1 %179, label %inst_3229, label %inst_3223

inst_3a1b:                                        ; preds = %inst_3a0e, %inst_3a05
  %180 = add i64 %1609, 2
  store i64 %180, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %181 = sub i64 %1608, %180
  %182 = icmp ult i64 %1608, %180
  %183 = zext i1 %182 to i8
  %184 = icmp eq i64 %181, 0
  %185 = zext i1 %184 to i8
  %186 = or i8 %185, %183
  %187 = icmp ne i8 %186, 0
  br i1 %187, label %inst_3a34, label %inst_3a24

inst_3650:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %188 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %54, %1655 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %inst_3020 ]
  %189 = load i64, i64* @RSP_2312_56234d8dffa8
  %190 = add i64 %189, 8
  %191 = inttoptr i64 %190 to i32*
  %192 = load i32, i32* %191
  %193 = sub i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = zext i1 %194 to i8
  store i8 %195, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3411

inst_341e:                                        ; preds = %inst_32c2, %inst_3411
  %196 = phi %struct.Memory* [ %648, %inst_32c2 ], [ %153, %inst_3411 ]
  %197 = load i64, i64* @R11_2392_56234d8dffa8
  store i64 %197, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %198 = load i64, i64* @RSP_2312_56234d8dffa8
  %199 = add i64 %198, 8
  %200 = inttoptr i64 %199 to i32*
  store i32 2, i32* %200
  br label %inst_3b29

inst_3828:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_3263
  %201 = phi %struct.Memory* [ %367, %inst_3263 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %202 = load i64, i64* @RSP_2312_56234d8dffa8
  %203 = add i64 %202, 15
  %204 = inttoptr i64 %203 to i8*
  %205 = load i8, i8* %204
  %206 = icmp eq i8 %205, 0
  %207 = zext i1 %206 to i8
  %208 = icmp eq i8 %207, 0
  br i1 %208, label %inst_4050, label %inst_3833

inst_3229:                                        ; preds = %inst_3223, %inst_321a
  %209 = add i64 2, %1917
  store i64 %209, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3230

inst_3430:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %210 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %211 = load i64, i64* @RSP_2312_56234d8dffa8
  %212 = add i64 %211, 8
  %213 = inttoptr i64 %212 to i32*
  %214 = load i32, i32* %213
  %215 = sub i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = zext i1 %216 to i8
  store i8 %217, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3411

inst_3033:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_3c04
  %218 = phi i64 [ %103, %inst_3c04 ], [ %1836, %1862 ], [ %2050, %2076 ], [ %2050, %inst_3509 ], [ %1836, %inst_317d ], [ %1629, %1655 ], [ %1629, %inst_3020 ]
  %219 = phi %struct.Memory* [ %95, %inst_3c04 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %220 = add i64 %218, 5
  %221 = load i8*, i8** @RSP_2312_56234d8e76a0
  %222 = bitcast i8* %221 to i64*
  %223 = getelementptr i8, i8* %221, i32 14
  store i8 1, i8* %223
  %224 = add i64 %220, 5
  %225 = getelementptr i8, i8* %221, i32 124
  store i8 0, i8* %225
  %226 = add i64 %224, 3
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %227 = add i64 %226, 9
  %228 = getelementptr i64, i64* %222, i32 10
  store i64 0, i64* %228
  %229 = add i64 %227, 5
  %230 = getelementptr i8, i8* %221, i32 15
  store i8 1, i8* %230
  %231 = add i64 %229, 5
  %232 = getelementptr i8, i8* %221, i32 13
  store i8 0, i8* %232
  br label %inst_3053

inst_3a34:                                        ; preds = %inst_3a24, %inst_3a1b
  %233 = load i32, i32* @RBX_2232_56234d8dff90
  %234 = zext i32 %233 to i64
  %235 = and i64 7, %234
  %236 = load i64, i64* @RBP_2328_56234d8dffa8
  %237 = add i64 1, %236
  store i64 %237, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %238 = add i64 3, %1609
  store i64 %238, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %239 = trunc i64 %235 to i32
  %240 = add i32 48, %239
  %241 = zext i32 %240 to i64
  store i64 %241, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %242 = load i64, i64* @RCX_2248_56234d8dffa8
  %243 = icmp ult i64 %237, %242
  %244 = zext i1 %243 to i8
  %245 = icmp eq i8 %244, 0
  br i1 %245, label %inst_3230, label %inst_3a4b

inst_3638:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %246 = phi %struct.Memory* [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %247 = load i64, i64* @RSP_2312_56234d8dffa8
  %248 = add i64 %247, 8
  %249 = inttoptr i64 %248 to i32*
  %250 = load i32, i32* %249
  %251 = sub i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = zext i1 %252 to i8
  store i8 %253, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3408

inst_3239:                                        ; preds = %inst_3235, %inst_3230
  %254 = load i64, i64* @RSP_2312_56234d8dffa8
  %255 = add i64 %254, 14
  %256 = inttoptr i64 %255 to i8*
  %257 = load i8, i8* %256
  %258 = zext i8 %257 to i64
  %259 = add i64 1, %1014
  store i64 %259, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %260 = load i8, i8* @R12_2408_56234d8dff60
  %261 = icmp eq i8 %260, 0
  %262 = zext i1 %261 to i8
  %263 = icmp eq i8 %262, 0
  %264 = select i1 %263, i64 %258, i64 0
  %265 = and i64 %264, 4294967295
  store i64 %265, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %266 = trunc i64 %265 to i8
  store i8 %266, i8* %256
  br label %inst_3088

inst_36c0:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %267 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 98, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3340

inst_3440:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %268 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %269 = load i64, i64* @RSP_2312_56234d8dffa8
  %270 = add i64 %269, 8
  %271 = inttoptr i64 %270 to i32*
  %272 = load i32, i32* %271
  %273 = sub i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = zext i1 %274 to i8
  store i64 32, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8 %275, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  br label %inst_3411

inst_3460:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %276 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 12, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 102, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32d4

inst_3842:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %277 = phi i64 [ %1836, %1862 ], [ %2050, %2076 ], [ %2050, %inst_3509 ], [ %1836, %inst_317d ], [ %1629, %1655 ], [ %1629, %inst_3020 ]
  %278 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %279 = add i64 %277, 6
  br label %inst_3848

inst_3e43:                                        ; preds = %inst_3e3e, %inst_3e39
  %280 = add i64 %1513, 2
  %281 = sub i64 %1512, %280
  %282 = icmp ult i64 %1512, %280
  %283 = zext i1 %282 to i8
  %284 = icmp eq i64 %281, 0
  %285 = zext i1 %284 to i8
  %286 = or i8 %285, %283
  %287 = icmp ne i8 %286, 0
  br i1 %287, label %inst_3e52, label %inst_3e4c

inst_3848:                                        ; preds = %inst_3498, %inst_3842
  %288 = phi i64 [ %540, %inst_3498 ], [ %279, %inst_3842 ]
  %289 = phi %struct.Memory* [ %508, %inst_3498 ], [ %278, %inst_3842 ]
  %290 = add i64 %288, 8
  %291 = load i8*, i8** @RSP_2312_56234d8e76a0
  %292 = load i64*, i64** @RSP_2312_56234d8e7800
  %293 = load i64, i64* @RSP_2312_56234d8dffa8
  %294 = bitcast i8* %291 to i64*
  %295 = add i64 %293, 160
  store i64 %295, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %296 = add i64 %290, 4
  %297 = load i64, i64* @R11_2392_56234d8dffa8
  %298 = sub i64 %297, -1
  %299 = icmp ult i64 %297, -1
  %300 = zext i1 %299 to i8
  store i8 %300, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %301 = trunc i64 %298 to i32
  %302 = and i32 %301, 255
  %303 = call i32 @llvm.ctpop.i32(i32 %302) #13, !range !1234
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %307 = xor i64 -1, %297
  %308 = xor i64 %307, %298
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %312 = icmp eq i64 %298, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %314 = lshr i64 %298, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %316 = lshr i64 %297, 63
  %317 = xor i64 1, %316
  %318 = xor i64 %314, %316
  %319 = add nuw nsw i64 %318, %317
  %320 = icmp eq i64 %319, 2
  %321 = zext i1 %320 to i8
  store i8 %321, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %322 = add i64 %296, 12
  %323 = getelementptr i64, i64* %294, i32 20
  store i64 0, i64* %323
  %324 = add i64 %322, 5
  %325 = getelementptr i64, i64* %292, i32 5
  store i64 %295, i64* %325
  %326 = add i64 %324, 2
  %327 = add i64 %326, 45
  %328 = icmp eq i8 %313, 0
  %329 = select i1 %328, i64 %327, i64 %326
  br i1 %328, label %inst_3894, label %inst_3867

inst_3a4d:                                        ; preds = %inst_3e8e, %inst_3a4b, %inst_3aaf
  %330 = phi %struct.Memory* [ %1466, %inst_3a4b ], [ %361, %inst_3e8e ], [ %361, %inst_3aaf ]
  %331 = load i64, i64* @R13_2424_56234d8dffa8
  %332 = load i64, i64* @R15_2456_56234d8dffa8
  %333 = sub i64 %331, %332
  %334 = icmp ult i64 %331, %332
  %335 = zext i1 %334 to i8
  %336 = icmp eq i64 %333, 0
  %337 = zext i1 %336 to i8
  %338 = or i8 %337, %335
  %339 = icmp ne i8 %338, 0
  br i1 %339, label %inst_3a56, label %inst_3a52

inst_3450:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %340 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 13, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 114, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32c2

inst_3053:                                        ; preds = %inst_3033, %inst_3e14
  %341 = phi i64 [ %231, %inst_3033 ], [ undef, %inst_3e14 ]
  %342 = phi %struct.Memory* [ %219, %inst_3033 ], [ %164, %inst_3e14 ]
  %343 = add i64 %341, 7
  %344 = add i64 %343, 9
  %345 = load i64*, i64** @RSP_2312_56234d8e7800
  %346 = load i32*, i32** @RSP_2312_56234d8ed000
  %347 = bitcast i32* %346 to i64*
  %348 = getelementptr i64, i64* %347, i32 3
  store i64 1, i64* %348
  %349 = add i64 %344, 3
  store i64 0, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %350 = add i64 %349, 8
  %351 = getelementptr i32, i32* %346, i32 2
  store i32 2, i32* %351
  %352 = add i64 %350, 5
  %353 = getelementptr i64, i64* %345, i32 9
  store i64 ptrtoint (i8* @data_62dd to i64), i64* %353
  br label %inst_3073

inst_3a56:                                        ; preds = %inst_3a52, %inst_3a4d
  %354 = load i64, i64* @RDI_2296_56234d8dffa8
  %355 = load i64, i64* @RBP_2328_56234d8dffa8
  %356 = add i64 %355, %354
  %357 = inttoptr i64 %356 to i8*
  %358 = load i8, i8* %357
  %359 = zext i8 %358 to i64
  store i64 %359, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %360 = add i64 1, %332
  store i64 %360, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3a5e

inst_3a5e:                                        ; preds = %inst_3990, %inst_3a56
  %361 = phi %struct.Memory* [ %1362, %inst_3990 ], [ %330, %inst_3a56 ]
  %362 = load i8, i8* @RDX_2264_56234d8dff60
  %363 = icmp eq i8 %362, 0
  %364 = zext i1 %363 to i8
  %365 = icmp eq i8 %364, 0
  br i1 %365, label %inst_39b0, label %inst_3a66

inst_3260:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %366 = phi %struct.Memory* [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3263

inst_3810:                                        ; preds = %inst_3f9f, %inst_3f92, %inst_37f8, %inst_37ef, %inst_37e8
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 63, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31c8

inst_3263:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_3260
  %367 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %366, %inst_3260 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %368 = load i64, i64* @RSP_2312_56234d8dffa8
  %369 = add i64 %368, 8
  %370 = inttoptr i64 %369 to i32*
  %371 = load i32, i32* %370
  %372 = sub i32 %371, 2
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %inst_3828, label %inst_3270

inst_3668:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %374 = phi %struct.Memory* [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %375 = load i64, i64* @RSP_2312_56234d8dffa8
  %376 = add i64 %375, 8
  %377 = inttoptr i64 %376 to i32*
  %378 = load i32, i32* %377
  %379 = sub i32 %378, 2
  %380 = icmp eq i32 %379, 0
  %381 = zext i1 %380 to i8
  %382 = load i32, i32* @R10_2376_56234d8dff90
  %383 = zext i32 %382 to i64
  %384 = and i64 %383, 4294967295
  store i64 %384, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 32, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8 %381, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3411

inst_31bc:                                        ; preds = %inst_31ac, %inst_3408
  %385 = phi %struct.Memory* [ %119, %inst_3408 ], [ %677, %inst_31ac ]
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31c8

inst_3470:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %386 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 11, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 118, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32d4

inst_3190:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %387 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3193

inst_3073:                                        ; preds = %inst_4010, %inst_405d, %inst_3c1a, %inst_3dda, %inst_3d9c, %inst_3764, %inst_3cfa, %inst_3cb5, %inst_3c8b, %inst_3053
  %388 = phi i64 [ undef, %inst_3764 ], [ undef, %inst_3cfa ], [ undef, %inst_405d ], [ undef, %inst_3c8b ], [ undef, %inst_3d9c ], [ %352, %inst_3053 ], [ undef, %inst_3cb5 ], [ undef, %inst_4010 ], [ undef, %inst_3dda ], [ undef, %inst_3c1a ]
  %389 = phi %struct.Memory* [ %1153, %inst_3764 ], [ %876, %inst_3cfa ], [ %1558, %inst_405d ], [ %1558, %inst_3c8b ], [ %1407, %inst_3d9c ], [ %342, %inst_3053 ], [ %572, %inst_3cb5 ], [ %812, %inst_4010 ], [ %1537, %inst_3dda ], [ %1570, %inst_3c1a ]
  %390 = add i64 %388, 3
  %391 = add i64 %390, 3
  %392 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %392, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %393 = add i64 %391, 3
  %394 = load i32, i32* @R12_2408_56234d8dff90
  %395 = zext i32 %394 to i64
  %396 = and i64 %395, 4294967295
  store i64 %396, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %397 = add i64 %393, 3
  store i64 0, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %398 = add i64 %397, 3
  store i64 %392, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %399 = add i64 %398, 6
  br label %inst_3088

inst_3a7d:                                        ; preds = %inst_3a78, %inst_3a73
  %400 = add i64 1, %2525
  store i64 %400, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3a81

inst_3480:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %401 = phi %struct.Memory* [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 10, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 110, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32c2

inst_3a81:                                        ; preds = %inst_3a66, %inst_3a7d
  %402 = load i64, i64* @RBP_2328_56234d8dffa8
  %403 = add i64 1, %402
  store i64 %403, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %404 = load i64, i64* @RCX_2248_56234d8dffa8
  %405 = icmp ult i64 %403, %404
  %406 = zext i1 %405 to i8
  %407 = icmp eq i8 %406, 0
  br i1 %407, label %inst_320c, label %inst_3a8e

inst_3bb0:                                        ; preds = %inst_37b4, %inst_37ab
  %408 = load i64, i64* @R15_2456_56234d8dffa8
  %409 = sub i64 %2290, %408
  %410 = icmp ult i64 %2290, %408
  %411 = zext i1 %410 to i8
  %412 = icmp eq i64 %409, 0
  %413 = zext i1 %412 to i8
  %414 = or i8 %413, %411
  %415 = icmp ne i8 %414, 0
  br i1 %415, label %inst_3bba, label %inst_3bb5

inst_3088:                                        ; preds = %inst_33c8, %inst_3073, %inst_3239
  %416 = phi i64 [ %399, %inst_3073 ], [ undef, %inst_3239 ], [ undef, %inst_33c8 ]
  %417 = phi %struct.Memory* [ %389, %inst_3073 ], [ %1013, %inst_3239 ], [ %1142, %inst_33c8 ]
  %418 = add i64 %416, 3
  %419 = load i64, i64* @R11_2392_56234d8dffa8
  %420 = load i64, i64* @RBP_2328_56234d8dffa8
  %421 = sub i64 %419, %420
  %422 = icmp eq i64 %421, 0
  %423 = zext i1 %422 to i8
  %424 = add i64 %418, 4
  %425 = icmp eq i8 %423, 0
  %426 = zext i1 %425 to i8
  store i8 %426, i8* @R12_2408_56234d8dff60, align 1, !tbaa !1240
  %427 = add i64 %424, 4
  %428 = sub i64 %419, -1
  %429 = icmp eq i64 %428, 0
  %430 = zext i1 %429 to i8
  %431 = add i64 %427, 2
  %432 = add i64 %431, 13
  %433 = icmp eq i8 %430, 0
  %434 = select i1 %433, i64 %432, i64 %431
  br i1 %433, label %inst_30a2, label %inst_3095

inst_3c8b:                                        ; preds = %inst_3c71, %inst_3e96
  %435 = load i8*, i8** @RSP_2312_56234d8e76a0
  %436 = bitcast i8* %435 to i64*
  %437 = getelementptr i8, i8* %435, i32 15
  store i8 0, i8* %437
  %438 = getelementptr i8, i8* %435, i32 13
  store i8 1, i8* %438
  %439 = getelementptr i64, i64* %436, i32 3
  store i64 1, i64* %439
  store i64 1, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %440 = getelementptr i64, i64* %436, i32 9
  store i64 ptrtoint (i8* @data_62db to i64), i64* %440
  br label %inst_3073

inst_37c2:                                        ; preds = %inst_3bd6, %inst_41c2, %inst_37b4
  %441 = load i64, i64* @R13_2424_56234d8dffa8
  store i64 %441, i64* %2289
  %442 = load i64, i64* @R15_2456_56234d8dffa8
  %443 = add i64 3, %442
  store i64 %443, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %444 = load i8, i8* @R12_2408_56234d8dff60
  %445 = getelementptr i8, i8* %1420, i32 124
  store i8 %444, i8* %445
  store i64 0, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %446 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %446, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  store i64 39, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31f9

inst_348f:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %447 = phi i64 [ %1836, %1862 ], [ %2050, %2076 ], [ %2050, %inst_3509 ], [ %1836, %inst_317d ], [ %1629, %1655 ], [ %1629, %inst_3020 ]
  %448 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %449 = add i64 %447, 1
  br label %inst_3490

inst_3290:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %450 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3293

inst_3f18:                                        ; preds = %inst_3ef2, %inst_3eb1, %inst_3f15
  %451 = phi %struct.Memory* [ %757, %inst_3eb1 ], [ %986, %inst_3f15 ], [ %757, %inst_3ef2 ]
  %452 = load i64, i64* @RSP_2312_56234d8dffa8
  %453 = add i64 %452, 13
  %454 = inttoptr i64 %453 to i8*
  %455 = load i8, i8* %454
  %456 = zext i8 %455 to i64
  store i64 %456, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3986

inst_3293:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_3290
  %457 = phi %struct.Memory* [ %450, %inst_3290 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %458 = load i8*, i8** @RSP_2312_56234d8e76a0
  %459 = load i32*, i32** @RSP_2312_56234d8ed000
  %460 = getelementptr i32, i32* %459, i32 2
  %461 = load i32, i32* %460
  %462 = sub i32 %461, 2
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %inst_37a0, label %inst_329e

inst_3894:                                        ; preds = %inst_3867, %inst_3848
  %464 = phi i64 [ %329, %inst_3848 ], [ ptrtoint (i8* @data_3894 to i64), %inst_3867 ]
  %465 = phi %struct.Memory* [ %289, %inst_3848 ], [ %2339, %inst_3867 ]
  %466 = add i64 %464, 8
  %467 = load i8*, i8** @RSP_2312_56234d8e76a0
  %468 = load i64, i64* @RSP_2312_56234d8dffa8
  %469 = bitcast i8* %467 to i64*
  %470 = add i64 %468, 156
  %471 = add i64 %466, 2
  %472 = add i64 %471, 4
  %473 = load i8, i8* @RBX_2232_56234d8dff60
  %474 = getelementptr i8, i8* %467, i32 126
  store i8 %473, i8* %474
  %475 = add i64 %472, 5
  %476 = load i8, i8* @R8_2344_56234d8dff60
  %477 = getelementptr i8, i8* %467, i32 125
  store i8 %476, i8* %477
  %478 = add i64 %475, 3
  store i64 0, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %479 = add i64 %478, 8
  %480 = load i64, i64* @R9_2360_56234d8dffa8
  %481 = getelementptr i64, i64* %469, i32 17
  store i64 %480, i64* %481
  %482 = add i64 %479, 5
  %483 = getelementptr i64, i64* %469, i32 7
  store i64 %470, i64* %483
  %484 = add i64 %482, 5
  %485 = load i8, i8* @R10_2376_56234d8dff60
  %486 = getelementptr i8, i8* %467, i32 127
  store i8 %485, i8* %486
  %487 = add i64 %484, 8
  %488 = load i64, i64* @R15_2456_56234d8dffa8
  %489 = getelementptr i64, i64* %469, i32 16
  store i64 %488, i64* %489
  %490 = add i64 %487, 5
  %491 = load i64, i64* @R14_2440_56234d8dffa8
  %492 = getelementptr i64, i64* %469, i32 8
  store i64 %491, i64* %492
  %493 = add i64 %490, 5
  %494 = load i64, i64* @R13_2424_56234d8dffa8
  %495 = getelementptr i64, i64* %469, i32 14
  store i64 %494, i64* %495
  %496 = add i64 %493, 5
  %497 = load i64, i64* @R11_2392_56234d8dffa8
  %498 = getelementptr i64, i64* %469, i32 6
  store i64 %497, i64* %498
  br label %inst_38d3

inst_39d6:                                        ; preds = %inst_39d1, %inst_39cc
  %499 = add i64 %2441, 1
  %500 = sub i64 %2440, %499
  %501 = icmp ult i64 %2440, %499
  %502 = zext i1 %501 to i8
  %503 = icmp eq i64 %500, 0
  %504 = zext i1 %503 to i8
  %505 = or i8 %504, %502
  %506 = icmp ne i8 %505, 0
  br i1 %506, label %inst_39e5, label %inst_39df

inst_3498:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_3170, %inst_3490
  %507 = phi i64 [ %1321, %inst_3170 ], [ %1836, %1862 ], [ %1152, %inst_3490 ], [ %2050, %2076 ], [ %2050, %inst_3509 ], [ %1836, %inst_317d ], [ %1629, %1655 ], [ %1629, %inst_3020 ]
  %508 = phi %struct.Memory* [ %1306, %inst_3170 ], [ %1306, %1862 ], [ %1150, %inst_3490 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %509 = add i64 %507, 6
  %510 = load i8*, i8** @RSP_2312_56234d8e76a0
  %511 = load i64*, i64** @RSP_2312_56234d8e7800
  %512 = getelementptr i64, i64* %511, i32 11
  %513 = load i64, i64* %512
  %514 = sub i64 %513, 1
  %515 = icmp ult i64 %513, 1
  %516 = zext i1 %515 to i8
  store i8 %516, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %517 = trunc i64 %514 to i32
  %518 = and i32 %517, 255
  %519 = call i32 @llvm.ctpop.i32(i32 %518) #13, !range !1234
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = xor i8 %521, 1
  store i8 %522, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %523 = xor i64 %513, 1
  %524 = xor i64 %523, %514
  %525 = lshr i64 %524, 4
  %526 = trunc i64 %525 to i8
  %527 = and i8 %526, 1
  store i8 %527, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %528 = icmp eq i64 %514, 0
  %529 = zext i1 %528 to i8
  store i8 %529, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %530 = lshr i64 %514, 63
  %531 = trunc i64 %530 to i8
  store i8 %531, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %532 = lshr i64 %513, 63
  %533 = xor i64 %530, %532
  %534 = add nuw nsw i64 %533, %532
  %535 = icmp eq i64 %534, 2
  %536 = zext i1 %535 to i8
  store i8 %536, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %537 = add i64 %509, 6
  %538 = add i64 %537, 932
  %539 = icmp eq i8 %529, 0
  %540 = select i1 %539, i64 %538, i64 %537
  br i1 %539, label %inst_3848, label %inst_34a4

inst_409c:                                        ; preds = %inst_417c, %inst_409a, %inst_3725
  %541 = phi i64 [ %2187, %inst_3725 ], [ %2197, %inst_409a ], [ undef, %inst_417c ]
  %542 = add i64 %541, 5
  %543 = getelementptr i64, i64* %894, i32 9
  %544 = load i64, i64* %543
  %545 = add i64 %542, 3
  %546 = icmp eq i64 %544, 0
  %547 = zext i1 %546 to i8
  %548 = add i64 %545, 2
  %549 = add i64 %548, 44
  %550 = icmp eq i8 %547, 0
  %551 = select i1 %550, i64 %548, i64 %549
  br i1 %546, label %inst_40d2, label %inst_40a6

inst_3aa0:                                        ; preds = %inst_3a9b, %inst_3a96
  %552 = add i64 %2539, 1
  store i64 %552, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %553 = sub i64 %2538, %552
  %554 = icmp ult i64 %2538, %552
  %555 = zext i1 %554 to i8
  %556 = icmp eq i64 %553, 0
  %557 = zext i1 %556 to i8
  %558 = or i8 %557, %555
  %559 = icmp ne i8 %558, 0
  br i1 %559, label %inst_3aaf, label %inst_3aa9

inst_30a2:                                        ; preds = %inst_3095, %inst_3088
  %560 = phi i64 [ %434, %inst_3088 ], [ %1672, %inst_3095 ]
  %561 = add i64 %560, 3
  %562 = load i8, i8* @R12_2408_56234d8dff60
  %563 = icmp eq i8 %562, 0
  %564 = zext i1 %563 to i8
  %565 = add i64 %561, 6
  %566 = add i64 %565, 1621
  %567 = icmp eq i8 %564, 0
  %568 = select i1 %567, i64 %565, i64 %566
  br i1 %563, label %inst_3700, label %inst_30ab

inst_36a8:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %569 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 9, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  store i64 116, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32c2

inst_32f8:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %570 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 8, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 98, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32d4

inst_3aaf:                                        ; preds = %inst_3aa9, %inst_3aa0
  %571 = add i64 2, %2539
  store i64 %571, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3a4d

inst_3cb5:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %572 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %573 = load i8*, i8** @RSP_2312_56234d8e76a0
  %574 = bitcast i8* %573 to i64*
  %575 = bitcast i8* %573 to i32*
  %576 = getelementptr i8, i8* %573, i32 14
  store i8 1, i8* %576
  %577 = getelementptr i8, i8* %573, i32 124
  store i8 0, i8* %577
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %578 = getelementptr i64, i64* %574, i32 10
  store i64 0, i64* %578
  %579 = getelementptr i8, i8* %573, i32 15
  store i8 1, i8* %579
  %580 = getelementptr i8, i8* %573, i32 13
  store i8 1, i8* %580
  %581 = getelementptr i64, i64* %574, i32 3
  store i64 1, i64* %581
  store i64 0, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %582 = getelementptr i64, i64* %574, i32 9
  store i64 ptrtoint (i8* @data_62db to i64), i64* %582
  %583 = getelementptr i32, i32* %575, i32 2
  store i32 5, i32* %583
  br label %inst_3073

inst_35c9:                                        ; preds = %inst_3bf9, %inst_35bc
  %584 = add i64 %2091, 3
  store i64 %584, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %585 = load i32, i32* @RAX_2216_56234d8dff90
  %586 = zext i32 %585 to i64
  %587 = and i64 %586, 4294967295
  store i64 %587, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_35d0

inst_32b8:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %588 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 9, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 116, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32c2

inst_40ba:                                        ; preds = %inst_40b4, %inst_40c3
  %589 = phi i64 [ %2874, %inst_40b4 ], [ %676, %inst_40c3 ]
  %590 = add i64 %589, 3
  %591 = load i64, i64* @R13_2424_56234d8dffa8
  %592 = load i64, i64* @RDX_2264_56234d8dffa8
  %593 = sub i64 %591, %592
  %594 = icmp ult i64 %591, %592
  %595 = zext i1 %594 to i8
  %596 = icmp eq i64 %593, 0
  %597 = zext i1 %596 to i8
  %598 = add i64 %590, 2
  %599 = add i64 %598, 4
  %600 = or i8 %597, %595
  %601 = icmp ne i8 %600, 0
  %602 = select i1 %601, i64 %599, i64 %598
  br i1 %601, label %inst_40c3, label %inst_40bf

inst_3abb:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %603 = phi i64 [ %1836, %1862 ], [ %2050, %2076 ], [ %2050, %inst_3509 ], [ %1836, %inst_317d ], [ %1629, %1655 ], [ %1629, %inst_3020 ]
  %604 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %605 = add i64 %603, 5
  br label %inst_3ac0

inst_3ac0:                                        ; preds = %inst_3917, %inst_3abb
  %606 = phi i64 [ %2423, %inst_3917 ], [ %605, %inst_3abb ]
  %607 = phi %struct.Memory* [ %757, %inst_3917 ], [ %604, %inst_3abb ]
  %608 = add i64 %606, 4
  %609 = load i64, i64* @R15_2456_56234d8dffa8
  %610 = sub i64 %609, 1
  %611 = icmp ult i64 %609, 1
  %612 = zext i1 %611 to i8
  store i8 %612, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %613 = trunc i64 %610 to i32
  %614 = and i32 %613, 255
  %615 = call i32 @llvm.ctpop.i32(i32 %614) #13, !range !1234
  %616 = trunc i32 %615 to i8
  %617 = and i8 %616, 1
  %618 = xor i8 %617, 1
  store i8 %618, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %619 = xor i64 1, %609
  %620 = xor i64 %619, %610
  %621 = lshr i64 %620, 4
  %622 = trunc i64 %621 to i8
  %623 = and i8 %622, 1
  store i8 %623, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %624 = icmp eq i64 %610, 0
  %625 = zext i1 %624 to i8
  store i8 %625, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %626 = lshr i64 %610, 63
  %627 = trunc i64 %626 to i8
  store i8 %627, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %628 = lshr i64 %609, 63
  %629 = xor i64 %626, %628
  %630 = add nuw nsw i64 %629, %628
  %631 = icmp eq i64 %630, 2
  %632 = zext i1 %631 to i8
  store i8 %632, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %633 = add i64 %608, 6
  %634 = sub i64 %633, 417
  %635 = icmp eq i8 %625, 0
  %636 = select i1 %635, i64 %633, i64 %634
  br i1 %624, label %inst_3929, label %inst_3aca

inst_3620:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %637 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %638 = load i64, i64* @RSP_2312_56234d8dffa8
  %639 = add i64 %638, 8
  %640 = inttoptr i64 %639 to i32*
  %641 = load i32, i32* %640
  %642 = sub i32 %641, 2
  %643 = icmp eq i32 %642, 0
  %644 = zext i1 %643 to i8
  %645 = load i32, i32* @R10_2376_56234d8dff90
  %646 = zext i32 %645 to i64
  %647 = and i64 %646, 4294967295
  store i64 %647, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i8 %644, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31c8

inst_32c2:                                        ; preds = %inst_3558, %inst_3680, %inst_32b8, %inst_36a8, %inst_3480, %inst_3450
  %648 = phi %struct.Memory* [ %1141, %inst_3558 ], [ %401, %inst_3480 ], [ %340, %inst_3450 ], [ %569, %inst_36a8 ], [ %930, %inst_3680 ], [ %588, %inst_32b8 ]
  %649 = load i32*, i32** @RSP_2312_56234d8ed000
  %650 = load i8*, i8** @RSP_2312_56234d8e76a0
  %651 = getelementptr i32, i32* %649, i32 2
  %652 = load i32, i32* %651
  %653 = sub i32 %652, 2
  %654 = icmp eq i32 %653, 0
  %655 = zext i1 %654 to i8
  %656 = getelementptr i8, i8* %650, i32 15
  %657 = load i8, i8* %656
  %658 = and i8 %657, %655
  store i8 %658, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %659 = icmp eq i8 %658, 0
  %660 = zext i1 %659 to i8
  %661 = icmp eq i8 %660, 0
  br i1 %661, label %inst_341e, label %inst_32d4

inst_40c3:                                        ; preds = %inst_40bf, %inst_40ba
  %662 = phi i64 [ %602, %inst_40ba ], [ %2876, %inst_40bf ]
  %663 = add i64 %662, 4
  %664 = add i64 1, %592
  store i64 %664, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %665 = add i64 %663, 4
  %666 = add i64 %664, %2875
  %667 = inttoptr i64 %666 to i8*
  %668 = load i8, i8* %667
  %669 = zext i8 %668 to i64
  store i64 %669, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %670 = add i64 %665, 2
  %671 = icmp eq i8 %668, 0
  %672 = zext i1 %671 to i8
  %673 = add i64 %670, 2
  %674 = sub i64 %673, 21
  %675 = icmp eq i8 %672, 0
  %676 = select i1 %675, i64 %674, i64 %673
  br i1 %675, label %inst_40ba, label %inst_40cf

inst_3193:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_3190
  %677 = phi %struct.Memory* [ %387, %inst_3190 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %678 = load i64, i64* @R11_2392_56234d8dffa8
  %679 = sub i64 %678, 1
  %680 = icmp eq i64 %679, 0
  %681 = zext i1 %680 to i8
  %682 = icmp eq i8 %681, 0
  %683 = zext i1 %682 to i8
  store i8 %683, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %684 = sub i64 %678, -1
  %685 = icmp eq i64 %684, 0
  %686 = zext i1 %685 to i8
  %687 = icmp eq i8 %686, 0
  br i1 %687, label %inst_31ac, label %inst_31a0

inst_36d0:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %inst_311e, %1655, %inst_3020, %inst_3110
  %688 = phi %struct.Memory* [ %952, %inst_3110 ], [ %1799, %inst_311e ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3170

inst_3570:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %689 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 97, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3340

inst_40d2:                                        ; preds = %inst_40cf, %inst_40aa, %inst_40a6, %inst_409c
  %690 = phi i64 [ %551, %inst_409c ], [ %2860, %inst_40a6 ], [ %2872, %inst_40aa ], [ %2881, %inst_40cf ]
  %691 = phi %struct.Memory* [ %893, %inst_409c ], [ %893, %inst_40a6 ], [ %893, %inst_40aa ], [ %893, %inst_40cf ]
  %692 = add i64 %690, 3
  %693 = load i64, i64* @R13_2424_56234d8dffa8
  %694 = load i64, i64* @R15_2456_56234d8dffa8
  %695 = sub i64 %693, %694
  %696 = icmp ult i64 %693, %694
  %697 = zext i1 %696 to i8
  %698 = icmp eq i64 %695, 0
  %699 = zext i1 %698 to i8
  %700 = add i64 %692, 6
  %701 = sub i64 %700, 1378
  %702 = or i8 %699, %697
  %703 = icmp ne i8 %702, 0
  %704 = select i1 %703, i64 %701, i64 %700
  br i1 %703, label %inst_3b79, label %inst_40db

inst_38d3:                                        ; preds = %inst_3929, %inst_3894
  %705 = phi i64 [ %496, %inst_3894 ], [ %875, %inst_3929 ]
  %706 = phi %struct.Memory* [ %465, %inst_3894 ], [ %870, %inst_3929 ]
  %707 = add i64 %705, 5
  %708 = load i64*, i64** @RSP_2312_56234d8e7800
  %709 = load i64, i64* @RSP_2312_56234d8dffa8
  %710 = getelementptr i64, i64* %708, i32 2
  %711 = load i64, i64* %710
  store i64 %711, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %712 = add i64 %707, 5
  %713 = load i64, i64* @RBP_2328_56234d8dffa8
  %714 = load i64, i64* @RBX_2232_56234d8dffa8
  %715 = add i64 %714, %713
  store i64 %715, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %716 = add i64 %712, 5
  %717 = getelementptr i64, i64* %708, i32 6
  %718 = load i64, i64* %717
  %719 = add i64 %716, 5
  %720 = getelementptr i64, i64* %708, i32 5
  %721 = load i64, i64* %720
  store i64 %721, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %722 = add i64 %719, 5
  %723 = getelementptr i64, i64* %708, i32 7
  %724 = load i64, i64* %723
  store i64 %724, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %725 = add i64 %722, 4
  %726 = add i64 %715, %711
  store i64 %726, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %727 = add i64 %725, 3
  %728 = sub i64 %718, %715
  store i64 %728, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %729 = icmp ult i64 %718, %715
  %730 = zext i1 %729 to i8
  store i8 %730, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %731 = trunc i64 %728 to i32
  %732 = and i32 %731, 255
  %733 = call i32 @llvm.ctpop.i32(i32 %732) #13, !range !1234
  %734 = trunc i32 %733 to i8
  %735 = and i8 %734, 1
  %736 = xor i8 %735, 1
  store i8 %736, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %737 = xor i64 %715, %718
  %738 = xor i64 %737, %728
  %739 = lshr i64 %738, 4
  %740 = trunc i64 %739 to i8
  %741 = and i8 %740, 1
  store i8 %741, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %742 = icmp eq i64 %728, 0
  %743 = zext i1 %742 to i8
  store i8 %743, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %744 = lshr i64 %728, 63
  %745 = trunc i64 %744 to i8
  store i8 %745, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %746 = lshr i64 %718, 63
  %747 = lshr i64 %715, 63
  %748 = xor i64 %747, %746
  %749 = xor i64 %744, %746
  %750 = add nuw nsw i64 %749, %748
  %751 = icmp eq i64 %750, 2
  %752 = zext i1 %751 to i8
  store i8 %752, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %753 = add i64 %727, 3
  store i64 %726, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %754 = add i64 %753, 5
  %755 = add i64 %709, -8
  %756 = getelementptr i64, i64* %708, i32 -1
  store i64 %754, i64* %756
  store i64 %755, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %757 = call %struct.Memory* @sub_54a0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %706)
  %758 = load i64, i64* @RAX_2216_56234d8dffa8
  %759 = icmp eq i64 %758, 0
  store i64 %758, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br i1 %759, label %inst_3951, label %inst_3903

inst_32d4:                                        ; preds = %inst_3540, %inst_33f0, %inst_3530, %inst_32c2, %inst_32f8, %inst_3470, %inst_3460
  %760 = phi %struct.Memory* [ %648, %inst_32c2 ], [ %570, %inst_32f8 ], [ %1041, %inst_3530 ], [ %1617, %inst_3540 ], [ %386, %inst_3470 ], [ %276, %inst_3460 ], [ %1427, %inst_33f0 ]
  %761 = load i64, i64* @RSP_2312_56234d8dffa8
  %762 = add i64 %761, 13
  %763 = inttoptr i64 %762 to i8*
  %764 = load i8, i8* %763
  %765 = icmp eq i8 %764, 0
  %766 = zext i1 %765 to i8
  %767 = icmp eq i8 %766, 0
  br i1 %767, label %inst_3340, label %inst_32db

inst_32db:                                        ; preds = %inst_33bb, %inst_32d4
  %768 = phi %struct.Memory* [ %760, %inst_32d4 ], [ %1142, %inst_33bb ]
  %769 = load i32, i32* @RDX_2264_56234d8dff90
  %770 = zext i32 %769 to i64
  %771 = and i64 %770, 4294967295
  store i64 %771, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32e2

inst_3ade:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %772 = phi i64 [ %1836, %1862 ], [ %2050, %2076 ], [ %2050, %inst_3509 ], [ %1836, %inst_317d ], [ %1629, %1655 ], [ %1629, %inst_3020 ]
  %773 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %774 = add i64 %772, 2
  br label %inst_3ae0

inst_36e0:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_3308
  %775 = phi %struct.Memory* [ %944, %inst_3308 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %776 = load i64, i64* @RSP_2312_56234d8dffa8
  %777 = add i64 %776, 15
  %778 = inttoptr i64 %777 to i8*
  %779 = load i8, i8* %778
  %780 = icmp eq i8 %779, 0
  %781 = zext i1 %780 to i8
  %782 = icmp eq i8 %781, 0
  br i1 %782, label %inst_4050, label %inst_36eb

inst_32e2:                                        ; preds = %inst_31d3, %inst_31c8, %inst_32db
  %783 = phi %struct.Memory* [ %1495, %inst_31c8 ], [ %768, %inst_32db ], [ %1495, %inst_31d3 ]
  %784 = load i64, i64* @RSP_2312_56234d8dffa8
  %785 = add i64 %784, 15
  %786 = inttoptr i64 %785 to i8*
  %787 = load i8, i8* %786
  %788 = icmp eq i8 %787, 0
  %789 = zext i1 %788 to i8
  %790 = icmp eq i8 %789, 0
  br i1 %790, label %inst_31db, label %inst_31f9

inst_337b:                                        ; preds = %inst_3375, %inst_336c
  %791 = add i64 %1962, 2
  store i64 %791, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %792 = sub i64 %1961, %791
  %793 = icmp ult i64 %1961, %791
  %794 = zext i1 %793 to i8
  %795 = icmp eq i64 %792, 0
  %796 = zext i1 %795 to i8
  %797 = or i8 %796, %794
  %798 = icmp ne i8 %797, 0
  br i1 %798, label %inst_338a, label %inst_3384

inst_34e7:                                        ; preds = %inst_3f8b, %inst_34a4
  %799 = phi %struct.Memory* [ %1440, %inst_3f8b ], [ %2005, %inst_34a4 ]
  %800 = load i8, i8* @RAX_2216_56234d8dff60
  %801 = icmp eq i8 %800, 0
  %802 = zext i1 %801 to i8
  %803 = icmp eq i8 %802, 0
  %804 = load i32*, i32** @RSP_2312_56234d8ed000
  %805 = load i8*, i8** @RSP_2312_56234d8e76a0
  br i1 %803, label %inst_3e81, label %inst_34ef

inst_36eb:                                        ; preds = %inst_3329, %inst_36e0
  %806 = phi %struct.Memory* [ %999, %inst_3329 ], [ %775, %inst_36e0 ]
  %807 = load i64, i64* @RBP_2328_56234d8dffa8
  %808 = add i64 1, %807
  store i64 %808, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %809 = load i32, i32* @R8_2344_56234d8dff90
  %810 = zext i32 %809 to i64
  %811 = and i64 %810, 4294967295
  store i64 %811, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 92, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_320c

inst_4008:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %812 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %813 = load i32, i32* @RBX_2232_56234d8dff90
  %814 = icmp eq i32 %813, 0
  br i1 %814, label %inst_4198, label %inst_4010

inst_3929:                                        ; preds = %inst_3917, %inst_3ae0, %inst_3ac0
  %815 = phi i64 [ %636, %inst_3ac0 ], [ %1092, %inst_3ae0 ], [ %2423, %inst_3917 ]
  %816 = phi %struct.Memory* [ %607, %inst_3ac0 ], [ %1058, %inst_3ae0 ], [ %757, %inst_3917 ]
  %817 = add i64 %815, 7
  %818 = load i64*, i64** @RSP_2312_56234d8e7800
  %819 = load i32*, i32** @RSP_2312_56234d8ed000
  %820 = load i64, i64* @RSP_2312_56234d8dffa8
  %821 = getelementptr i32, i32* %819, i32 39
  %822 = load i32, i32* %821
  %823 = zext i32 %822 to i64
  store i64 %823, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %824 = add i64 %817, 5
  %825 = add i64 %820, -8
  %826 = getelementptr i64, i64* %818, i32 -1
  store i64 %824, i64* %826
  store i64 %825, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %827 = call %struct.Memory* @ext_208410_iswprint(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %816)
  %828 = load i64*, i64** @RSP_2312_56234d8e7800
  %829 = load i64, i64* @RSP_2312_56234d8dffa8
  %830 = getelementptr i64, i64* %828, i32 5
  %831 = load i64, i64* %830
  store i64 %831, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %832 = load i32, i32* @RAX_2216_56234d8dff90
  %833 = icmp eq i32 %832, 0
  %834 = zext i1 %833 to i8
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %835 = icmp eq i8 %834, 0
  %836 = load i64, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %837 = select i1 %835, i64 %836, i64 0
  %838 = and i64 %837, 4294967295
  store i64 %838, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %839 = load i64, i64* @RBX_2232_56234d8dffa8
  %840 = load i64, i64* @R15_2456_56234d8dffa8
  %841 = add i64 %840, %839
  store i64 %841, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %842 = icmp ult i64 %841, %839
  %843 = icmp ult i64 %841, %840
  %844 = or i1 %842, %843
  %845 = zext i1 %844 to i8
  store i8 %845, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %846 = trunc i64 %841 to i32
  %847 = and i32 %846, 255
  %848 = call i32 @llvm.ctpop.i32(i32 %847) #13, !range !1234
  %849 = trunc i32 %848 to i8
  %850 = and i8 %849, 1
  %851 = xor i8 %850, 1
  store i8 %851, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %852 = xor i64 %840, %839
  %853 = xor i64 %852, %841
  %854 = lshr i64 %853, 4
  %855 = trunc i64 %854 to i8
  %856 = and i8 %855, 1
  store i8 %856, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %857 = icmp eq i64 %841, 0
  %858 = zext i1 %857 to i8
  store i8 %858, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %859 = lshr i64 %841, 63
  %860 = trunc i64 %859 to i8
  store i8 %860, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %861 = lshr i64 %839, 63
  %862 = lshr i64 %840, 63
  %863 = xor i64 %859, %861
  %864 = xor i64 %859, %862
  %865 = add nuw nsw i64 %863, %864
  %866 = icmp eq i64 %865, 2
  %867 = zext i1 %866 to i8
  store i8 %867, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %868 = add i64 %829, -8
  %869 = getelementptr i64, i64* %828, i32 -1
  store i64 ptrtoint (i8* @data_394d to i64), i64* %869
  store i64 %868, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %870 = call %struct.Memory* @ext_208408_mbsinit(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %827)
  %871 = load i32, i32* @RAX_2216_56234d8dff90
  %872 = icmp eq i32 %871, 0
  %873 = zext i1 %872 to i8
  %874 = icmp eq i8 %873, 0
  %875 = select i1 %874, i64 ptrtoint (i8* @data_3951 to i64), i64 ptrtoint (i8* @data_38d3 to i64)
  br i1 %872, label %inst_38d3, label %inst_3951

inst_3cfa:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %876 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %877 = load i8*, i8** @RSP_2312_56234d8e76a0
  %878 = bitcast i8* %877 to i64*
  %879 = getelementptr i8, i8* %877, i32 14
  store i8 1, i8* %879
  %880 = getelementptr i8, i8* %877, i32 124
  store i8 0, i8* %880
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %881 = getelementptr i64, i64* %878, i32 10
  store i64 0, i64* %881
  %882 = getelementptr i8, i8* %877, i32 15
  store i8 0, i8* %882
  store i64 0, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %883 = getelementptr i8, i8* %877, i32 13
  store i8 1, i8* %883
  %884 = getelementptr i64, i64* %878, i32 3
  store i64 0, i64* %884
  %885 = getelementptr i64, i64* %878, i32 9
  store i64 0, i64* %885
  br label %inst_3073

inst_34fc:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %886 = phi i64 [ %1836, %1862 ], [ %2050, %2076 ], [ %2050, %inst_3509 ], [ %1836, %inst_317d ], [ %1629, %1655 ], [ %1629, %inst_3020 ]
  %887 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %888 = add i64 %886, 4
  br label %inst_3500

inst_36ff:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %889 = phi i64 [ %1836, %1862 ], [ %2050, %2076 ], [ %2050, %inst_3509 ], [ %1836, %inst_317d ], [ %1629, %1655 ], [ %1629, %inst_3020 ]
  %890 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %891 = add i64 %889, 1
  br label %inst_3700

inst_3700:                                        ; preds = %inst_36ff, %inst_30a2
  %892 = phi i64 [ %568, %inst_30a2 ], [ %891, %inst_36ff ]
  %893 = phi %struct.Memory* [ %417, %inst_30a2 ], [ %890, %inst_36ff ]
  %894 = load i64*, i64** @RSP_2312_56234d8e7800
  %895 = load i8*, i8** @RSP_2312_56234d8e76a0
  %896 = load i64, i64* @RSP_2312_56234d8dffa8
  %897 = bitcast i8* %895 to i32*
  %898 = getelementptr i32, i32* %897, i32 2
  %899 = load i32, i32* %898
  %900 = sub i32 %899, 2
  %901 = icmp eq i32 %900, 0
  %902 = zext i1 %901 to i8
  %903 = getelementptr i8, i8* %895, i32 15
  %904 = load i8, i8* %903
  %905 = zext i8 %904 to i64
  store i64 %905, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %906 = load i32, i32* @R8_2344_56234d8dff90
  %907 = zext i32 %906 to i64
  %908 = and i64 %907, 4294967295
  store i64 %908, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %909 = load i64, i64* @R11_2392_56234d8dffa8
  store i64 %909, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  store i8 %902, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  %910 = trunc i64 %905 to i32
  %911 = zext i32 %910 to i64
  %912 = and i64 %911, 4294967295
  %913 = load i64, i64* @R15_2456_56234d8dffa8
  %914 = icmp eq i64 %913, 0
  %915 = zext i1 %914 to i8
  store i8 %915, i8* @RCX_2248_56234d8dff60, align 1, !tbaa !1240
  %916 = trunc i64 %912 to i32
  %917 = zext i32 %916 to i64
  %918 = load i32, i32* @RDX_2264_56234d8dff90
  %919 = zext i32 %918 to i64
  %920 = and i64 %919, %917
  %921 = and i64 %920, 4294967295
  store i64 %921, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %922 = trunc i64 %921 to i8
  %923 = zext i8 %922 to i64
  %924 = zext i8 %915 to i64
  %925 = and i64 %924, %923
  %926 = trunc i64 %925 to i8
  store i8 %926, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %927 = icmp eq i8 %926, 0
  %928 = zext i1 %927 to i8
  %929 = icmp eq i8 %928, 0
  br i1 %929, label %inst_4186, label %inst_3725

inst_3680:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %930 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 13, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  store i64 114, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32c2

inst_3f07:                                        ; preds = %inst_3ef2, %inst_3f00
  %931 = phi %struct.Memory* [ %757, %inst_3ef2 ], [ %112, %inst_3f00 ]
  %932 = load i64, i64* @RAX_2216_56234d8dffa8
  %933 = add i64 1, %932
  store i64 %933, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %934 = load i64, i64* @RBP_2328_56234d8dffa8
  %935 = add i64 %933, %934
  %936 = load i64, i64* @R11_2392_56234d8dffa8
  %937 = sub i64 %936, %935
  %938 = icmp ult i64 %936, %935
  %939 = zext i1 %938 to i8
  %940 = icmp eq i64 %937, 0
  %941 = zext i1 %940 to i8
  %942 = or i8 %941, %939
  %943 = icmp eq i8 %942, 0
  br i1 %943, label %inst_3f00, label %inst_3f15

inst_3308:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %944 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %945 = load i32*, i32** @RSP_2312_56234d8ed000
  %946 = load i8*, i8** @RSP_2312_56234d8e76a0
  %947 = getelementptr i32, i32* %945, i32 2
  %948 = load i32, i32* %947
  %949 = sub i32 %948, 2
  %950 = icmp eq i32 %949, 0
  br i1 %950, label %inst_36e0, label %inst_3313

inst_3110:                                        ; preds = %inst_30e8, %inst_30e2, %inst_30d7
  %951 = phi i64 [ %1722, %inst_30d7 ], [ %1751, %inst_30e2 ], [ ptrtoint (i8* @data_3110 to i64), %inst_30e8 ]
  %952 = phi %struct.Memory* [ %417, %inst_30d7 ], [ %417, %inst_30e2 ], [ %1765, %inst_30e8 ]
  %953 = load i64, i64* @RBX_2232_56234d8dffa8
  %954 = load i64, i64* @R11_2392_56234d8dffa8
  %955 = sub i64 %953, %954
  %956 = icmp ult i64 %953, %954
  %957 = zext i1 %956 to i8
  store i8 %957, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %958 = trunc i64 %955 to i32
  %959 = and i32 %958, 255
  %960 = call i32 @llvm.ctpop.i32(i32 %959) #13, !range !1234
  %961 = trunc i32 %960 to i8
  %962 = and i8 %961, 1
  %963 = xor i8 %962, 1
  store i8 %963, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %964 = xor i64 %954, %953
  %965 = xor i64 %964, %955
  %966 = lshr i64 %965, 4
  %967 = trunc i64 %966 to i8
  %968 = and i8 %967, 1
  store i8 %968, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %969 = icmp eq i64 %955, 0
  %970 = zext i1 %969 to i8
  store i8 %970, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %971 = lshr i64 %955, 63
  %972 = trunc i64 %971 to i8
  store i8 %972, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %973 = lshr i64 %953, 63
  %974 = lshr i64 %954, 63
  %975 = xor i64 %974, %973
  %976 = xor i64 %971, %973
  %977 = add nuw nsw i64 %976, %975
  %978 = icmp eq i64 %977, 2
  %979 = zext i1 %978 to i8
  store i8 %979, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %980 = load i64*, i64** @RSP_2312_56234d8e7800
  %981 = bitcast i64* %980 to i8*
  %982 = load i8, i8* @R10_2376_56234d8dff60
  %983 = getelementptr i8, i8* %981, i32 40
  store i8 %982, i8* %983
  %984 = or i8 %970, %957
  %985 = icmp eq i8 %984, 0
  br i1 %985, label %inst_36d0, label %inst_311e

inst_3f15:                                        ; preds = %inst_3f07, %inst_3f00
  %986 = phi %struct.Memory* [ %112, %inst_3f00 ], [ %931, %inst_3f07 ]
  %987 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %987, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3f18

inst_3e70:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_39b0
  %988 = phi %struct.Memory* [ %1466, %inst_39b0 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %989 = load i8*, i8** @RSP_2312_56234d8e76a0
  %990 = getelementptr i8, i8* %989, i32 15
  %991 = load i8, i8* %990
  %992 = zext i8 %991 to i64
  store i64 %992, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %993 = load i64, i64* @R11_2392_56234d8dffa8
  store i64 %993, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %994 = getelementptr i8, i8* %989, i32 13
  store i8 %991, i8* %994
  br label %inst_3b29

inst_35da:                                        ; preds = %inst_35d5, %inst_35d0
  %995 = load i32, i32* %1326
  %996 = sub i32 %995, 2
  %997 = icmp eq i32 %996, 0
  %998 = add i64 %1513, 1
  store i64 %998, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br i1 %997, label %inst_3be9, label %inst_35e9

inst_331e:                                        ; preds = %inst_3313, %inst_3520
  %999 = phi %struct.Memory* [ %1005, %inst_3520 ], [ %944, %inst_3313 ]
  %1000 = load i64*, i64** @RSP_2312_56234d8e7800
  %1001 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1002 = getelementptr i8, i8* %1001, i32 15
  %1003 = load i8, i8* %1002
  %1004 = icmp eq i8 %1003, 0
  br i1 %1004, label %inst_3530, label %inst_3329

inst_3520:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %1005 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %1006 = load i64, i64* @RSP_2312_56234d8dffa8
  %1007 = add i64 %1006, 13
  %1008 = inttoptr i64 %1007 to i8*
  %1009 = load i8, i8* %1008
  %1010 = icmp eq i8 %1009, 0
  %1011 = zext i1 %1010 to i8
  %1012 = icmp eq i8 %1011, 0
  br i1 %1012, label %inst_331e, label %inst_3530

inst_3230:                                        ; preds = %inst_339b, %inst_3a34, %inst_3229, %inst_320c
  %1013 = phi %struct.Memory* [ %1466, %inst_3a34 ], [ %127, %inst_320c ], [ %127, %inst_3229 ], [ %1093, %inst_339b ]
  %1014 = load i64, i64* @R15_2456_56234d8dffa8
  %1015 = load i64, i64* @R13_2424_56234d8dffa8
  %1016 = icmp ult i64 %1014, %1015
  %1017 = zext i1 %1016 to i8
  %1018 = icmp eq i8 %1017, 0
  br i1 %1018, label %inst_3239, label %inst_3235

inst_3b29:                                        ; preds = %inst_3b12, %inst_4186, %inst_412a, %inst_40e5, %inst_4050, %inst_3ba8, %inst_3e70, %inst_341e
  %1019 = phi i64 [ undef, %inst_3ba8 ], [ undef, %inst_4186 ], [ undef, %inst_3e70 ], [ %2595, %inst_3b12 ], [ undef, %inst_412a ], [ undef, %inst_341e ], [ undef, %inst_4050 ], [ undef, %inst_40e5 ]
  %1020 = phi %struct.Memory* [ %1429, %inst_3ba8 ], [ %893, %inst_4186 ], [ %988, %inst_3e70 ], [ %1341, %inst_3b12 ], [ %1322, %inst_412a ], [ %196, %inst_341e ], [ %1563, %inst_4050 ], [ %1799, %inst_40e5 ]
  %1021 = add i64 %1019, 5
  %1022 = load i32*, i32** @RSP_2312_56234d8ed000
  %1023 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1024 = getelementptr i8, i8* %1023, i32 13
  %1025 = load i8, i8* %1024
  %1026 = icmp eq i8 %1025, 0
  %1027 = zext i1 %1026 to i8
  %1028 = add i64 %1021, 2
  %1029 = add i64 %1028, 16
  %1030 = icmp eq i8 %1027, 0
  %1031 = select i1 %1030, i64 %1028, i64 %1029
  br i1 %1026, label %inst_3b40, label %inst_3b30

inst_3391:                                        ; preds = %inst_3358, %inst_338a
  %1032 = load i64, i64* @R13_2424_56234d8dffa8
  %1033 = load i64, i64* @R15_2456_56234d8dffa8
  %1034 = sub i64 %1032, %1033
  %1035 = icmp ult i64 %1032, %1033
  %1036 = zext i1 %1035 to i8
  %1037 = icmp eq i64 %1034, 0
  %1038 = zext i1 %1037 to i8
  %1039 = or i8 %1038, %1036
  %1040 = icmp ne i8 %1039, 0
  br i1 %1040, label %inst_339b, label %inst_3396

inst_3530:                                        ; preds = %inst_3313, %inst_3520, %inst_331e
  %1041 = phi %struct.Memory* [ %999, %inst_331e ], [ %944, %inst_3313 ], [ %1005, %inst_3520 ]
  store i64 92, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 92, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32d4

inst_3d34:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %1042 = phi i64 [ %1836, %1862 ], [ %2050, %2076 ], [ %2050, %inst_3509 ], [ %1836, %inst_317d ], [ %1629, %1655 ], [ %1629, %inst_3020 ]
  %1043 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %1044 = add i64 %1042, 5
  %1045 = load i64, i64* @RSP_2312_56234d8dffa8
  %1046 = add i64 %1045, 8
  %1047 = inttoptr i64 %1046 to i32*
  %1048 = load i32, i32* %1047
  %1049 = sub i32 %1048, 10
  %1050 = icmp eq i32 %1049, 0
  %1051 = zext i1 %1050 to i8
  %1052 = add i64 %1044, 2
  %1053 = add i64 %1052, 86
  %1054 = icmp eq i8 %1051, 0
  %1055 = select i1 %1054, i64 %1052, i64 %1053
  br i1 %1050, label %inst_3d91, label %inst_3d3b

inst_3340:                                        ; preds = %inst_3335, %inst_3698, %inst_32d4, %inst_3570, %inst_36c0
  %1056 = phi %struct.Memory* [ %267, %inst_36c0 ], [ %760, %inst_32d4 ], [ %999, %inst_3335 ], [ %1494, %inst_3698 ], [ %689, %inst_3570 ]
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3343

inst_3ae0:                                        ; preds = %_ZN12_GLOBAL__N_13SHLI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit, %inst_3aed, %inst_3ade
  %1057 = phi i64 [ %1361, %inst_3aed ], [ %2583, %_ZN12_GLOBAL__N_13SHLI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %774, %inst_3ade ]
  %1058 = phi %struct.Memory* [ %1341, %inst_3aed ], [ %1341, %_ZN12_GLOBAL__N_13SHLI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ], [ %773, %inst_3ade ]
  %1059 = add i64 %1057, 4
  %1060 = load i64, i64* @RDX_2264_56234d8dffa8
  %1061 = add i64 1, %1060
  store i64 %1061, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1062 = lshr i64 %1061, 63
  %1063 = add i64 %1059, 3
  %1064 = load i64, i64* @R8_2344_56234d8dffa8
  %1065 = sub i64 %1064, %1061
  %1066 = icmp ult i64 %1064, %1061
  %1067 = zext i1 %1066 to i8
  store i8 %1067, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1068 = trunc i64 %1065 to i32
  %1069 = and i32 %1068, 255
  %1070 = call i32 @llvm.ctpop.i32(i32 %1069) #13, !range !1234
  %1071 = trunc i32 %1070 to i8
  %1072 = and i8 %1071, 1
  %1073 = xor i8 %1072, 1
  store i8 %1073, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1074 = xor i64 %1061, %1064
  %1075 = xor i64 %1074, %1065
  %1076 = lshr i64 %1075, 4
  %1077 = trunc i64 %1076 to i8
  %1078 = and i8 %1077, 1
  store i8 %1078, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1079 = icmp eq i64 %1065, 0
  %1080 = zext i1 %1079 to i8
  store i8 %1080, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1081 = lshr i64 %1065, 63
  %1082 = trunc i64 %1081 to i8
  store i8 %1082, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1083 = lshr i64 %1064, 63
  %1084 = xor i64 %1062, %1083
  %1085 = xor i64 %1081, %1083
  %1086 = add nuw nsw i64 %1085, %1084
  %1087 = icmp eq i64 %1086, 2
  %1088 = zext i1 %1087 to i8
  store i8 %1088, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1089 = add i64 %1063, 6
  %1090 = sub i64 %1089, 452
  %1091 = icmp eq i8 %1080, 0
  %1092 = select i1 %1091, i64 %1089, i64 %1090
  br i1 %1079, label %inst_3929, label %inst_3aed

inst_3343:                                        ; preds = %inst_31e5, %inst_31f9, %inst_3340
  %1093 = phi %struct.Memory* [ %1553, %inst_31f9 ], [ %1056, %inst_3340 ], [ %1547, %inst_31e5 ]
  %1094 = load i32*, i32** @RSP_2312_56234d8ed000
  %1095 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1096 = getelementptr i32, i32* %1094, i32 2
  %1097 = load i32, i32* %1096
  %1098 = sub i32 %1097, 2
  %1099 = icmp eq i32 %1098, 0
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  %1101 = getelementptr i8, i8* %1095, i32 15
  %1102 = load i8, i8* %1101
  %1103 = icmp eq i8 %1102, 0
  %1104 = zext i1 %1103 to i8
  %1105 = load i32, i32* @RDX_2264_56234d8dff90
  %1106 = zext i32 %1105 to i64
  %1107 = and i64 %1106, 4294967295
  store i64 %1107, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1108 = icmp eq i8 %1104, 0
  br i1 %1108, label %inst_3ba8, label %inst_3358

inst_3951:                                        ; preds = %inst_3929, %inst_38d3
  %1109 = phi %struct.Memory* [ %757, %inst_38d3 ], [ %870, %inst_3929 ]
  %1110 = load i32, i32* @R12_2408_56234d8dff90
  %1111 = zext i32 %1110 to i64
  %1112 = and i64 %1111, 4294967295
  %1113 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %1113, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1114 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1115 = bitcast i8* %1114 to i64*
  %1116 = getelementptr i8, i8* %1114, i32 125
  %1117 = load i8, i8* %1116
  %1118 = zext i8 %1117 to i64
  store i64 %1118, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %1119 = trunc i64 %1112 to i32
  %1120 = zext i32 %1119 to i64
  %1121 = xor i64 1, %1120
  %1122 = and i64 %1121, 4294967295
  store i64 %1122, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1123 = getelementptr i8, i8* %1114, i32 126
  %1124 = load i8, i8* %1123
  %1125 = zext i8 %1124 to i64
  store i64 %1125, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1126 = getelementptr i8, i8* %1114, i32 127
  %1127 = load i8, i8* %1126
  %1128 = zext i8 %1127 to i64
  store i64 %1128, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %1129 = trunc i64 %1122 to i8
  %1130 = getelementptr i8, i8* %1114, i32 13
  %1131 = load i8, i8* %1130
  %1132 = and i8 %1131, %1129
  store i8 %1132, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  %1133 = getelementptr i64, i64* %1115, i32 16
  %1134 = load i64, i64* %1133
  store i64 %1134, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1135 = getelementptr i64, i64* %1115, i32 8
  %1136 = load i64, i64* %1135
  store i64 %1136, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %1137 = getelementptr i64, i64* %1115, i32 14
  %1138 = load i64, i64* %1137
  store i64 %1138, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %1139 = getelementptr i64, i64* %1115, i32 6
  %1140 = load i64, i64* %1139
  store i64 %1140, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3986

inst_3558:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %1141 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 10, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  store i64 110, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32c2

inst_33b0:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %1142 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %1143 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1144 = getelementptr i8, i8* %1143, i32 13
  %1145 = load i8, i8* %1144
  %1146 = icmp eq i8 %1145, 0
  %1147 = zext i1 %1146 to i8
  %1148 = icmp eq i8 %1147, 0
  br i1 %1148, label %inst_3583, label %inst_33bb

inst_3490:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_3500, %inst_348f
  %1149 = phi i64 [ %1836, %1862 ], [ %449, %inst_348f ], [ %1465, %inst_3500 ], [ %2050, %2076 ], [ %2050, %inst_3509 ], [ %1836, %inst_317d ], [ %1629, %1655 ], [ %1629, %inst_3020 ]
  %1150 = phi %struct.Memory* [ %1306, %1862 ], [ %448, %inst_348f ], [ %1450, %inst_3500 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %1151 = add i64 %1149, 3
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %1152 = add i64 %1151, 5
  br label %inst_3498

inst_3764:                                        ; preds = %inst_41aa, %inst_375f
  %1153 = phi %struct.Memory* [ %1570, %inst_41aa ], [ %893, %inst_375f ]
  %1154 = load i8*, i8** @R14_2440_56234d8e76a0
  store i8 39, i8* %1154
  %1155 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1156 = bitcast i8* %1155 to i64*
  %1157 = bitcast i8* %1155 to i32*
  %1158 = getelementptr i32, i32* %1157, i32 2
  store i32 2, i32* %1158
  store i64 1, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1159 = getelementptr i64, i64* %1156, i32 3
  store i64 1, i64* %1159
  %1160 = getelementptr i8, i8* %1155, i32 15
  store i8 0, i8* %1160
  %1161 = getelementptr i64, i64* %1156, i32 9
  store i64 ptrtoint (i8* @data_62dd to i64), i64* %1161
  %1162 = load i8, i8* @RAX_2216_56234d8dff60
  %1163 = getelementptr i8, i8* %1155, i32 124
  store i8 %1162, i8* %1163
  br label %inst_3073

inst_3fe6:                                        ; preds = %inst_3fe0, %inst_3fd7
  %1164 = add i64 %2821, 3
  %1165 = sub i64 %2820, %1164
  %1166 = icmp ult i64 %2820, %1164
  %1167 = zext i1 %1166 to i8
  %1168 = icmp eq i64 %1165, 0
  %1169 = zext i1 %1168 to i8
  %1170 = or i8 %1169, %1167
  %1171 = icmp ne i8 %1170, 0
  br i1 %1171, label %inst_3ff5, label %inst_3fef

inst_3d66:                                        ; preds = %inst_40fe, %inst_3d3b
  %1172 = phi %struct.Memory* [ %2759, %inst_40fe ], [ %2720, %inst_3d3b ]
  %1173 = add i64 %2749, 7
  store i8* @data_62dd, i8** @RSI_2280_56234d8e76a0
  %1174 = add i64 %1173, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1175 = add i64 %1174, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1176 = add i64 %1175, 5
  %1177 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1178 = add i64 %1177, -8
  %1179 = inttoptr i64 %1178 to i64*
  store i64 %1176, i64* %1179
  store i64 %1178, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1180 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1172)
  %1181 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %1181, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %1182 = load i64*, i64** @RSP_2312_56234d8e7800
  %1183 = load i32*, i32** @RSP_2312_56234d8ed000
  %1184 = getelementptr i64, i64* %1182, i32 12
  store i64 %1181, i64* %1184
  store i8* @data_62dd, i8** @RAX_2216_56234d8e76a0
  %1185 = sub i64 %1181, ptrtoint (i8* @data_62dd to i64)
  %1186 = icmp ult i64 %1181, ptrtoint (i8* @data_62dd to i64)
  %1187 = zext i1 %1186 to i8
  store i8 %1187, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1188 = trunc i64 %1185 to i32
  %1189 = and i32 %1188, 255
  %1190 = call i32 @llvm.ctpop.i32(i32 %1189) #13, !range !1234
  %1191 = trunc i32 %1190 to i8
  %1192 = and i8 %1191, 1
  %1193 = xor i8 %1192, 1
  store i8 %1193, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1194 = xor i64 ptrtoint (i8* @data_62dd to i64), %1181
  %1195 = xor i64 %1194, %1185
  %1196 = lshr i64 %1195, 4
  %1197 = trunc i64 %1196 to i8
  %1198 = and i8 %1197, 1
  store i8 %1198, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1199 = icmp eq i64 %1185, 0
  %1200 = zext i1 %1199 to i8
  store i8 %1200, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1201 = lshr i64 %1185, 63
  %1202 = trunc i64 %1201 to i8
  store i8 %1202, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1203 = lshr i64 %1181, 63
  %1204 = xor i64 %1201, %1203
  %1205 = add nuw nsw i64 %1204, %1203
  %1206 = icmp eq i64 %1205, 2
  %1207 = zext i1 %1206 to i8
  store i8 %1207, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1208 = icmp eq i8 %1200, 0
  %1209 = select i1 %1208, i64 ptrtoint (i8* @data_3d91 to i64), i64 ptrtoint (i8* @data_4114 to i64)
  br i1 %1199, label %inst_4114, label %inst_3d91

inst_336c:                                        ; preds = %inst_3367, %inst_3362
  %1210 = add i64 %1962, 1
  %1211 = sub i64 %1961, %1210
  %1212 = icmp ult i64 %1961, %1210
  %1213 = zext i1 %1212 to i8
  %1214 = icmp eq i64 %1211, 0
  %1215 = zext i1 %1214 to i8
  %1216 = or i8 %1215, %1213
  %1217 = icmp ne i8 %1216, 0
  br i1 %1217, label %inst_337b, label %inst_3375

inst_3f70:                                        ; preds = %inst_3f5d, %inst_3f79
  %1218 = load i64, i64* @R13_2424_56234d8dffa8
  %1219 = load i64, i64* @R15_2456_56234d8dffa8
  %1220 = sub i64 %1218, %1219
  %1221 = icmp ult i64 %1218, %1219
  %1222 = zext i1 %1221 to i8
  %1223 = icmp eq i64 %1220, 0
  %1224 = zext i1 %1223 to i8
  %1225 = or i8 %1224, %1222
  %1226 = icmp ne i8 %1225, 0
  br i1 %1226, label %inst_3f79, label %inst_3f75

inst_3fc8:                                        ; preds = %inst_3fc3, %inst_3fbe
  %1227 = add i64 %2821, 1
  %1228 = sub i64 %2820, %1227
  %1229 = icmp ult i64 %2820, %1227
  %1230 = zext i1 %1229 to i8
  %1231 = icmp eq i64 %1228, 0
  %1232 = zext i1 %1231 to i8
  %1233 = or i8 %1232, %1230
  %1234 = icmp ne i8 %1233, 0
  br i1 %1234, label %inst_3fd7, label %inst_3fd1

inst_3f79:                                        ; preds = %inst_3f75, %inst_3f70
  %1235 = add i64 1, %1219
  store i64 %1235, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1236 = add i64 %1235, %2782
  %1237 = inttoptr i64 %1236 to i8*
  %1238 = load i8, i8* %1237
  %1239 = zext i8 %1238 to i64
  store i64 %1239, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1240 = icmp eq i8 %1238, 0
  %1241 = zext i1 %1240 to i8
  %1242 = icmp eq i8 %1241, 0
  br i1 %1242, label %inst_3f70, label %inst_3d9c

inst_353f:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %1243 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  br label %inst_3540

inst_3580:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %1244 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3583

inst_3b40:                                        ; preds = %inst_41a2, %inst_3b30, %inst_3b29
  %1245 = phi i64 [ %1031, %inst_3b29 ], [ undef, %inst_41a2 ], [ %2609, %inst_3b30 ]
  %1246 = phi %struct.Memory* [ %1020, %inst_3b29 ], [ %1585, %inst_41a2 ], [ %1020, %inst_3b30 ]
  %1247 = add i64 %1245, 4
  %1248 = load i64, i64* @RSP_2312_56234d8dffa8
  %1249 = sub i64 %1248, 8
  %1250 = inttoptr i64 %1249 to i64*
  %1251 = inttoptr i64 %1249 to i32*
  %1252 = add i64 %1247, 3
  %1253 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %1253, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %1254 = add i64 %1252, 3
  %1255 = load i64, i64* @R13_2424_56234d8dffa8
  store i64 %1255, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1256 = add i64 %1254, 4
  %1257 = getelementptr i64, i64* %1250, i32 13
  %1258 = load i64, i64* %1257
  %1259 = add i64 %1249, -8
  %1260 = getelementptr i64, i64* %1250, i32 -1
  %1261 = getelementptr i32, i32* %1251, i32 -2
  store i64 %1258, i64* %1260
  %1262 = add i64 %1256, 4
  %1263 = getelementptr i64, i64* %1260, i32 15
  %1264 = load i64, i64* %1263
  %1265 = add i64 %1259, -8
  %1266 = getelementptr i64, i64* %1260, i32 -1
  %1267 = getelementptr i32, i32* %1261, i32 -2
  store i64 %1264, i64* %1266
  %1268 = add i64 %1262, 3
  %1269 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %1269, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1270 = add i64 %1268, 2
  %1271 = add i64 %1265, -8
  %1272 = getelementptr i64, i64* %1266, i32 -1
  %1273 = getelementptr i32, i32* %1267, i32 -2
  store i64 0, i64* %1272
  %1274 = add i64 %1270, 8
  %1275 = getelementptr i32, i32* %1273, i32 38
  %1276 = load i32, i32* %1275
  %1277 = zext i32 %1276 to i64
  %1278 = add i64 %1274, 5
  %1279 = getelementptr i32, i32* %1273, i32 10
  %1280 = load i32, i32* %1279
  %1281 = zext i32 %1280 to i64
  store i64 %1281, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %1282 = add i64 %1278, 5
  %1283 = getelementptr i64, i64* %1272, i32 6
  %1284 = load i64, i64* %1283
  store i64 %1284, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1285 = add i64 %1282, 4
  %1286 = and i64 -3, %1277
  %1287 = trunc i64 %1286 to i32
  %1288 = and i64 %1286, 4294967295
  store i64 %1288, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1289 = and i32 %1287, 255
  %1290 = call i32 @llvm.ctpop.i32(i32 %1289) #13, !range !1234
  %1291 = trunc i32 %1290 to i8
  %1292 = and i8 %1291, 1
  %1293 = xor i8 %1292, 1
  store i8 %1293, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1294 = icmp eq i32 %1287, 0
  %1295 = zext i1 %1294 to i8
  store i8 %1295, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1296 = lshr i32 %1287, 31
  %1297 = trunc i32 %1296 to i8
  store i8 %1297, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1298 = add i64 %1285, 5
  %1299 = add i64 %1271, -8
  %1300 = getelementptr i64, i64* %1272, i32 -1
  store i64 %1298, i64* %1300
  store i64 %1299, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1301 = call %struct.Memory* @sub_2fa0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1246)
  %1302 = load i64, i64* @RSP_2312_56234d8dffa8
  %1303 = add i64 32, %1302
  store i64 %1303, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1304 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %1304, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3b79

inst_3170:                                        ; preds = %inst_3157, %inst_30ab, %inst_36d0
  %1305 = phi i64 [ %1705, %inst_30ab ], [ undef, %inst_36d0 ], [ add (i64 ptrtoint (i8* @data_3157 to i64), i64 25), %inst_3157 ]
  %1306 = phi %struct.Memory* [ %417, %inst_30ab ], [ %688, %inst_36d0 ], [ %1799, %inst_3157 ]
  %1307 = add i64 %1305, 4
  %1308 = load i8*, i8** @R9_2360_56234d8e76a0
  %1309 = load i8, i8* %1308
  %1310 = zext i8 %1309 to i64
  store i64 %1310, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1311 = add i64 %1307, 3
  %1312 = sub i8 %1309, 126
  %1313 = icmp ult i8 %1309, 126
  %1314 = zext i1 %1313 to i8
  %1315 = icmp eq i8 %1312, 0
  %1316 = zext i1 %1315 to i8
  %1317 = add i64 %1311, 6
  %1318 = add i64 %1317, 795
  %1319 = or i8 %1316, %1314
  %1320 = icmp eq i8 %1319, 0
  %1321 = select i1 %1320, i64 %1318, i64 %1317
  br i1 %1320, label %inst_3498, label %inst_317d

inst_3583:                                        ; preds = %inst_3580, %inst_33b0
  %1322 = phi %struct.Memory* [ %1244, %inst_3580 ], [ %1142, %inst_33b0 ]
  %1323 = load i64*, i64** @RSP_2312_56234d8e7800
  %1324 = load i32*, i32** @RSP_2312_56234d8ed000
  %1325 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1326 = getelementptr i32, i32* %1324, i32 2
  %1327 = load i32, i32* %1326
  %1328 = sub i32 %1327, 2
  %1329 = icmp eq i32 %1328, 0
  %1330 = zext i1 %1329 to i8
  store i8 %1330, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  %1331 = getelementptr i8, i8* %1325, i32 15
  %1332 = load i8, i8* %1331
  %1333 = icmp eq i8 %1332, 0
  %1334 = zext i1 %1333 to i8
  %1335 = icmp eq i8 %1334, 0
  br i1 %1335, label %inst_412a, label %inst_3596

inst_338a:                                        ; preds = %inst_3384, %inst_337b
  %1336 = add i64 3, %1962
  store i64 %1336, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1337 = load i32, i32* @RAX_2216_56234d8dff90
  %1338 = zext i32 %1337 to i64
  %1339 = and i64 %1338, 4294967295
  store i64 %1339, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3391

inst_3aed:                                        ; preds = %inst_3aca, %inst_3ae0
  %1340 = phi i64 [ undef, %inst_3aca ], [ %1092, %inst_3ae0 ]
  %1341 = phi %struct.Memory* [ %607, %inst_3aca ], [ %1058, %inst_3ae0 ]
  %1342 = add i64 %1340, 3
  %1343 = load i8*, i8** @RDX_2264_56234d8e76a0
  %1344 = load i8, i8* %1343
  %1345 = zext i8 %1344 to i64
  %1346 = add i64 %1342, 3
  %1347 = trunc i64 %1345 to i32
  %1348 = sub i32 %1347, 91
  %1349 = zext i32 %1348 to i64
  store i64 %1349, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %1350 = add i64 %1346, 3
  %1351 = trunc i64 %1349 to i8
  %1352 = sub i8 %1351, 33
  %1353 = icmp ult i8 %1351, 33
  %1354 = zext i1 %1353 to i8
  %1355 = icmp eq i8 %1352, 0
  %1356 = zext i1 %1355 to i8
  %1357 = add i64 %1350, 2
  %1358 = sub i64 %1357, 24
  %1359 = or i8 %1356, %1354
  %1360 = icmp eq i8 %1359, 0
  %1361 = select i1 %1360, i64 %1358, i64 %1357
  br i1 %1360, label %inst_3ae0, label %inst_3af8

inst_3990:                                        ; preds = %inst_3e81, %inst_3986
  %1362 = phi %struct.Memory* [ %799, %inst_3e81 ], [ %1440, %inst_3986 ]
  %1363 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1364 = load i64*, i64** @RSP_2312_56234d8e7800
  %1365 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1366 = getelementptr i8, i8* %1365, i32 15
  %1367 = load i8, i8* %1366
  %1368 = zext i8 %1367 to i64
  store i64 %1368, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %1369 = load i64, i64* @RBP_2328_56234d8dffa8
  %1370 = add i64 %1369, %1363
  store i64 %1370, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %1371 = getelementptr i64, i64* %1364, i32 2
  %1372 = load i64, i64* %1371
  store i64 %1372, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3a5e

inst_3d91:                                        ; preds = %inst_4114, %inst_3d66, %inst_3d34
  %1373 = phi i64 [ %1055, %inst_3d34 ], [ undef, %inst_4114 ], [ %1209, %inst_3d66 ]
  %1374 = phi %struct.Memory* [ %1043, %inst_3d34 ], [ %2773, %inst_4114 ], [ %1180, %inst_3d66 ]
  %1375 = add i64 %1373, 3
  store i64 0, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1376 = add i64 %1375, 2
  %1377 = load i32, i32* @RBX_2232_56234d8dff90
  %1378 = icmp eq i32 %1377, 0
  %1379 = zext i1 %1378 to i8
  %1380 = add i64 %1376, 6
  %1381 = add i64 %1380, 449
  %1382 = icmp eq i8 %1379, 0
  %1383 = select i1 %1382, i64 %1380, i64 %1381
  br i1 %1378, label %inst_3f5d, label %inst_3d9c

inst_4198:                                        ; preds = %inst_4193, %inst_4008
  %1384 = phi %struct.Memory* [ %2619, %inst_4193 ], [ %812, %inst_4008 ]
  %1385 = load i64, i64* @RSP_2312_56234d8dffa8
  %1386 = add i64 %1385, 13
  %1387 = inttoptr i64 %1386 to i8*
  store i8 0, i8* %1387
  br label %inst_3c11

inst_339b:                                        ; preds = %inst_3396, %inst_3391
  %1388 = add i64 1, %1033
  store i64 %1388, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1389 = load i64, i64* @RBP_2328_56234d8dffa8
  %1390 = add i64 1, %1389
  store i64 %1390, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3230

inst_3d9c:                                        ; preds = %inst_3f5d, %inst_3d91, %inst_3f79
  %1391 = phi i64 [ %2793, %inst_3f5d ], [ %1383, %inst_3d91 ], [ undef, %inst_3f79 ]
  %1392 = add i64 %1391, 2
  %1393 = add i64 %1392, 5
  %1394 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1395 = load i64*, i64** @RSP_2312_56234d8e7800
  %1396 = load i64, i64* @RSP_2312_56234d8dffa8
  %1397 = getelementptr i64, i64* %1395, i32 12
  %1398 = load i64, i64* %1397
  store i64 %1398, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1399 = add i64 %1393, 5
  %1400 = zext i1 %1382 to i8
  %1401 = getelementptr i8, i8* %1394, i32 15
  store i8 %1400, i8* %1401
  %1402 = add i64 %1399, 3
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1403 = add i64 %1402, 3
  store i64 %1398, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1404 = add i64 %1403, 5
  %1405 = add i64 %1396, -8
  %1406 = getelementptr i64, i64* %1395, i32 -1
  store i64 %1404, i64* %1406
  store i64 %1405, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1407 = call %struct.Memory* @ext_2082d8_strlen(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1374)
  %1408 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1409 = bitcast i8* %1408 to i64*
  %1410 = load i64, i64* @RBX_2232_56234d8dffa8
  %1411 = getelementptr i64, i64* %1409, i32 9
  store i64 %1410, i64* %1411
  %1412 = load i64, i64* @RAX_2216_56234d8dffa8
  %1413 = getelementptr i64, i64* %1409, i32 3
  store i64 %1412, i64* %1413
  %1414 = getelementptr i8, i8* %1408, i32 14
  store i8 1, i8* %1414
  %1415 = getelementptr i8, i8* %1408, i32 124
  store i8 0, i8* %1415
  %1416 = getelementptr i64, i64* %1409, i32 10
  store i64 0, i64* %1416
  %1417 = getelementptr i8, i8* %1408, i32 13
  store i8 1, i8* %1417
  br label %inst_3073

inst_37a0:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_3293
  %1418 = phi %struct.Memory* [ %457, %inst_3293 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %1419 = load i64*, i64** @RSP_2312_56234d8e7800
  %1420 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1421 = bitcast i8* %1420 to i64*
  %1422 = getelementptr i8, i8* %1420, i32 15
  %1423 = load i8, i8* %1422
  %1424 = icmp eq i8 %1423, 0
  %1425 = zext i1 %1424 to i8
  %1426 = icmp eq i8 %1425, 0
  br i1 %1426, label %inst_4050, label %inst_37ab

inst_33f0:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %1427 = phi %struct.Memory* [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 7, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 97, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32d4

inst_3ba5:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %1428 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  br label %inst_3ba8

inst_3ba8:                                        ; preds = %inst_3ba5, %inst_3343
  %1429 = phi %struct.Memory* [ %1093, %inst_3343 ], [ %1428, %inst_3ba5 ]
  %1430 = load i64, i64* @R11_2392_56234d8dffa8
  store i64 %1430, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3b29

inst_31ac:                                        ; preds = %inst_31a0, %inst_3193
  %1431 = load i64, i64* @RSP_2312_56234d8dffa8
  %1432 = add i64 %1431, 8
  %1433 = inttoptr i64 %1432 to i32*
  %1434 = load i32, i32* %1433
  %1435 = sub i32 %1434, 2
  %1436 = icmp eq i32 %1435, 0
  %1437 = zext i1 %1436 to i8
  store i8 %1437, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  %1438 = load i8, i8* @RAX_2216_56234d8dff60
  %1439 = icmp eq i8 %1438, 0
  br i1 %1439, label %inst_3408, label %inst_31bc

inst_3986:                                        ; preds = %inst_3f25, %inst_3951, %inst_3f18
  %1440 = phi %struct.Memory* [ %1109, %inst_3951 ], [ %757, %inst_3f25 ], [ %451, %inst_3f18 ]
  %1441 = load i64, i64* @RDI_2296_56234d8dffa8
  %1442 = sub i64 %1441, 1
  %1443 = icmp ult i64 %1441, 1
  %1444 = zext i1 %1443 to i8
  %1445 = icmp eq i64 %1442, 0
  %1446 = zext i1 %1445 to i8
  %1447 = or i8 %1446, %1444
  %1448 = icmp ne i8 %1447, 0
  br i1 %1448, label %inst_3f8b, label %inst_3990

inst_3500:                                        ; preds = %inst_30c9, %inst_34fc
  %1449 = phi i64 [ %888, %inst_34fc ], [ %1716, %inst_30c9 ]
  %1450 = phi %struct.Memory* [ %887, %inst_34fc ], [ %417, %inst_30c9 ]
  %1451 = add i64 %1449, 4
  %1452 = load i8*, i8** @R9_2360_56234d8e76a0
  %1453 = load i8, i8* %1452
  %1454 = zext i8 %1453 to i64
  store i64 %1454, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1455 = add i64 %1451, 3
  %1456 = sub i8 %1453, 126
  %1457 = icmp ult i8 %1453, 126
  %1458 = zext i1 %1457 to i8
  %1459 = icmp eq i8 %1456, 0
  %1460 = zext i1 %1459 to i8
  %1461 = add i64 %1455, 2
  %1462 = sub i64 %1461, 121
  %1463 = or i8 %1460, %1458
  %1464 = icmp eq i8 %1463, 0
  %1465 = select i1 %1464, i64 %1462, i64 %1461
  br i1 %1464, label %inst_3490, label %inst_3509

inst_39b0:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_3a5e
  %1466 = phi %struct.Memory* [ %361, %inst_3a5e ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %1467 = load i64, i64* @RSP_2312_56234d8dffa8
  %1468 = add i64 %1467, 8
  %1469 = inttoptr i64 %1468 to i32*
  %1470 = load i32, i32* %1469
  %1471 = sub i32 %1470, 2
  %1472 = icmp eq i32 %1471, 0
  %1473 = zext i1 %1472 to i8
  store i8 %1473, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %1474 = load i8, i8* @R9_2360_56234d8dff60
  %1475 = icmp eq i8 %1474, 0
  %1476 = zext i1 %1475 to i8
  %1477 = icmp eq i8 %1476, 0
  br i1 %1477, label %inst_3e70, label %inst_39c1

inst_3bba:                                        ; preds = %inst_3bb5, %inst_3bb0
  %1478 = add i64 %408, 1
  %1479 = sub i64 %2290, %1478
  %1480 = icmp ult i64 %2290, %1478
  %1481 = zext i1 %1480 to i8
  %1482 = icmp eq i64 %1479, 0
  %1483 = zext i1 %1482 to i8
  %1484 = or i8 %1483, %1481
  %1485 = icmp ne i8 %1484, 0
  br i1 %1485, label %inst_3bc9, label %inst_3bc3

inst_35bc:                                        ; preds = %inst_35b6, %inst_35ad
  %1486 = add i64 %2091, 2
  %1487 = sub i64 %2102, %1486
  %1488 = icmp ult i64 %2102, %1486
  %1489 = zext i1 %1488 to i8
  %1490 = icmp eq i64 %1487, 0
  %1491 = zext i1 %1490 to i8
  %1492 = or i8 %1491, %1489
  %1493 = icmp eq i8 %1492, 0
  br i1 %1493, label %inst_3bf9, label %inst_35c9

inst_3698:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %1494 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 118, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3340

inst_31c8:                                        ; preds = %inst_34ef, %inst_329e, %inst_3279, %inst_3ff5, %inst_3e52, %inst_33d8, %inst_3620, %inst_31bc, %inst_3810, %inst_3411, %inst_360b
  %1495 = phi %struct.Memory* [ %153, %inst_3411 ], [ %799, %inst_34ef ], [ %1322, %inst_360b ], [ %1322, %inst_3e52 ], [ %385, %inst_31bc ], [ %457, %inst_329e ], [ %1529, %inst_33d8 ], [ %1585, %inst_3810 ], [ %1585, %inst_3ff5 ], [ %367, %inst_3279 ], [ %637, %inst_3620 ]
  %1496 = load i64, i64* @RSP_2312_56234d8dffa8
  %1497 = add i64 %1496, 13
  %1498 = inttoptr i64 %1497 to i8*
  %1499 = load i8, i8* %1498
  %1500 = sub i8 %1499, 1
  %1501 = icmp eq i8 %1500, 0
  %1502 = zext i1 %1501 to i8
  %1503 = icmp eq i8 %1502, 0
  br i1 %1503, label %inst_32e2, label %inst_31d3

inst_3bc9:                                        ; preds = %inst_3bc3, %inst_3bba
  %1504 = add i64 %408, 2
  %1505 = sub i64 %2290, %1504
  %1506 = icmp ult i64 %2290, %1504
  %1507 = zext i1 %1506 to i8
  %1508 = icmp eq i64 %1505, 0
  %1509 = zext i1 %1508 to i8
  %1510 = or i8 %1509, %1507
  %1511 = icmp ne i8 %1510, 0
  store i64 %2290, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  br i1 %1511, label %inst_41c2, label %inst_3bd6

inst_35d0:                                        ; preds = %inst_3596, %inst_35c9
  %1512 = load i64, i64* @R13_2424_56234d8dffa8
  %1513 = load i64, i64* @RCX_2248_56234d8dffa8
  %1514 = sub i64 %1512, %1513
  %1515 = icmp ult i64 %1512, %1513
  %1516 = zext i1 %1515 to i8
  %1517 = icmp eq i64 %1514, 0
  %1518 = zext i1 %1517 to i8
  %1519 = or i8 %1518, %1516
  %1520 = icmp ne i8 %1519, 0
  br i1 %1520, label %inst_35da, label %inst_35d5

inst_3fd7:                                        ; preds = %inst_3fd1, %inst_3fc8
  %1521 = add i64 %2821, 2
  %1522 = sub i64 %2820, %1521
  %1523 = icmp ult i64 %2820, %1521
  %1524 = zext i1 %1523 to i8
  %1525 = icmp eq i64 %1522, 0
  %1526 = zext i1 %1525 to i8
  %1527 = or i8 %1526, %1524
  %1528 = icmp ne i8 %1527, 0
  br i1 %1528, label %inst_3fe6, label %inst_3fe0

inst_33d8:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %1529 = phi %struct.Memory* [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %1530 = load i64, i64* @RSP_2312_56234d8dffa8
  %1531 = add i64 %1530, 8
  %1532 = inttoptr i64 %1531 to i32*
  %1533 = load i32, i32* %1532
  %1534 = sub i32 %1533, 2
  %1535 = icmp eq i32 %1534, 0
  %1536 = zext i1 %1535 to i8
  store i8 %1536, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31c8

inst_3dda:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020
  %1537 = phi %struct.Memory* [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %1538 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1539 = bitcast i8* %1538 to i64*
  %1540 = getelementptr i8, i8* %1538, i32 14
  store i8 1, i8* %1540
  %1541 = getelementptr i8, i8* %1538, i32 124
  store i8 0, i8* %1541
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %1542 = getelementptr i64, i64* %1539, i32 10
  store i64 0, i64* %1542
  %1543 = getelementptr i8, i8* %1538, i32 15
  store i8 0, i8* %1543
  store i64 0, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1544 = getelementptr i8, i8* %1538, i32 13
  store i8 0, i8* %1544
  %1545 = getelementptr i64, i64* %1539, i32 3
  store i64 0, i64* %1545
  %1546 = getelementptr i64, i64* %1539, i32 9
  store i64 0, i64* %1546
  br label %inst_3073

inst_31db:                                        ; preds = %inst_31d3, %inst_32e2
  %1547 = phi %struct.Memory* [ %783, %inst_32e2 ], [ %1495, %inst_31d3 ]
  %1548 = load i64, i64* @RSP_2312_56234d8dffa8
  %1549 = add i64 %1548, 32
  %1550 = inttoptr i64 %1549 to i64*
  %1551 = load i64, i64* %1550
  store i64 %1551, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1552 = icmp eq i64 %1551, 0
  br i1 %1552, label %inst_31f9, label %inst_31e5

inst_31f9:                                        ; preds = %inst_3833, %inst_3be9, %inst_31e5, %inst_31db, %inst_32e2, %inst_37c2
  %1553 = phi %struct.Memory* [ %1547, %inst_31db ], [ %1322, %inst_3be9 ], [ %1418, %inst_37c2 ], [ %201, %inst_3833 ], [ %1547, %inst_31e5 ], [ %783, %inst_32e2 ]
  %1554 = load i8, i8* @R10_2376_56234d8dff60
  %1555 = icmp eq i8 %1554, 0
  %1556 = zext i1 %1555 to i8
  %1557 = icmp eq i8 %1556, 0
  br i1 %1557, label %inst_3343, label %inst_3202

inst_3c60:                                        ; preds = %2076, %2076, %inst_3509, %inst_3509, %1862, %1862, %inst_317d, %inst_317d, %1655, %1655, %inst_3020, %inst_3020
  %1558 = phi %struct.Memory* [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %1559 = load i32, i32* @RBX_2232_56234d8dff90
  %1560 = icmp eq i32 %1559, 0
  %1561 = zext i1 %1560 to i8
  %1562 = icmp eq i8 %1561, 0
  br i1 %1562, label %inst_405d, label %inst_3c68

inst_4050:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_37a0, %inst_36e0, %inst_3828
  %1563 = phi %struct.Memory* [ %1418, %inst_37a0 ], [ %201, %inst_3828 ], [ %775, %inst_36e0 ], [ %1306, %1862 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %1564 = load i64, i64* @R11_2392_56234d8dffa8
  store i64 %1564, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %1565 = load i64, i64* @RSP_2312_56234d8dffa8
  %1566 = add i64 %1565, 15
  %1567 = inttoptr i64 %1566 to i8*
  %1568 = load i8, i8* %1567
  %1569 = zext i8 %1568 to i64
  store i64 %1569, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3b29

inst_3c11:                                        ; preds = %inst_3c0c, %inst_4198
  %1570 = phi %struct.Memory* [ %1384, %inst_4198 ], [ %95, %inst_3c0c ]
  %1571 = load i64, i64* @R13_2424_56234d8dffa8
  %1572 = icmp eq i64 %1571, 0
  %1573 = zext i1 %1572 to i8
  %1574 = icmp eq i8 %1573, 0
  %1575 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1576 = load i64*, i64** @RSP_2312_56234d8e7800
  br i1 %1574, label %inst_41aa, label %inst_3c1a

inst_39e5:                                        ; preds = %inst_39df, %inst_39d6
  %1577 = add i64 %2441, 2
  store i64 %1577, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1578 = sub i64 %2440, %1577
  %1579 = icmp ult i64 %2440, %1577
  %1580 = zext i1 %1579 to i8
  %1581 = icmp eq i64 %1578, 0
  %1582 = zext i1 %1581 to i8
  %1583 = or i8 %1582, %1580
  %1584 = icmp ne i8 %1583, 0
  br i1 %1584, label %inst_39f4, label %inst_39ee

inst_37e8:                                        ; preds = %2076, %inst_3509, %inst_3270, %1862, %inst_317d, %1655, %inst_3020
  %1585 = phi %struct.Memory* [ %367, %inst_3270 ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  %1586 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1587 = getelementptr i8, i8* %1586, i32 120
  %1588 = load i8, i8* %1587
  %1589 = and i8 %1588, 4
  %1590 = icmp eq i8 %1589, 0
  br i1 %1590, label %inst_3810, label %inst_37ef

inst_3e52:                                        ; preds = %inst_3e4c, %inst_3e43
  %1591 = load i32, i32* @R12_2408_56234d8dff90
  %1592 = zext i32 %1591 to i64
  %1593 = and i64 %1592, 4294967295
  store i64 %1593, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1594 = add i64 %1513, 3
  store i64 %1594, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 48, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31c8

inst_39f4:                                        ; preds = %inst_39ee, %inst_39e5
  %1595 = add i64 3, %2441
  store i64 %1595, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1596 = load i32, i32* @RAX_2216_56234d8dff90
  %1597 = zext i32 %1596 to i64
  %1598 = and i64 %1597, 4294967295
  store i64 %1598, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_39fb

inst_3ff5:                                        ; preds = %inst_3fef, %inst_3fe6
  %1599 = add i64 4, %2821
  store i64 %1599, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 %2297, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31c8

inst_35ad:                                        ; preds = %inst_35a8, %inst_35a3
  %1600 = add i64 %2091, 1
  %1601 = sub i64 %2102, %1600
  %1602 = icmp ult i64 %2102, %1600
  %1603 = zext i1 %1602 to i8
  %1604 = icmp eq i64 %1601, 0
  %1605 = zext i1 %1604 to i8
  %1606 = or i8 %1605, %1603
  %1607 = icmp ne i8 %1606, 0
  br i1 %1607, label %inst_35bc, label %inst_35b6

inst_39fb:                                        ; preds = %inst_39c1, %inst_39f4
  %1608 = load i64, i64* @R13_2424_56234d8dffa8
  %1609 = load i64, i64* @R15_2456_56234d8dffa8
  %1610 = sub i64 %1608, %1609
  %1611 = icmp ult i64 %1608, %1609
  %1612 = zext i1 %1611 to i8
  %1613 = icmp eq i64 %1610, 0
  %1614 = zext i1 %1613 to i8
  %1615 = or i8 %1614, %1612
  %1616 = icmp ne i8 %1615, 0
  br i1 %1616, label %inst_3a05, label %inst_3a00

inst_3540:                                        ; preds = %2076, %inst_3509, %1862, %inst_317d, %1655, %inst_3020, %inst_353f
  %1617 = phi %struct.Memory* [ %1243, %inst_353f ], [ %1450, %2076 ], [ %1450, %inst_3509 ], [ %1306, %1862 ], [ %1306, %inst_317d ], [ %54, %1655 ], [ %54, %inst_3020 ]
  store i64 12, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  store i64 102, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_32d4

inst_41cf:                                        ; preds = %inst_2fa0
  %1618 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1619 = add i64 %1618, -8
  %1620 = inttoptr i64 %1619 to i64*
  store i64 add (i64 ptrtoint (i8* @data_41cf to i64), i64 5), i64* %1620
  store i64 %1619, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1621 = call %struct.Memory* @ext_208278_abort(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %54)
  ret %struct.Memory* %1621

inst_3020:                                        ; preds = %inst_2fa0
  store i8* @data_6340, i8** @RCX_2248_56234d8e76a0
  %1622 = and i64 %56, 4294967295
  store i64 %1622, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1623 = mul i64 %1622, 4
  %1624 = trunc i64 %1623 to i32
  %1625 = getelementptr i8, i8* @data_6340, i32 %1624
  %1626 = bitcast i8* %1625 to i32*
  %1627 = load i32, i32* %1626
  %1628 = sext i32 %1627 to i64
  %1629 = add i64 ptrtoint (i8* @data_6340 to i64), %1628
  store i64 %1629, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1630 = icmp ult i64 %1629, %1628
  %1631 = icmp ult i64 %1629, ptrtoint (i8* @data_6340 to i64)
  %1632 = or i1 %1630, %1631
  %1633 = zext i1 %1632 to i8
  store i8 %1633, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1634 = trunc i64 %1629 to i32
  %1635 = and i32 %1634, 255
  %1636 = call i32 @llvm.ctpop.i32(i32 %1635) #13, !range !1234
  %1637 = trunc i32 %1636 to i8
  %1638 = and i8 %1637, 1
  %1639 = xor i8 %1638, 1
  store i8 %1639, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1640 = xor i64 ptrtoint (i8* @data_6340 to i64), %1628
  %1641 = xor i64 %1640, %1629
  %1642 = lshr i64 %1641, 4
  %1643 = trunc i64 %1642 to i8
  %1644 = and i8 %1643, 1
  store i8 %1644, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1645 = icmp eq i64 %1629, 0
  %1646 = zext i1 %1645 to i8
  store i8 %1646, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1647 = lshr i64 %1629, 63
  %1648 = trunc i64 %1647 to i8
  store i8 %1648, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1649 = lshr i64 %1628, 63
  %1650 = xor i64 %1647, %1649
  %1651 = add nuw nsw i64 %1650, %1647
  %1652 = icmp eq i64 %1651, 2
  %1653 = zext i1 %1652 to i8
  store i8 %1653, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i64 %1629, i64* @RIP_2472_56234d8dffa8, align 8, !tbaa !1216
  %1654 = add i64 %1628, 25408
  switch i64 %1654, label %1655 [
    i64 13632, label %inst_3540
    i64 13287, label %inst_33f0
    i64 14306, label %inst_37e8
    i64 13976, label %inst_3698
    i64 13992, label %inst_36a8
    i64 13373, label %inst_3440
    i64 13923, label %inst_3668
    i64 12887, label %inst_3260
    i64 13440, label %inst_3480
    i64 13952, label %inst_3680
    i64 13312, label %inst_3400
    i64 13408, label %inst_3460
    i64 15541, label %inst_3cb5
    i64 14040, label %inst_36e0
    i64 13928, label %inst_3668
    i64 13296, label %inst_33f0
    i64 14016, label %inst_36c0
    i64 13880, label %inst_3638
    i64 12896, label %inst_3260
    i64 13564, label %inst_34fc
    i64 15668, label %inst_3d34
    i64 13851, label %inst_3620
    i64 13456, label %inst_3490
    i64 13272, label %inst_33d8
    i64 13439, label %inst_3480
    i64 15610, label %inst_3cfa
    i64 13407, label %inst_3460
    i64 14369, label %inst_3828
    i64 12947, label %inst_3293
    i64 12339, label %inst_3033
    i64 13360, label %inst_3430
    i64 15364, label %inst_3c04
    i64 16392, label %inst_4008
    i64 13232, label %inst_33b0
    i64 13674, label %inst_3570
    i64 13392, label %inst_3450
    i64 15834, label %inst_3dda
    i64 13423, label %inst_3470
    i64 15269, label %inst_3ba5
    i64 13265, label %inst_33d8
    i64 13904, label %inst_3650
    i64 16461, label %inst_4050
    i64 13455, label %inst_348f
    i64 15035, label %inst_3abb
    i64 13060, label %inst_3308
    i64 15892, label %inst_3e14
    i64 13048, label %inst_32f8
    i64 13680, label %inst_3570
    i64 15456, label %inst_3c60
    i64 12691, label %inst_3193
    i64 13311, label %inst_3400
    i64 12977, label %inst_32b8
    i64 12944, label %inst_3290
    i64 15974, label %inst_3e70
    i64 13970, label %inst_3698
    i64 13424, label %inst_3470
    i64 14760, label %inst_39b0
    i64 13391, label %inst_3450
    i64 13224, label %inst_33b0
    i64 13856, label %inst_3620
    i64 13986, label %inst_36a8
    i64 12984, label %inst_32b8
    i64 13358, label %inst_3430
    i64 14026, label %inst_36d0
    i64 13464, label %inst_3498
    i64 13631, label %inst_353f
    i64 12899, label %inst_3263
    i64 14402, label %inst_3842
    i64 15070, label %inst_3ade
    i64 15453, label %inst_3c60
    i64 16121, label %inst_3f00
    i64 14079, label %inst_36ff
    i64 14233, label %inst_37a0
    i64 13064, label %inst_3308
    i64 13696, label %inst_3580
    i64 13596, label %inst_3520
    i64 13600, label %inst_3520
    i64 13042, label %inst_32f8
    i64 13376, label %inst_3440
    i64 13877, label %inst_3638
    i64 13650, label %inst_3558
    i64 12942, label %inst_3290
    i64 13656, label %inst_3558
    i64 12688, label %inst_3190
    i64 13690, label %inst_3580
    i64 14010, label %inst_36c0
    i64 13896, label %inst_3650
  ]

1655:                                             ; preds = %inst_3020
  %1656 = sub i64 ptrtoint (i8* @data_404d to i64), %1654
  %1657 = trunc i64 %1656 to i32
  %1658 = zext i32 %1657 to i64
  switch i64 %1658, label %1659 [
    i64 2829, label %inst_3540
    i64 3174, label %inst_33f0
    i64 2155, label %inst_37e8
    i64 2485, label %inst_3698
    i64 2469, label %inst_36a8
    i64 3088, label %inst_3440
    i64 2538, label %inst_3668
    i64 3574, label %inst_3260
    i64 3021, label %inst_3480
    i64 2509, label %inst_3680
    i64 3149, label %inst_3400
    i64 3053, label %inst_3460
    i64 920, label %inst_3cb5
    i64 2421, label %inst_36e0
    i64 2533, label %inst_3668
    i64 3165, label %inst_33f0
    i64 2445, label %inst_36c0
    i64 2581, label %inst_3638
    i64 3565, label %inst_3260
    i64 2897, label %inst_34fc
    i64 793, label %inst_3d34
    i64 2610, label %inst_3620
    i64 3005, label %inst_3490
    i64 3189, label %inst_33d8
    i64 3022, label %inst_3480
    i64 851, label %inst_3cfa
    i64 3054, label %inst_3460
    i64 2092, label %inst_3828
    i64 3514, label %inst_3293
    i64 4122, label %inst_3033
    i64 3101, label %inst_3430
    i64 1097, label %inst_3c04
    i64 69, label %inst_4008
    i64 3229, label %inst_33b0
    i64 2787, label %inst_3570
    i64 3069, label %inst_3450
    i64 627, label %inst_3dda
    i64 3038, label %inst_3470
    i64 1192, label %inst_3ba5
    i64 3196, label %inst_33d8
    i64 2557, label %inst_3650
    i64 0, label %inst_4050
    i64 3006, label %inst_348f
    i64 1426, label %inst_3abb
    i64 3401, label %inst_3308
    i64 569, label %inst_3e14
    i64 3413, label %inst_32f8
    i64 2781, label %inst_3570
    i64 1005, label %inst_3c60
    i64 3770, label %inst_3193
    i64 3150, label %inst_3400
    i64 3484, label %inst_32b8
    i64 3517, label %inst_3290
    i64 487, label %inst_3e70
    i64 2491, label %inst_3698
    i64 3037, label %inst_3470
    i64 1701, label %inst_39b0
    i64 3070, label %inst_3450
    i64 3237, label %inst_33b0
    i64 2605, label %inst_3620
    i64 2475, label %inst_36a8
    i64 3477, label %inst_32b8
    i64 3103, label %inst_3430
    i64 2435, label %inst_36d0
    i64 2997, label %inst_3498
    i64 2830, label %inst_353f
    i64 3562, label %inst_3263
    i64 2059, label %inst_3842
    i64 1391, label %inst_3ade
    i64 1008, label %inst_3c60
    i64 340, label %inst_3f00
    i64 2382, label %inst_36ff
    i64 2228, label %inst_37a0
    i64 3397, label %inst_3308
    i64 2765, label %inst_3580
    i64 2865, label %inst_3520
    i64 2861, label %inst_3520
    i64 3419, label %inst_32f8
    i64 3085, label %inst_3440
    i64 2584, label %inst_3638
    i64 2811, label %inst_3558
    i64 3519, label %inst_3290
    i64 2805, label %inst_3558
    i64 3773, label %inst_3190
    i64 2771, label %inst_3580
    i64 2451, label %inst_36c0
    i64 2565, label %inst_3650
  ]

1659:                                             ; preds = %1655
  %1660 = call %struct.Memory* @__remill_jump(%struct.State* @__mcsema_reg_state, i64 %1629, %struct.Memory* %54)
  ret %struct.Memory* %1660

inst_3095:                                        ; preds = %inst_3088
  %1661 = add i64 %434, 5
  %1662 = load i64, i64* @RSP_2312_56234d8dffa8
  %1663 = add i64 %1662, 16
  %1664 = inttoptr i64 %1663 to i64*
  %1665 = load i64, i64* %1664
  store i64 %1665, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1666 = add i64 %1661, 4
  %1667 = add i64 %420, %1665
  %1668 = inttoptr i64 %1667 to i8*
  %1669 = load i8, i8* %1668
  %1670 = icmp eq i8 %1669, 0
  %1671 = zext i1 %1670 to i8
  %1672 = add i64 %1666, 4
  %1673 = icmp eq i8 %1671, 0
  %1674 = zext i1 %1673 to i8
  store i8 %1674, i8* @R12_2408_56234d8dff60, align 1, !tbaa !1240
  br label %inst_30a2

inst_30ab:                                        ; preds = %inst_30a2
  %1675 = add i64 %568, 5
  %1676 = load i32*, i32** @RSP_2312_56234d8ed000
  %1677 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1678 = bitcast i8* %1677 to i64*
  %1679 = getelementptr i32, i32* %1676, i32 2
  %1680 = load i32, i32* %1679
  %1681 = sub i32 %1680, 2
  %1682 = icmp eq i32 %1681, 0
  %1683 = zext i1 %1682 to i8
  %1684 = add i64 %1675, 5
  %1685 = getelementptr i64, i64* %1678, i32 2
  %1686 = load i64, i64* %1685
  store i64 %1686, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1687 = add i64 %1684, 4
  %1688 = add i64 %420, %1686
  store i64 %1688, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %1689 = add i64 %1687, 3
  %1690 = icmp eq i8 %1683, 0
  %1691 = zext i1 %1690 to i8
  %1692 = add i64 %1689, 4
  %1693 = getelementptr i8, i8* %1677, i32 13
  %1694 = load i8, i8* %1693
  %1695 = and i8 %1694, %1691
  store i8 %1695, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %1696 = icmp eq i8 %1695, 0
  %1697 = zext i1 %1696 to i8
  %1698 = add i64 %1692, 3
  %1699 = load i32, i32* @RAX_2216_56234d8dff90
  %1700 = zext i32 %1699 to i64
  %1701 = and i64 %1700, 4294967295
  store i64 %1701, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %1702 = add i64 %1698, 6
  %1703 = add i64 %1702, 167
  %1704 = icmp eq i8 %1697, 0
  %1705 = select i1 %1704, i64 %1702, i64 %1703
  br i1 %1696, label %inst_3170, label %inst_30c9

inst_30c9:                                        ; preds = %inst_30ab
  %1706 = bitcast i32* %1676 to i64*
  %1707 = add i64 %1705, 5
  %1708 = getelementptr i64, i64* %1706, i32 3
  %1709 = load i64, i64* %1708
  store i64 %1709, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1710 = add i64 %1707, 3
  %1711 = icmp eq i64 %1709, 0
  %1712 = zext i1 %1711 to i8
  %1713 = add i64 %1710, 6
  %1714 = add i64 %1713, 1065
  %1715 = icmp eq i8 %1712, 0
  %1716 = select i1 %1715, i64 %1713, i64 %1714
  br i1 %1711, label %inst_3500, label %inst_30d7

inst_30d7:                                        ; preds = %inst_30c9
  %1717 = add i64 %1716, 4
  %1718 = add i64 %1717, 5
  %1719 = add i64 %1709, %420
  store i64 %1719, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1720 = add i64 %1718, 2
  %1721 = add i64 %1720, 46
  %1722 = select i1 %433, i64 %1721, i64 %1720
  br i1 %433, label %inst_3110, label %inst_30e2

inst_30e2:                                        ; preds = %inst_30d7
  %1723 = lshr i64 %1709, 63
  %1724 = add i64 %1722, 4
  %1725 = sub i64 %1709, 1
  %1726 = icmp ult i64 %1709, 1
  %1727 = zext i1 %1726 to i8
  store i8 %1727, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1728 = trunc i64 %1725 to i32
  %1729 = and i32 %1728, 255
  %1730 = call i32 @llvm.ctpop.i32(i32 %1729) #13, !range !1234
  %1731 = trunc i32 %1730 to i8
  %1732 = and i8 %1731, 1
  %1733 = xor i8 %1732, 1
  store i8 %1733, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1734 = xor i64 1, %1709
  %1735 = xor i64 %1734, %1725
  %1736 = lshr i64 %1735, 4
  %1737 = trunc i64 %1736 to i8
  %1738 = and i8 %1737, 1
  store i8 %1738, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1739 = icmp eq i64 %1725, 0
  %1740 = zext i1 %1739 to i8
  store i8 %1740, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1741 = lshr i64 %1725, 63
  %1742 = trunc i64 %1741 to i8
  store i8 %1742, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1743 = xor i64 %1741, %1723
  %1744 = add nuw nsw i64 %1743, %1723
  %1745 = icmp eq i64 %1744, 2
  %1746 = zext i1 %1745 to i8
  store i8 %1746, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1747 = add i64 %1724, 2
  %1748 = add i64 %1747, 40
  %1749 = or i8 %1740, %1727
  %1750 = icmp ne i8 %1749, 0
  %1751 = select i1 %1750, i64 %1748, i64 %1747
  br i1 %1750, label %inst_3110, label %inst_30e8

inst_30e8:                                        ; preds = %inst_30e2
  %1752 = bitcast i32* %1676 to i8*
  %1753 = add i64 %1751, 5
  %1754 = load i8, i8* @R8_2344_56234d8dff60
  %1755 = getelementptr i8, i8* %1677, i32 56
  store i8 %1754, i8* %1755
  %1756 = add i64 %1753, 5
  %1757 = load i8, i8* @R10_2376_56234d8dff60
  %1758 = getelementptr i8, i8* %1752, i32 48
  store i8 %1757, i8* %1758
  %1759 = add i64 %1756, 5
  %1760 = getelementptr i64, i64* %1678, i32 5
  store i64 %1688, i64* %1760
  %1761 = add i64 %1759, 5
  %1762 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1763 = add i64 %1762, -8
  %1764 = inttoptr i64 %1763 to i64*
  store i64 %1761, i64* %1764
  store i64 %1763, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1765 = call %struct.Memory* @ext_2082d8_strlen(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %417)
  %1766 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1767 = bitcast i8* %1766 to i64*
  %1768 = getelementptr i8, i8* %1766, i32 56
  %1769 = load i8, i8* %1768
  %1770 = zext i8 %1769 to i64
  store i64 %1770, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %1771 = getelementptr i8, i8* %1766, i32 48
  %1772 = load i8, i8* %1771
  %1773 = zext i8 %1772 to i64
  store i64 %1773, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %1774 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %1774, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %1775 = getelementptr i64, i64* %1767, i32 5
  %1776 = load i64, i64* %1775
  store i64 %1776, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3110

inst_311e:                                        ; preds = %inst_3110
  %1777 = add i64 %951, 3
  %1778 = add i64 %1777, 5
  %1779 = add i64 %1778, 6
  %1780 = add i64 %1779, 5
  %1781 = getelementptr i64, i64* %980, i32 3
  %1782 = load i64, i64* %1781
  store i64 %1782, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1783 = add i64 %1780, 5
  %1784 = getelementptr i64, i64* %980, i32 9
  %1785 = load i64, i64* %1784
  store i64 %1785, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1786 = add i64 %1783, 3
  %1787 = load i64, i64* @R9_2360_56234d8dffa8
  store i64 %1787, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1788 = add i64 %1786, 5
  %1789 = getelementptr i64, i64* %980, i32 8
  store i64 %954, i64* %1789
  %1790 = add i64 %1788, 5
  %1791 = load i8, i8* @R8_2344_56234d8dff60
  %1792 = getelementptr i8, i8* %981, i32 56
  store i8 %1791, i8* %1792
  %1793 = add i64 %1790, 5
  %1794 = getelementptr i64, i64* %980, i32 6
  store i64 %1787, i64* %1794
  %1795 = add i64 %1793, 5
  %1796 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1797 = add i64 %1796, -8
  %1798 = inttoptr i64 %1797 to i64*
  store i64 %1795, i64* %1798
  store i64 %1797, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1799 = call %struct.Memory* @ext_208340_memcmp(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %952)
  %1800 = load i32, i32* @RAX_2216_56234d8dff90
  %1801 = icmp eq i32 %1800, 0
  %1802 = zext i1 %1801 to i8
  %1803 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1804 = bitcast i8* %1803 to i64*
  %1805 = getelementptr i64, i64* %1804, i32 6
  %1806 = load i64, i64* %1805
  store i64 %1806, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %1807 = getelementptr i8, i8* %1803, i32 56
  %1808 = load i8, i8* %1807
  %1809 = zext i8 %1808 to i64
  store i64 %1809, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %1810 = getelementptr i64, i64* %1804, i32 8
  %1811 = load i64, i64* %1810
  store i64 %1811, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %1812 = icmp eq i8 %1802, 0
  br i1 %1812, label %inst_36d0, label %inst_3157

inst_3157:                                        ; preds = %inst_311e
  %1813 = getelementptr i8, i8* %1803, i32 15
  %1814 = load i8, i8* %1813
  %1815 = icmp eq i8 %1814, 0
  %1816 = zext i1 %1815 to i8
  %1817 = getelementptr i8, i8* %1803, i32 40
  %1818 = load i8, i8* %1817
  %1819 = zext i8 %1818 to i64
  store i64 %1819, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %1820 = icmp eq i8 %1816, 0
  br i1 %1820, label %inst_40e5, label %inst_3170

inst_40e5:                                        ; preds = %inst_3157
  %1821 = bitcast i8* %1803 to i32*
  %1822 = getelementptr i32, i32* %1821, i32 2
  %1823 = load i32, i32* %1822
  %1824 = sub i32 %1823, 2
  %1825 = icmp eq i32 %1824, 0
  %1826 = zext i1 %1825 to i8
  %1827 = zext i8 %1814 to i64
  store i64 %1827, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 %1811, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  store i8 %1826, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %1828 = getelementptr i8, i8* %1803, i32 13
  store i8 %1814, i8* %1828
  br label %inst_3b29

inst_317d:                                        ; preds = %inst_3170
  store i8* @data_636c, i8** @RCX_2248_56234d8e76a0
  %1829 = and i64 %1310, 255
  store i64 %1829, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1830 = mul i64 %1829, 4
  %1831 = trunc i64 %1830 to i32
  %1832 = getelementptr i8, i8* @data_636c, i32 %1831
  %1833 = bitcast i8* %1832 to i32*
  %1834 = load i32, i32* %1833
  %1835 = sext i32 %1834 to i64
  %1836 = add i64 ptrtoint (i8* @data_636c to i64), %1835
  store i64 %1836, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1837 = icmp ult i64 %1836, %1835
  %1838 = icmp ult i64 %1836, ptrtoint (i8* @data_636c to i64)
  %1839 = or i1 %1837, %1838
  %1840 = zext i1 %1839 to i8
  store i8 %1840, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1841 = trunc i64 %1836 to i32
  %1842 = and i32 %1841, 255
  %1843 = call i32 @llvm.ctpop.i32(i32 %1842) #13, !range !1234
  %1844 = trunc i32 %1843 to i8
  %1845 = and i8 %1844, 1
  %1846 = xor i8 %1845, 1
  store i8 %1846, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1847 = xor i64 ptrtoint (i8* @data_636c to i64), %1835
  %1848 = xor i64 %1847, %1836
  %1849 = lshr i64 %1848, 4
  %1850 = trunc i64 %1849 to i8
  %1851 = and i8 %1850, 1
  store i8 %1851, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1852 = icmp eq i64 %1836, 0
  %1853 = zext i1 %1852 to i8
  store i8 %1853, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1854 = lshr i64 %1836, 63
  %1855 = trunc i64 %1854 to i8
  store i8 %1855, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1856 = lshr i64 %1835, 63
  %1857 = xor i64 %1854, %1856
  %1858 = add nuw nsw i64 %1857, %1854
  %1859 = icmp eq i64 %1858, 2
  %1860 = zext i1 %1859 to i8
  store i8 %1860, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i64 %1836, i64* @RIP_2472_56234d8dffa8, align 8, !tbaa !1216
  %1861 = add i64 %1835, 25452
  switch i64 %1861, label %1862 [
    i64 13632, label %inst_3540
    i64 13287, label %inst_33f0
    i64 14306, label %inst_37e8
    i64 15456, label %inst_3c60
    i64 15834, label %inst_3dda
    i64 13923, label %inst_3668
    i64 12887, label %inst_3260
    i64 13440, label %inst_3480
    i64 13928, label %inst_3668
    i64 13296, label %inst_33f0
    i64 13373, label %inst_3440
    i64 13880, label %inst_3638
    i64 12896, label %inst_3260
    i64 13564, label %inst_34fc
    i64 12339, label %inst_3033
    i64 13674, label %inst_3570
    i64 13311, label %inst_3400
    i64 12977, label %inst_32b8
    i64 13392, label %inst_3450
    i64 13312, label %inst_3400
    i64 13986, label %inst_36a8
    i64 12984, label %inst_32b8
    i64 12947, label %inst_3293
    i64 14369, label %inst_3828
    i64 13952, label %inst_3680
    i64 13048, label %inst_32f8
    i64 15892, label %inst_3e14
    i64 13680, label %inst_3570
    i64 12691, label %inst_3193
    i64 13232, label %inst_33b0
    i64 16392, label %inst_4008
    i64 13904, label %inst_3650
    i64 13408, label %inst_3460
    i64 15541, label %inst_3cb5
    i64 14040, label %inst_36e0
    i64 13407, label %inst_3460
    i64 14233, label %inst_37a0
    i64 13064, label %inst_3308
    i64 13696, label %inst_3580
    i64 15364, label %inst_3c04
    i64 13360, label %inst_3430
    i64 13992, label %inst_36a8
    i64 15269, label %inst_3ba5
    i64 13265, label %inst_33d8
    i64 13423, label %inst_3470
    i64 13976, label %inst_3698
    i64 16461, label %inst_4050
    i64 13455, label %inst_348f
    i64 15035, label %inst_3abb
    i64 13060, label %inst_3308
    i64 14016, label %inst_36c0
    i64 12944, label %inst_3290
    i64 15974, label %inst_3e70
    i64 13970, label %inst_3698
    i64 13424, label %inst_3470
    i64 14760, label %inst_39b0
    i64 13851, label %inst_3620
    i64 15668, label %inst_3d34
    i64 13456, label %inst_3490
    i64 13391, label %inst_3450
    i64 13224, label %inst_33b0
    i64 13856, label %inst_3620
    i64 13358, label %inst_3430
    i64 14026, label %inst_36d0
    i64 13464, label %inst_3498
    i64 13631, label %inst_353f
    i64 14402, label %inst_3842
    i64 12899, label %inst_3263
    i64 15070, label %inst_3ade
    i64 15453, label %inst_3c60
    i64 16121, label %inst_3f00
    i64 13272, label %inst_33d8
    i64 13439, label %inst_3480
    i64 15610, label %inst_3cfa
    i64 14079, label %inst_36ff
    i64 13596, label %inst_3520
    i64 13600, label %inst_3520
    i64 13042, label %inst_32f8
    i64 13376, label %inst_3440
    i64 13877, label %inst_3638
    i64 13650, label %inst_3558
    i64 12942, label %inst_3290
    i64 13656, label %inst_3558
    i64 12688, label %inst_3190
    i64 13690, label %inst_3580
    i64 14010, label %inst_36c0
    i64 13896, label %inst_3650
  ]

1862:                                             ; preds = %inst_317d
  %1863 = sub i64 ptrtoint (i8* @data_404d to i64), %1861
  %1864 = trunc i64 %1863 to i32
  %1865 = zext i32 %1864 to i64
  switch i64 %1865, label %1866 [
    i64 2829, label %inst_3540
    i64 3174, label %inst_33f0
    i64 2155, label %inst_37e8
    i64 1005, label %inst_3c60
    i64 627, label %inst_3dda
    i64 2538, label %inst_3668
    i64 3574, label %inst_3260
    i64 3021, label %inst_3480
    i64 2533, label %inst_3668
    i64 3165, label %inst_33f0
    i64 3088, label %inst_3440
    i64 2581, label %inst_3638
    i64 3565, label %inst_3260
    i64 2897, label %inst_34fc
    i64 4122, label %inst_3033
    i64 2787, label %inst_3570
    i64 3150, label %inst_3400
    i64 3484, label %inst_32b8
    i64 3069, label %inst_3450
    i64 3149, label %inst_3400
    i64 2475, label %inst_36a8
    i64 3477, label %inst_32b8
    i64 3514, label %inst_3293
    i64 2092, label %inst_3828
    i64 2509, label %inst_3680
    i64 3413, label %inst_32f8
    i64 569, label %inst_3e14
    i64 2781, label %inst_3570
    i64 3770, label %inst_3193
    i64 3229, label %inst_33b0
    i64 69, label %inst_4008
    i64 2557, label %inst_3650
    i64 3053, label %inst_3460
    i64 920, label %inst_3cb5
    i64 2421, label %inst_36e0
    i64 3054, label %inst_3460
    i64 2228, label %inst_37a0
    i64 3397, label %inst_3308
    i64 2765, label %inst_3580
    i64 1097, label %inst_3c04
    i64 3101, label %inst_3430
    i64 2469, label %inst_36a8
    i64 1192, label %inst_3ba5
    i64 3196, label %inst_33d8
    i64 3038, label %inst_3470
    i64 2485, label %inst_3698
    i64 0, label %inst_4050
    i64 3006, label %inst_348f
    i64 1426, label %inst_3abb
    i64 3401, label %inst_3308
    i64 2445, label %inst_36c0
    i64 3517, label %inst_3290
    i64 487, label %inst_3e70
    i64 2491, label %inst_3698
    i64 3037, label %inst_3470
    i64 1701, label %inst_39b0
    i64 2610, label %inst_3620
    i64 793, label %inst_3d34
    i64 3005, label %inst_3490
    i64 3070, label %inst_3450
    i64 3237, label %inst_33b0
    i64 2605, label %inst_3620
    i64 3103, label %inst_3430
    i64 2435, label %inst_36d0
    i64 2997, label %inst_3498
    i64 2830, label %inst_353f
    i64 2059, label %inst_3842
    i64 3562, label %inst_3263
    i64 1391, label %inst_3ade
    i64 1008, label %inst_3c60
    i64 340, label %inst_3f00
    i64 3189, label %inst_33d8
    i64 3022, label %inst_3480
    i64 851, label %inst_3cfa
    i64 2382, label %inst_36ff
    i64 2865, label %inst_3520
    i64 2861, label %inst_3520
    i64 3419, label %inst_32f8
    i64 3085, label %inst_3440
    i64 2584, label %inst_3638
    i64 2811, label %inst_3558
    i64 3519, label %inst_3290
    i64 2805, label %inst_3558
    i64 3773, label %inst_3190
    i64 2771, label %inst_3580
    i64 2451, label %inst_36c0
    i64 2565, label %inst_3650
  ]

1866:                                             ; preds = %1862
  %1867 = call %struct.Memory* @__remill_jump(%struct.State* @__mcsema_reg_state, i64 %1836, %struct.Memory* %1306)
  ret %struct.Memory* %1867

inst_31a0:                                        ; preds = %inst_3193
  %1868 = load i64, i64* @RSP_2312_56234d8dffa8
  %1869 = add i64 %1868, 16
  %1870 = inttoptr i64 %1869 to i64*
  %1871 = load i64, i64* %1870
  %1872 = inttoptr i64 %1871 to i8*
  store i64 %1871, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1873 = getelementptr i8, i8* %1872, i32 1
  %1874 = load i8, i8* %1873
  %1875 = icmp eq i8 %1874, 0
  %1876 = zext i1 %1875 to i8
  %1877 = icmp eq i8 %1876, 0
  %1878 = zext i1 %1877 to i8
  store i8 %1878, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  br label %inst_31ac

inst_31d3:                                        ; preds = %inst_31c8
  %1879 = load i8, i8* @RDX_2264_56234d8dff60
  %1880 = icmp eq i8 %1879, 0
  %1881 = zext i1 %1880 to i8
  %1882 = icmp eq i8 %1881, 0
  br i1 %1882, label %inst_32e2, label %inst_31db

inst_31e5:                                        ; preds = %inst_31db
  %1883 = load i32, i32* @RBX_2232_56234d8dff90
  %1884 = zext i32 %1883 to i64
  %1885 = and i64 %1884, 4294967295
  %1886 = trunc i64 %1885 to i8
  %1887 = zext i8 %1886 to i64
  %1888 = and i64 %1887, 255
  %1889 = lshr i64 %1888, 4
  %1890 = lshr i64 %1889, 1
  %1891 = trunc i64 %1890 to i8
  %1892 = and i8 %1891, 127
  %1893 = zext i8 %1892 to i64
  %1894 = and i64 %1893, 255
  %1895 = mul i64 %1894, 4
  %1896 = add i64 %1895, %1551
  %1897 = inttoptr i64 %1896 to i32*
  %1898 = load i32, i32* %1897
  %1899 = zext i32 %1898 to i64
  store i64 %1899, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1900 = and i64 %1884, 31
  %1901 = shl i64 1, %1900
  %1902 = and i64 %1901, %1899
  %1903 = icmp ne i64 %1902, 0
  br i1 %1903, label %inst_3343, label %inst_31f9

inst_3202:                                        ; preds = %inst_31f9
  %1904 = load i32, i32* @RAX_2216_56234d8dff90
  %1905 = zext i32 %1904 to i64
  %1906 = xor i64 1, %1905
  %1907 = and i64 %1906, 4294967295
  %1908 = load i64, i64* @RBP_2328_56234d8dffa8
  %1909 = add i64 1, %1908
  store i64 %1909, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %1910 = trunc i64 %1907 to i32
  %1911 = zext i32 %1910 to i64
  %1912 = load i32, i32* @R8_2344_56234d8dff90
  %1913 = zext i32 %1912 to i64
  %1914 = and i64 %1913, %1911
  %1915 = and i64 %1914, 4294967295
  store i64 %1915, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_320c

inst_3210:                                        ; preds = %inst_320c
  %1916 = load i64, i64* @R13_2424_56234d8dffa8
  %1917 = load i64, i64* @R15_2456_56234d8dffa8
  %1918 = sub i64 %1916, %1917
  %1919 = icmp ult i64 %1916, %1917
  %1920 = zext i1 %1919 to i8
  %1921 = icmp eq i64 %1918, 0
  %1922 = zext i1 %1921 to i8
  %1923 = or i8 %1922, %1920
  %1924 = icmp ne i8 %1923, 0
  br i1 %1924, label %inst_321a, label %inst_3215

inst_3215:                                        ; preds = %inst_3210
  %1925 = load i64, i64* @R14_2440_56234d8dffa8
  %1926 = add i64 %1917, %1925
  %1927 = inttoptr i64 %1926 to i8*
  store i8 39, i8* %1927
  br label %inst_321a

inst_3223:                                        ; preds = %inst_321a
  %1928 = load i64, i64* @R14_2440_56234d8dffa8
  %1929 = add i64 %1928, 1
  %1930 = add i64 %1929, %1917
  %1931 = inttoptr i64 %1930 to i8*
  store i8 39, i8* %1931
  br label %inst_3229

inst_3235:                                        ; preds = %inst_3230
  %1932 = load i64, i64* @R14_2440_56234d8dffa8
  %1933 = add i64 %1014, %1932
  %1934 = load i8, i8* @RBX_2232_56234d8dff60
  %1935 = inttoptr i64 %1933 to i8*
  store i8 %1934, i8* %1935
  br label %inst_3239

inst_3270:                                        ; preds = %inst_3263
  %1936 = sub i32 %371, 5
  %1937 = icmp eq i32 %1936, 0
  br i1 %1937, label %inst_37e8, label %inst_3279

inst_3279:                                        ; preds = %inst_3270
  store i64 63, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31c8

inst_329e:                                        ; preds = %inst_3293
  %1938 = load i8, i8* @R12_2408_56234d8dff60
  %1939 = getelementptr i8, i8* %458, i32 124
  store i8 %1938, i8* %1939
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 39, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31c8

inst_3313:                                        ; preds = %inst_3308
  %1940 = getelementptr i8, i8* %946, i32 13
  %1941 = load i8, i8* %1940
  %1942 = icmp eq i8 %1941, 0
  br i1 %1942, label %inst_3530, label %inst_331e

inst_3329:                                        ; preds = %inst_331e
  %1943 = getelementptr i64, i64* %1000, i32 3
  %1944 = load i64, i64* %1943
  %1945 = icmp eq i64 %1944, 0
  %1946 = zext i1 %1945 to i8
  %1947 = icmp eq i8 %1946, 0
  br i1 %1947, label %inst_36eb, label %inst_3335

inst_3335:                                        ; preds = %inst_3329
  store i64 92, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3340

inst_3358:                                        ; preds = %inst_3343
  %1948 = load i32, i32* @R8_2344_56234d8dff90
  %1949 = zext i32 %1948 to i64
  %1950 = and i64 %1949, 4294967295
  %1951 = trunc i64 %1950 to i32
  %1952 = zext i32 %1951 to i64
  %1953 = xor i64 1, %1952
  %1954 = and i64 %1953, 4294967295
  store i64 %1954, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1955 = trunc i64 %1954 to i8
  %1956 = zext i8 %1955 to i64
  %1957 = zext i8 %1100 to i64
  %1958 = and i64 %1957, %1956
  %1959 = trunc i64 %1958 to i8
  store i8 %1959, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %1960 = icmp eq i8 %1959, 0
  br i1 %1960, label %inst_3391, label %inst_3362

inst_3362:                                        ; preds = %inst_3358
  %1961 = load i64, i64* @R13_2424_56234d8dffa8
  %1962 = load i64, i64* @R15_2456_56234d8dffa8
  %1963 = sub i64 %1961, %1962
  %1964 = icmp ult i64 %1961, %1962
  %1965 = zext i1 %1964 to i8
  %1966 = icmp eq i64 %1963, 0
  %1967 = zext i1 %1966 to i8
  %1968 = or i8 %1967, %1965
  %1969 = icmp ne i8 %1968, 0
  br i1 %1969, label %inst_336c, label %inst_3367

inst_3367:                                        ; preds = %inst_3362
  %1970 = load i64, i64* @R14_2440_56234d8dffa8
  %1971 = add i64 %1962, %1970
  %1972 = inttoptr i64 %1971 to i8*
  store i8 39, i8* %1972
  br label %inst_336c

inst_3375:                                        ; preds = %inst_336c
  %1973 = load i64, i64* @R14_2440_56234d8dffa8
  %1974 = add i64 %1973, 1
  %1975 = add i64 %1974, %1962
  %1976 = inttoptr i64 %1975 to i8*
  store i8 36, i8* %1976
  br label %inst_337b

inst_3384:                                        ; preds = %inst_337b
  %1977 = load i64, i64* @R14_2440_56234d8dffa8
  %1978 = add i64 %1977, 2
  %1979 = add i64 %1978, %1962
  %1980 = inttoptr i64 %1979 to i8*
  store i8 39, i8* %1980
  br label %inst_338a

inst_3396:                                        ; preds = %inst_3391
  %1981 = load i64, i64* @R14_2440_56234d8dffa8
  %1982 = add i64 %1033, %1981
  %1983 = inttoptr i64 %1982 to i8*
  store i8 92, i8* %1983
  br label %inst_339b

inst_33bb:                                        ; preds = %inst_33b0
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1984 = getelementptr i8, i8* %1143, i32 120
  %1985 = load i8, i8* %1984
  %1986 = and i8 %1985, 1
  %1987 = icmp eq i8 %1986, 0
  br i1 %1987, label %inst_32db, label %inst_33c8

inst_33c8:                                        ; preds = %inst_33bb
  %1988 = load i64, i64* @RBP_2328_56234d8dffa8
  %1989 = add i64 1, %1988
  store i64 %1989, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3088

inst_34a4:                                        ; preds = %inst_3498
  %1990 = bitcast i8* %510 to i64*
  %1991 = bitcast i64* %511 to i8*
  %1992 = add i64 %540, 5
  %1993 = load i64, i64* @R11_2392_56234d8dffa8
  %1994 = getelementptr i64, i64* %1990, i32 7
  store i64 %1993, i64* %1994
  %1995 = add i64 %1992, 5
  %1996 = load i8, i8* @R8_2344_56234d8dff60
  %1997 = getelementptr i8, i8* %510, i32 48
  store i8 %1996, i8* %1997
  %1998 = add i64 %1995, 5
  %1999 = load i8, i8* @R10_2376_56234d8dff60
  %2000 = getelementptr i8, i8* %1991, i32 40
  store i8 %1999, i8* %2000
  %2001 = add i64 %1998, 5
  %2002 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2003 = add i64 %2002, -8
  %2004 = inttoptr i64 %2003 to i64*
  store i64 %2001, i64* %2004
  store i64 %2003, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2005 = call %struct.Memory* @ext_208420___ctype_b_loc(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %508)
  %2006 = load i64*, i64** @RAX_2216_56234d8e7800
  %2007 = load i64, i64* %2006
  store i64 %2007, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %2008 = load i8, i8* @RBX_2232_56234d8dff60
  %2009 = zext i8 %2008 to i64
  %2010 = and i64 %2009, 255
  store i64 %2010, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2011 = load i8*, i8** @RSP_2312_56234d8e76a0
  %2012 = bitcast i8* %2011 to i64*
  %2013 = getelementptr i8, i8* %2011, i32 40
  %2014 = load i8, i8* %2013
  %2015 = zext i8 %2014 to i64
  store i64 %2015, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %2016 = getelementptr i8, i8* %2011, i32 48
  %2017 = load i8, i8* %2016
  %2018 = zext i8 %2017 to i64
  store i64 %2018, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %2019 = getelementptr i64, i64* %2012, i32 7
  %2020 = load i64, i64* %2019
  store i64 %2020, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2021 = mul i64 %2010, 2
  %2022 = add i64 %2021, %2007
  %2023 = inttoptr i64 %2022 to i16*
  %2024 = load i16, i16* %2023
  %2025 = zext i16 %2024 to i64
  store i64 %2025, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2026 = and i64 ptrtoint (i8* @data_4000 to i64), %2025
  %2027 = trunc i64 %2026 to i16
  store i16 %2027, i16* @RAX_2216_56234d8dff78, align 2, !tbaa !1244
  %2028 = icmp eq i16 %2027, 0
  %2029 = zext i1 %2028 to i8
  %2030 = icmp eq i8 %2029, 0
  %2031 = zext i1 %2030 to i8
  store i8 %2031, i8* @R12_2408_56234d8dff60, align 1, !tbaa !1240
  %2032 = getelementptr i8, i8* %2011, i32 13
  %2033 = load i8, i8* %2032
  %2034 = and i8 %2033, %2029
  store i8 %2034, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  br label %inst_34e7

inst_3e81:                                        ; preds = %inst_34e7
  %2035 = getelementptr i8, i8* %805, i32 13
  %2036 = load i8, i8* %2035
  %2037 = zext i8 %2036 to i64
  store i64 %2037, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3990

inst_34ef:                                        ; preds = %inst_34e7
  %2038 = getelementptr i32, i32* %804, i32 2
  %2039 = load i32, i32* %2038
  %2040 = sub i32 %2039, 2
  %2041 = icmp eq i32 %2040, 0
  %2042 = zext i1 %2041 to i8
  store i8 %2042, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  br label %inst_31c8

inst_3509:                                        ; preds = %inst_3500
  store i8* @data_6568, i8** @RCX_2248_56234d8e76a0
  %2043 = and i64 %1454, 255
  store i64 %2043, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2044 = mul i64 %2043, 4
  %2045 = trunc i64 %2044 to i32
  %2046 = getelementptr i8, i8* @data_6568, i32 %2045
  %2047 = bitcast i8* %2046 to i32*
  %2048 = load i32, i32* %2047
  %2049 = sext i32 %2048 to i64
  %2050 = add i64 ptrtoint (i8* @data_6568 to i64), %2049
  store i64 %2050, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2051 = icmp ult i64 %2050, %2049
  %2052 = icmp ult i64 %2050, ptrtoint (i8* @data_6568 to i64)
  %2053 = or i1 %2051, %2052
  %2054 = zext i1 %2053 to i8
  store i8 %2054, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %2055 = trunc i64 %2050 to i32
  %2056 = and i32 %2055, 255
  %2057 = call i32 @llvm.ctpop.i32(i32 %2056) #13, !range !1234
  %2058 = trunc i32 %2057 to i8
  %2059 = and i8 %2058, 1
  %2060 = xor i8 %2059, 1
  store i8 %2060, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %2061 = xor i64 ptrtoint (i8* @data_6568 to i64), %2049
  %2062 = xor i64 %2061, %2050
  %2063 = lshr i64 %2062, 4
  %2064 = trunc i64 %2063 to i8
  %2065 = and i8 %2064, 1
  store i8 %2065, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2066 = icmp eq i64 %2050, 0
  %2067 = zext i1 %2066 to i8
  store i8 %2067, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %2068 = lshr i64 %2050, 63
  %2069 = trunc i64 %2068 to i8
  store i8 %2069, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %2070 = lshr i64 %2049, 63
  %2071 = xor i64 %2068, %2070
  %2072 = add nuw nsw i64 %2071, %2068
  %2073 = icmp eq i64 %2072, 2
  %2074 = zext i1 %2073 to i8
  store i8 %2074, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i64 %2050, i64* @RIP_2472_56234d8dffa8, align 8, !tbaa !1216
  %2075 = add i64 %2049, 25960
  switch i64 %2075, label %2076 [
    i64 13287, label %inst_33f0
    i64 14306, label %inst_37e8
    i64 15456, label %inst_3c60
    i64 15834, label %inst_3dda
    i64 13373, label %inst_3440
    i64 12887, label %inst_3260
    i64 13440, label %inst_3480
    i64 13392, label %inst_3450
    i64 13408, label %inst_3460
    i64 15541, label %inst_3cb5
    i64 14040, label %inst_36e0
    i64 13952, label %inst_3680
    i64 13674, label %inst_3570
    i64 13407, label %inst_3460
    i64 14369, label %inst_3828
    i64 12947, label %inst_3293
    i64 16461, label %inst_4050
    i64 13455, label %inst_348f
    i64 15035, label %inst_3abb
    i64 13060, label %inst_3308
    i64 15269, label %inst_3ba5
    i64 13265, label %inst_33d8
    i64 13976, label %inst_3698
    i64 13423, label %inst_3470
    i64 15892, label %inst_3e14
    i64 13680, label %inst_3570
    i64 13048, label %inst_32f8
    i64 13928, label %inst_3668
    i64 13296, label %inst_33f0
    i64 14016, label %inst_36c0
    i64 13312, label %inst_3400
    i64 13904, label %inst_3650
    i64 13600, label %inst_3520
    i64 12944, label %inst_3290
    i64 13456, label %inst_3490
    i64 13851, label %inst_3620
    i64 15668, label %inst_3d34
    i64 13923, label %inst_3668
    i64 13632, label %inst_3540
    i64 15364, label %inst_3c04
    i64 13360, label %inst_3430
    i64 13992, label %inst_36a8
    i64 13656, label %inst_3558
    i64 12339, label %inst_3033
    i64 13856, label %inst_3620
    i64 13391, label %inst_3450
    i64 13224, label %inst_33b0
    i64 13696, label %inst_3580
    i64 14233, label %inst_37a0
    i64 13064, label %inst_3308
    i64 13880, label %inst_3638
    i64 12896, label %inst_3260
    i64 13564, label %inst_34fc
    i64 13311, label %inst_3400
    i64 12977, label %inst_32b8
    i64 15974, label %inst_3e70
    i64 13970, label %inst_3698
    i64 13424, label %inst_3470
    i64 14760, label %inst_39b0
    i64 13986, label %inst_36a8
    i64 12984, label %inst_32b8
    i64 13358, label %inst_3430
    i64 14026, label %inst_36d0
    i64 13464, label %inst_3498
    i64 13631, label %inst_353f
    i64 12691, label %inst_3193
    i64 12899, label %inst_3263
    i64 14402, label %inst_3842
    i64 15070, label %inst_3ade
    i64 16392, label %inst_4008
    i64 13232, label %inst_33b0
    i64 15453, label %inst_3c60
    i64 16121, label %inst_3f00
    i64 13272, label %inst_33d8
    i64 13439, label %inst_3480
    i64 15610, label %inst_3cfa
    i64 14079, label %inst_36ff
    i64 13596, label %inst_3520
    i64 13042, label %inst_32f8
    i64 13376, label %inst_3440
    i64 13877, label %inst_3638
    i64 13650, label %inst_3558
    i64 12942, label %inst_3290
    i64 12688, label %inst_3190
    i64 13690, label %inst_3580
    i64 14010, label %inst_36c0
    i64 13896, label %inst_3650
  ]

2076:                                             ; preds = %inst_3509
  %2077 = sub i64 ptrtoint (i8* @data_404d to i64), %2075
  %2078 = trunc i64 %2077 to i32
  %2079 = zext i32 %2078 to i64
  switch i64 %2079, label %2080 [
    i64 3174, label %inst_33f0
    i64 2155, label %inst_37e8
    i64 1005, label %inst_3c60
    i64 627, label %inst_3dda
    i64 3088, label %inst_3440
    i64 3574, label %inst_3260
    i64 3021, label %inst_3480
    i64 3069, label %inst_3450
    i64 3053, label %inst_3460
    i64 920, label %inst_3cb5
    i64 2421, label %inst_36e0
    i64 2509, label %inst_3680
    i64 2787, label %inst_3570
    i64 3054, label %inst_3460
    i64 2092, label %inst_3828
    i64 3514, label %inst_3293
    i64 0, label %inst_4050
    i64 3006, label %inst_348f
    i64 1426, label %inst_3abb
    i64 3401, label %inst_3308
    i64 1192, label %inst_3ba5
    i64 3196, label %inst_33d8
    i64 2485, label %inst_3698
    i64 3038, label %inst_3470
    i64 569, label %inst_3e14
    i64 2781, label %inst_3570
    i64 3413, label %inst_32f8
    i64 2533, label %inst_3668
    i64 3165, label %inst_33f0
    i64 2445, label %inst_36c0
    i64 3149, label %inst_3400
    i64 2557, label %inst_3650
    i64 2861, label %inst_3520
    i64 3517, label %inst_3290
    i64 3005, label %inst_3490
    i64 2610, label %inst_3620
    i64 793, label %inst_3d34
    i64 2538, label %inst_3668
    i64 2829, label %inst_3540
    i64 1097, label %inst_3c04
    i64 3101, label %inst_3430
    i64 2469, label %inst_36a8
    i64 2805, label %inst_3558
    i64 4122, label %inst_3033
    i64 2605, label %inst_3620
    i64 3070, label %inst_3450
    i64 3237, label %inst_33b0
    i64 2765, label %inst_3580
    i64 2228, label %inst_37a0
    i64 3397, label %inst_3308
    i64 2581, label %inst_3638
    i64 3565, label %inst_3260
    i64 2897, label %inst_34fc
    i64 3150, label %inst_3400
    i64 3484, label %inst_32b8
    i64 487, label %inst_3e70
    i64 2491, label %inst_3698
    i64 3037, label %inst_3470
    i64 1701, label %inst_39b0
    i64 2475, label %inst_36a8
    i64 3477, label %inst_32b8
    i64 3103, label %inst_3430
    i64 2435, label %inst_36d0
    i64 2997, label %inst_3498
    i64 2830, label %inst_353f
    i64 3770, label %inst_3193
    i64 3562, label %inst_3263
    i64 2059, label %inst_3842
    i64 1391, label %inst_3ade
    i64 69, label %inst_4008
    i64 3229, label %inst_33b0
    i64 1008, label %inst_3c60
    i64 340, label %inst_3f00
    i64 3189, label %inst_33d8
    i64 3022, label %inst_3480
    i64 851, label %inst_3cfa
    i64 2382, label %inst_36ff
    i64 2865, label %inst_3520
    i64 3419, label %inst_32f8
    i64 3085, label %inst_3440
    i64 2584, label %inst_3638
    i64 2811, label %inst_3558
    i64 3519, label %inst_3290
    i64 3773, label %inst_3190
    i64 2771, label %inst_3580
    i64 2451, label %inst_36c0
    i64 2565, label %inst_3650
  ]

2080:                                             ; preds = %2076
  %2081 = call %struct.Memory* @__remill_jump(%struct.State* @__mcsema_reg_state, i64 %2050, %struct.Memory* %1450)
  ret %struct.Memory* %2081

inst_412a:                                        ; preds = %inst_3583
  %2082 = zext i8 %1332 to i64
  store i64 %2082, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %2083 = load i64, i64* @R11_2392_56234d8dffa8
  store i64 %2083, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %2084 = load i32, i32* @RDX_2264_56234d8dff90
  %2085 = zext i32 %2084 to i64
  %2086 = and i64 %2085, 4294967295
  store i64 %2086, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2087 = getelementptr i8, i8* %1325, i32 13
  store i8 %1332, i8* %2087
  br label %inst_3b29

inst_3596:                                        ; preds = %inst_3583
  %2088 = load i32, i32* @R8_2344_56234d8dff90
  %2089 = zext i32 %2088 to i64
  %2090 = and i64 %2089, 4294967295
  %2091 = load i64, i64* @R15_2456_56234d8dffa8
  store i64 %2091, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %2092 = trunc i64 %2090 to i32
  %2093 = zext i32 %2092 to i64
  %2094 = xor i64 1, %2093
  %2095 = and i64 %2094, 4294967295
  store i64 %2095, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2096 = trunc i64 %2095 to i8
  %2097 = zext i8 %2096 to i64
  %2098 = zext i8 %1330 to i64
  %2099 = and i64 %2098, %2097
  %2100 = trunc i64 %2099 to i8
  store i8 %2100, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %2101 = icmp eq i8 %2100, 0
  br i1 %2101, label %inst_35d0, label %inst_35a3

inst_35a3:                                        ; preds = %inst_3596
  %2102 = load i64, i64* @R13_2424_56234d8dffa8
  %2103 = sub i64 %2102, %2091
  %2104 = icmp ult i64 %2102, %2091
  %2105 = zext i1 %2104 to i8
  %2106 = icmp eq i64 %2103, 0
  %2107 = zext i1 %2106 to i8
  %2108 = or i8 %2107, %2105
  %2109 = icmp ne i8 %2108, 0
  br i1 %2109, label %inst_35ad, label %inst_35a8

inst_35a8:                                        ; preds = %inst_35a3
  %2110 = load i64, i64* @R14_2440_56234d8dffa8
  %2111 = add i64 %2091, %2110
  %2112 = inttoptr i64 %2111 to i8*
  store i8 39, i8* %2112
  br label %inst_35ad

inst_35b6:                                        ; preds = %inst_35ad
  %2113 = load i64, i64* @R14_2440_56234d8dffa8
  %2114 = add i64 %2113, 1
  %2115 = add i64 %2114, %2091
  %2116 = inttoptr i64 %2115 to i8*
  store i8 36, i8* %2116
  br label %inst_35bc

inst_3bf9:                                        ; preds = %inst_35bc
  %2117 = load i64, i64* @R14_2440_56234d8dffa8
  %2118 = add i64 %2117, 2
  %2119 = add i64 %2118, %2091
  %2120 = inttoptr i64 %2119 to i8*
  store i8 39, i8* %2120
  br label %inst_35c9

inst_35d5:                                        ; preds = %inst_35d0
  %2121 = load i64, i64* @R14_2440_56234d8dffa8
  %2122 = add i64 %1513, %2121
  %2123 = inttoptr i64 %2122 to i8*
  store i8 92, i8* %2123
  br label %inst_35da

inst_3be9:                                        ; preds = %inst_35da
  %2124 = load i32, i32* @R12_2408_56234d8dff90
  %2125 = zext i32 %2124 to i64
  %2126 = and i64 %2125, 4294967295
  store i64 %2126, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 48, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31f9

inst_35e9:                                        ; preds = %inst_35da
  %2127 = load i64, i64* @RBP_2328_56234d8dffa8
  %2128 = add i64 %2127, 1
  %2129 = load i64, i64* @R11_2392_56234d8dffa8
  %2130 = icmp ult i64 %2128, %2129
  %2131 = zext i1 %2130 to i8
  %2132 = icmp eq i8 %2131, 0
  br i1 %2132, label %inst_360b, label %inst_35f2

inst_35f2:                                        ; preds = %inst_35e9
  %2133 = bitcast i32* %1324 to i8*
  %2134 = getelementptr i64, i64* %1323, i32 2
  %2135 = load i64, i64* %2134
  %2136 = add i64 %2135, 1
  %2137 = add i64 %2136, %2127
  %2138 = inttoptr i64 %2137 to i8*
  %2139 = load i8, i8* %2138
  %2140 = zext i8 %2139 to i64
  %2141 = trunc i64 %2140 to i32
  %2142 = trunc i32 %2141 to i8
  %2143 = getelementptr i8, i8* %2133, i32 40
  store i8 %2142, i8* %2143
  %2144 = sub i32 %2141, 48
  %2145 = zext i32 %2144 to i64
  %2146 = trunc i64 %2145 to i8
  %2147 = sub i8 %2146, 9
  %2148 = icmp ult i8 %2146, 9
  %2149 = zext i1 %2148 to i8
  %2150 = icmp eq i8 %2147, 0
  %2151 = zext i1 %2150 to i8
  %2152 = or i8 %2151, %2149
  %2153 = icmp ne i8 %2152, 0
  br i1 %2153, label %inst_3e39, label %inst_360b

inst_3e39:                                        ; preds = %inst_35f2
  %2154 = sub i64 %1512, %998
  %2155 = icmp ult i64 %1512, %998
  %2156 = zext i1 %2155 to i8
  %2157 = icmp eq i64 %2154, 0
  %2158 = zext i1 %2157 to i8
  %2159 = or i8 %2158, %2156
  %2160 = icmp ne i8 %2159, 0
  br i1 %2160, label %inst_3e43, label %inst_3e3e

inst_4186:                                        ; preds = %inst_3700
  store i32 2, i32* %898
  br label %inst_3b29

inst_3725:                                        ; preds = %inst_3700
  %2161 = add i64 %892, 5
  %2162 = add i64 %2161, 5
  %2163 = add i64 %2162, 3
  %2164 = add i64 %2163, 3
  %2165 = add i64 %2164, 3
  %2166 = add i64 %2165, 2
  %2167 = add i64 %2166, 3
  %2168 = add i64 %2167, 3
  %2169 = add i64 %2168, 2
  %2170 = add i64 %2169, 2
  %2171 = add i64 %2170, 6
  %2172 = add i64 %2171, 2
  %2173 = add i64 %2172, 3
  %2174 = xor i64 1, %917
  %2175 = and i64 %2174, 4294967295
  store i64 %2175, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2176 = add i64 %2173, 2
  %2177 = zext i8 %902 to i64
  %2178 = trunc i64 %2175 to i8
  %2179 = zext i8 %2178 to i64
  %2180 = and i64 %2179, %2177
  %2181 = trunc i64 %2180 to i8
  store i8 %2181, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  %2182 = icmp eq i8 %2181, 0
  %2183 = zext i1 %2182 to i8
  %2184 = add i64 %2176, 6
  %2185 = add i64 %2184, 2410
  %2186 = icmp eq i8 %2183, 0
  %2187 = select i1 %2186, i64 %2184, i64 %2185
  br i1 %2182, label %inst_409c, label %inst_3732

inst_3732:                                        ; preds = %inst_3725
  %2188 = add i64 %2187, 5
  %2189 = getelementptr i8, i8* %895, i32 124
  %2190 = load i8, i8* %2189
  %2191 = icmp eq i8 %2190, 0
  %2192 = zext i1 %2191 to i8
  %2193 = add i64 %2188, 6
  %2194 = add i64 %2193, 2397
  %2195 = icmp eq i8 %2192, 0
  %2196 = select i1 %2195, i64 %2193, i64 %2194
  br i1 %2191, label %inst_409a, label %inst_373d

inst_409a:                                        ; preds = %inst_3732
  %2197 = add i64 %2196, 2
  %2198 = load i32, i32* @RDX_2264_56234d8dff90
  %2199 = zext i32 %2198 to i64
  %2200 = and i64 %2199, 4294967295
  store i64 %2200, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_409c

inst_373d:                                        ; preds = %inst_3732
  %2201 = getelementptr i8, i8* %895, i32 14
  %2202 = load i8, i8* %2201
  %2203 = icmp eq i8 %2202, 0
  %2204 = zext i1 %2203 to i8
  %2205 = icmp eq i8 %2204, 0
  br i1 %2205, label %inst_413d, label %inst_3748

inst_413d:                                        ; preds = %inst_373d
  %2206 = add i64 %2196, 5
  %2207 = add i64 %2206, 6
  %2208 = add i64 %2207, 2549
  %2209 = add i64 %2208, 4
  %2210 = sub i64 %896, 8
  %2211 = inttoptr i64 %2210 to i64*
  %2212 = inttoptr i64 %2210 to i32*
  %2213 = icmp ult i64 %896, 8
  %2214 = zext i1 %2213 to i8
  store i8 %2214, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %2215 = trunc i64 %2210 to i32
  %2216 = and i32 %2215, 255
  %2217 = call i32 @llvm.ctpop.i32(i32 %2216) #13, !range !1234
  %2218 = trunc i32 %2217 to i8
  %2219 = and i8 %2218, 1
  %2220 = xor i8 %2219, 1
  store i8 %2220, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %2221 = xor i64 8, %896
  %2222 = xor i64 %2221, %2210
  %2223 = lshr i64 %2222, 4
  %2224 = trunc i64 %2223 to i8
  %2225 = and i8 %2224, 1
  store i8 %2225, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2226 = icmp eq i64 %2210, 0
  %2227 = zext i1 %2226 to i8
  store i8 %2227, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %2228 = lshr i64 %2210, 63
  %2229 = trunc i64 %2228 to i8
  store i8 %2229, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %2230 = lshr i64 %896, 63
  %2231 = xor i64 %2228, %2230
  %2232 = add nuw nsw i64 %2231, %2230
  %2233 = icmp eq i64 %2232, 2
  %2234 = zext i1 %2233 to i8
  store i8 %2234, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %2235 = add i64 %2209, 6
  store i64 5, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %2236 = add i64 %2235, 3
  store i64 %909, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %2237 = add i64 %2236, 4
  %2238 = getelementptr i64, i64* %2211, i32 13
  %2239 = load i64, i64* %2238
  %2240 = add i64 %2210, -8
  %2241 = getelementptr i64, i64* %2211, i32 -1
  %2242 = getelementptr i32, i32* %2212, i32 -2
  store i64 %2239, i64* %2241
  %2243 = add i64 %2237, 4
  %2244 = getelementptr i64, i64* %2241, i32 15
  %2245 = load i64, i64* %2244
  %2246 = add i64 %2240, -8
  %2247 = getelementptr i64, i64* %2241, i32 -1
  %2248 = getelementptr i32, i32* %2242, i32 -2
  store i64 %2245, i64* %2247
  %2249 = add i64 %2243, 3
  %2250 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %2250, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2251 = add i64 %2249, 4
  %2252 = getelementptr i64, i64* %2247, i32 7
  %2253 = load i64, i64* %2252
  %2254 = add i64 %2246, -8
  %2255 = getelementptr i64, i64* %2247, i32 -1
  %2256 = getelementptr i32, i32* %2248, i32 -2
  store i64 %2253, i64* %2255
  %2257 = add i64 %2251, 8
  %2258 = getelementptr i32, i32* %2256, i32 38
  %2259 = load i32, i32* %2258
  %2260 = zext i32 %2259 to i64
  store i64 %2260, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %2261 = add i64 %2257, 5
  %2262 = getelementptr i64, i64* %2255, i32 6
  %2263 = load i64, i64* %2262
  store i64 %2263, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2264 = add i64 %2261, 5
  %2265 = getelementptr i64, i64* %2255, i32 14
  %2266 = load i64, i64* %2265
  store i64 %2266, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2267 = add i64 %2264, 5
  %2268 = add i64 %2254, -8
  %2269 = getelementptr i64, i64* %2255, i32 -1
  store i64 %2267, i64* %2269
  store i64 %2268, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2270 = call %struct.Memory* @sub_2fa0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %893)
  %2271 = load i64, i64* @RSP_2312_56234d8dffa8
  %2272 = add i64 32, %2271
  store i64 %2272, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2273 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %2273, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3b79

inst_3748:                                        ; preds = %inst_373d
  %2274 = load i64, i64* @R13_2424_56234d8dffa8
  %2275 = icmp eq i64 %2274, 0
  %2276 = zext i1 %2275 to i8
  %2277 = getelementptr i64, i64* %894, i32 10
  %2278 = load i64, i64* %2277
  %2279 = icmp eq i64 %2278, 0
  %2280 = zext i1 %2279 to i8
  %2281 = icmp eq i8 %2280, 0
  %2282 = zext i1 %2281 to i8
  store i8 %2282, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  %2283 = zext i8 %2276 to i64
  %2284 = zext i8 %2282 to i64
  %2285 = and i64 %2284, %2283
  %2286 = trunc i64 %2285 to i8
  store i8 %2286, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %2287 = icmp eq i8 %2286, 0
  br i1 %2287, label %inst_417c, label %inst_375f

inst_417c:                                        ; preds = %inst_3748
  %2288 = zext i8 %2190 to i64
  store i64 %2288, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_409c

inst_375f:                                        ; preds = %inst_3748
  store i64 %2278, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3764

inst_37ab:                                        ; preds = %inst_37a0
  %2289 = getelementptr i64, i64* %1419, i32 10
  %2290 = load i64, i64* @R13_2424_56234d8dffa8
  %2291 = icmp eq i64 %2290, 0
  br i1 %2291, label %inst_3bb0, label %inst_37b4

inst_37b4:                                        ; preds = %inst_37ab
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2292 = load i64, i64* %2289
  %2293 = icmp eq i64 %2292, 0
  %2294 = zext i1 %2293 to i8
  %2295 = icmp eq i8 %2294, 0
  br i1 %2295, label %inst_3bb0, label %inst_37c2

inst_37ef:                                        ; preds = %inst_37e8
  %2296 = load i64, i64* @RBP_2328_56234d8dffa8
  %2297 = add i64 %2296, 2
  store i64 %2297, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %2298 = load i64, i64* @R11_2392_56234d8dffa8
  %2299 = icmp ult i64 %2297, %2298
  %2300 = zext i1 %2299 to i8
  %2301 = icmp eq i8 %2300, 0
  br i1 %2301, label %inst_3810, label %inst_37f8

inst_37f8:                                        ; preds = %inst_37ef
  %2302 = bitcast i8* %1586 to i64*
  %2303 = getelementptr i64, i64* %2302, i32 2
  %2304 = load i64, i64* %2303
  %2305 = add i64 %2304, 1
  %2306 = add i64 %2305, %2296
  %2307 = inttoptr i64 %2306 to i8*
  %2308 = load i8, i8* %2307
  %2309 = sub i8 %2308, 63
  %2310 = icmp eq i8 %2309, 0
  br i1 %2310, label %inst_3f92, label %inst_3810

inst_3f92:                                        ; preds = %inst_37f8
  %2311 = add i64 %2297, %2304
  %2312 = inttoptr i64 %2311 to i8*
  %2313 = load i8, i8* %2312
  %2314 = zext i8 %2313 to i64
  store i64 %2314, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %2315 = sub i8 %2313, 62
  %2316 = icmp ult i8 %2313, 62
  %2317 = zext i1 %2316 to i8
  %2318 = icmp eq i8 %2315, 0
  %2319 = zext i1 %2318 to i8
  %2320 = or i8 %2319, %2317
  %2321 = icmp eq i8 %2320, 0
  br i1 %2321, label %inst_3810, label %inst_3f9f

inst_3833:                                        ; preds = %inst_3828
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 63, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_31f9

inst_3867:                                        ; preds = %inst_3848
  %2322 = bitcast i64* %292 to i8*
  %2323 = add i64 %329, 5
  %2324 = getelementptr i64, i64* %292, i32 2
  %2325 = load i64, i64* %2324
  store i64 %2325, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2326 = add i64 %2323, 5
  %2327 = load i8, i8* @R8_2344_56234d8dff60
  %2328 = getelementptr i8, i8* %291, i32 64
  store i8 %2327, i8* %2328
  %2329 = add i64 %2326, 5
  %2330 = load i8, i8* @R10_2376_56234d8dff60
  %2331 = getelementptr i8, i8* %2322, i32 56
  store i8 %2330, i8* %2331
  %2332 = add i64 %2329, 5
  %2333 = load i64, i64* @R9_2360_56234d8dffa8
  %2334 = getelementptr i64, i64* %294, i32 6
  store i64 %2333, i64* %2334
  %2335 = add i64 %2332, 5
  %2336 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2337 = add i64 %2336, -8
  %2338 = inttoptr i64 %2337 to i64*
  store i64 %2335, i64* %2338
  store i64 %2337, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2339 = call %struct.Memory* @ext_2082d8_strlen(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %289)
  %2340 = load i8*, i8** @RSP_2312_56234d8e76a0
  %2341 = bitcast i8* %2340 to i64*
  %2342 = getelementptr i8, i8* %2340, i32 64
  %2343 = load i8, i8* %2342
  %2344 = zext i8 %2343 to i64
  store i64 %2344, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %2345 = getelementptr i8, i8* %2340, i32 56
  %2346 = load i8, i8* %2345
  %2347 = zext i8 %2346 to i64
  store i64 %2347, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %2348 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %2348, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %2349 = getelementptr i64, i64* %2341, i32 6
  %2350 = load i64, i64* %2349
  store i64 %2350, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3894

inst_3903:                                        ; preds = %inst_38d3
  %2351 = sub i64 %758, -1
  %2352 = icmp eq i64 %2351, 0
  br i1 %2352, label %inst_3f25, label %inst_390d

inst_3f25:                                        ; preds = %inst_3903
  %2353 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %2353, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2354 = load i8*, i8** @RSP_2312_56234d8e76a0
  %2355 = bitcast i8* %2354 to i64*
  %2356 = getelementptr i8, i8* %2354, i32 125
  %2357 = load i8, i8* %2356
  %2358 = zext i8 %2357 to i64
  store i64 %2358, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %2359 = getelementptr i8, i8* %2354, i32 126
  %2360 = load i8, i8* %2359
  %2361 = zext i8 %2360 to i64
  store i64 %2361, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %2362 = getelementptr i8, i8* %2354, i32 127
  %2363 = load i8, i8* %2362
  %2364 = zext i8 %2363 to i64
  store i64 %2364, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %2365 = getelementptr i64, i64* %2355, i32 16
  %2366 = load i64, i64* %2365
  store i64 %2366, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %2367 = getelementptr i64, i64* %2355, i32 8
  %2368 = load i64, i64* %2367
  store i64 %2368, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %2369 = getelementptr i64, i64* %2355, i32 14
  %2370 = load i64, i64* %2369
  store i64 %2370, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %2371 = getelementptr i64, i64* %2355, i32 6
  %2372 = load i64, i64* %2371
  store i64 %2372, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %2373 = getelementptr i8, i8* %2354, i32 13
  %2374 = load i8, i8* %2373
  %2375 = zext i8 %2374 to i64
  store i64 %2375, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3986

inst_390d:                                        ; preds = %inst_3903
  %2376 = sub i64 %758, -2
  %2377 = icmp eq i64 %2376, 0
  %2378 = load i8*, i8** @RSP_2312_56234d8e76a0
  br i1 %2377, label %inst_3eb1, label %inst_3917

inst_3eb1:                                        ; preds = %inst_390d
  %2379 = bitcast i8* %2378 to i64*
  %2380 = getelementptr i64, i64* %2379, i32 6
  %2381 = load i64, i64* %2380
  store i64 %2381, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %2382 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %2382, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2383 = load i8*, i8** @R13_2424_56234d8e76a0
  %2384 = load i64, i64* @R13_2424_56234d8dffa8
  store i64 %2384, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %2385 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %2385, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 %2385, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2386 = getelementptr i8, i8* %2378, i32 125
  %2387 = load i8, i8* %2386
  %2388 = zext i8 %2387 to i64
  store i64 %2388, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %2389 = getelementptr i8, i8* %2378, i32 126
  %2390 = load i8, i8* %2389
  %2391 = zext i8 %2390 to i64
  store i64 %2391, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %2392 = getelementptr i64, i64* %2379, i32 17
  %2393 = load i64, i64* %2392
  store i64 %2393, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %2394 = icmp ult i64 %2382, %2381
  %2395 = zext i1 %2394 to i8
  %2396 = getelementptr i8, i8* %2378, i32 127
  %2397 = load i8, i8* %2396
  %2398 = zext i8 %2397 to i64
  store i64 %2398, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %2399 = getelementptr i64, i64* %2379, i32 16
  %2400 = load i64, i64* %2399
  store i64 %2400, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %2401 = getelementptr i64, i64* %2379, i32 8
  %2402 = load i64, i64* %2401
  store i64 %2402, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %2403 = getelementptr i64, i64* %2379, i32 14
  %2404 = load i64, i64* %2403
  store i64 %2404, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %2405 = icmp eq i8 %2395, 0
  br i1 %2405, label %inst_3f18, label %inst_3ef2

inst_3917:                                        ; preds = %inst_390d
  %2406 = bitcast i8* %2378 to i32*
  %2407 = getelementptr i32, i32* %2406, i32 2
  %2408 = load i32, i32* %2407
  %2409 = sub i32 %2408, 2
  %2410 = icmp eq i32 %2409, 0
  %2411 = zext i1 %2410 to i8
  %2412 = getelementptr i8, i8* %2378, i32 15
  %2413 = load i8, i8* %2412
  %2414 = and i8 %2413, %2411
  store i8 %2414, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %2415 = zext i8 %2414 to i32
  %2416 = call i32 @llvm.ctpop.i32(i32 %2415) #13, !range !1234
  %2417 = trunc i32 %2416 to i8
  %2418 = and i8 %2417, 1
  %2419 = xor i8 %2418, 1
  store i8 %2419, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %2420 = icmp eq i8 %2414, 0
  %2421 = zext i1 %2420 to i8
  store i8 %2421, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2422 = icmp eq i8 %2421, 0
  %2423 = select i1 %2422, i64 add (i64 ptrtoint (i8* @data_3903 to i64), i64 445), i64 add (i64 ptrtoint (i8* @data_3903 to i64), i64 38)
  br i1 %2422, label %inst_3ac0, label %inst_3929

inst_3f8b:                                        ; preds = %inst_3986
  %2424 = load i32, i32* @RDX_2264_56234d8dff90
  %2425 = zext i32 %2424 to i64
  %2426 = and i64 %2425, 4294967295
  store i64 %2426, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_34e7

inst_39c1:                                        ; preds = %inst_39b0
  %2427 = load i32, i32* @R8_2344_56234d8dff90
  %2428 = zext i32 %2427 to i64
  %2429 = and i64 %2428, 4294967295
  %2430 = trunc i64 %2429 to i32
  %2431 = zext i32 %2430 to i64
  %2432 = xor i64 1, %2431
  %2433 = and i64 %2432, 4294967295
  store i64 %2433, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2434 = zext i8 %1473 to i64
  %2435 = trunc i64 %2433 to i8
  %2436 = zext i8 %2435 to i64
  %2437 = and i64 %2436, %2434
  %2438 = trunc i64 %2437 to i8
  store i8 %2438, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %2439 = icmp eq i8 %2438, 0
  br i1 %2439, label %inst_39fb, label %inst_39cc

inst_39cc:                                        ; preds = %inst_39c1
  %2440 = load i64, i64* @R13_2424_56234d8dffa8
  %2441 = load i64, i64* @R15_2456_56234d8dffa8
  %2442 = sub i64 %2440, %2441
  %2443 = icmp ult i64 %2440, %2441
  %2444 = zext i1 %2443 to i8
  %2445 = icmp eq i64 %2442, 0
  %2446 = zext i1 %2445 to i8
  %2447 = or i8 %2446, %2444
  %2448 = icmp ne i8 %2447, 0
  br i1 %2448, label %inst_39d6, label %inst_39d1

inst_39d1:                                        ; preds = %inst_39cc
  %2449 = load i64, i64* @R14_2440_56234d8dffa8
  %2450 = add i64 %2441, %2449
  %2451 = inttoptr i64 %2450 to i8*
  store i8 39, i8* %2451
  br label %inst_39d6

inst_39df:                                        ; preds = %inst_39d6
  %2452 = load i64, i64* @R14_2440_56234d8dffa8
  %2453 = add i64 %2452, 1
  %2454 = add i64 %2453, %2441
  %2455 = inttoptr i64 %2454 to i8*
  store i8 36, i8* %2455
  br label %inst_39e5

inst_39ee:                                        ; preds = %inst_39e5
  %2456 = load i64, i64* @R14_2440_56234d8dffa8
  %2457 = add i64 %2456, 2
  %2458 = add i64 %2457, %2441
  %2459 = inttoptr i64 %2458 to i8*
  store i8 39, i8* %2459
  br label %inst_39f4

inst_3a00:                                        ; preds = %inst_39fb
  %2460 = load i64, i64* @R14_2440_56234d8dffa8
  %2461 = add i64 %1609, %2460
  %2462 = inttoptr i64 %2461 to i8*
  store i8 92, i8* %2462
  br label %inst_3a05

inst_3a0e:                                        ; preds = %inst_3a05
  %2463 = load i32, i32* @RBX_2232_56234d8dff90
  %2464 = zext i32 %2463 to i64
  %2465 = and i64 %2464, 4294967295
  store i64 %2465, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2466 = trunc i64 %2465 to i8
  %2467 = zext i8 %2466 to i64
  %2468 = and i64 %2467, 255
  %2469 = lshr i64 %2468, 5
  %2470 = lshr i64 %2469, 1
  %2471 = trunc i64 %2470 to i8
  %2472 = and i8 %2471, 127
  store i8 %2472, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %2473 = load i32, i32* @RAX_2216_56234d8dff90
  %2474 = add i32 48, %2473
  %2475 = zext i32 %2474 to i64
  %2476 = load i64, i64* @R14_2440_56234d8dffa8
  %2477 = add i64 %2476, 1
  %2478 = add i64 %2477, %1609
  %2479 = trunc i64 %2475 to i8
  %2480 = inttoptr i64 %2478 to i8*
  store i8 %2479, i8* %2480
  br label %inst_3a1b

inst_3a24:                                        ; preds = %inst_3a1b
  %2481 = load i32, i32* @RBX_2232_56234d8dff90
  %2482 = zext i32 %2481 to i64
  %2483 = and i64 %2482, 4294967295
  store i64 %2483, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2484 = trunc i64 %2483 to i8
  %2485 = zext i8 %2484 to i64
  %2486 = and i64 %2485, 255
  %2487 = lshr i64 %2486, 2
  %2488 = lshr i64 %2487, 1
  %2489 = trunc i64 %2488 to i8
  %2490 = and i8 %2489, 127
  store i8 %2490, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %2491 = load i32, i32* @RAX_2216_56234d8dff90
  %2492 = zext i32 %2491 to i64
  %2493 = and i64 7, %2492
  %2494 = trunc i64 %2493 to i32
  %2495 = add i32 48, %2494
  %2496 = zext i32 %2495 to i64
  store i64 %2496, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2497 = load i64, i64* @R14_2440_56234d8dffa8
  %2498 = add i64 %2497, 2
  %2499 = add i64 %2498, %1609
  %2500 = trunc i64 %2496 to i8
  %2501 = inttoptr i64 %2499 to i8*
  store i8 %2500, i8* %2501
  br label %inst_3a34

inst_3a4b:                                        ; preds = %inst_3a34
  %2502 = load i32, i32* @RDX_2264_56234d8dff90
  %2503 = zext i32 %2502 to i64
  %2504 = and i64 %2503, 4294967295
  store i64 %2504, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3a4d

inst_3a52:                                        ; preds = %inst_3a4d
  %2505 = load i64, i64* @R14_2440_56234d8dffa8
  %2506 = add i64 %332, %2505
  %2507 = load i8, i8* @RBX_2232_56234d8dff60
  %2508 = inttoptr i64 %2506 to i8*
  store i8 %2507, i8* %2508
  br label %inst_3a56

inst_3a66:                                        ; preds = %inst_3a5e
  %2509 = load i32, i32* @RSI_2280_56234d8dff90
  %2510 = zext i32 %2509 to i64
  %2511 = and i64 %2510, 4294967295
  %2512 = trunc i64 %2511 to i32
  %2513 = zext i32 %2512 to i64
  %2514 = xor i64 1, %2513
  %2515 = and i64 %2514, 4294967295
  %2516 = trunc i64 %2515 to i32
  %2517 = zext i32 %2516 to i64
  %2518 = load i32, i32* @R8_2344_56234d8dff90
  %2519 = zext i32 %2518 to i64
  %2520 = and i64 %2519, %2517
  %2521 = and i64 %2520, 4294967295
  store i64 %2521, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2522 = load i8, i8* @R10_2376_56234d8dff60
  %2523 = icmp eq i8 %2522, 0
  br i1 %2523, label %inst_3a81, label %inst_3a73

inst_3a73:                                        ; preds = %inst_3a66
  %2524 = load i64, i64* @R13_2424_56234d8dffa8
  %2525 = load i64, i64* @R15_2456_56234d8dffa8
  %2526 = sub i64 %2524, %2525
  %2527 = icmp ult i64 %2524, %2525
  %2528 = zext i1 %2527 to i8
  %2529 = icmp eq i64 %2526, 0
  %2530 = zext i1 %2529 to i8
  %2531 = or i8 %2530, %2528
  %2532 = icmp ne i8 %2531, 0
  br i1 %2532, label %inst_3a7d, label %inst_3a78

inst_3a78:                                        ; preds = %inst_3a73
  %2533 = load i64, i64* @R14_2440_56234d8dffa8
  %2534 = add i64 %2525, %2533
  %2535 = inttoptr i64 %2534 to i8*
  store i8 92, i8* %2535
  br label %inst_3a7d

inst_3a8e:                                        ; preds = %inst_3a81
  %2536 = load i8, i8* @RAX_2216_56234d8dff60
  %2537 = icmp eq i8 %2536, 0
  br i1 %2537, label %inst_3e8e, label %inst_3a96

inst_3e8e:                                        ; preds = %inst_3a8e
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3a4d

inst_3a96:                                        ; preds = %inst_3a8e
  %2538 = load i64, i64* @R13_2424_56234d8dffa8
  %2539 = load i64, i64* @R15_2456_56234d8dffa8
  %2540 = sub i64 %2538, %2539
  %2541 = icmp ult i64 %2538, %2539
  %2542 = zext i1 %2541 to i8
  %2543 = icmp eq i64 %2540, 0
  %2544 = zext i1 %2543 to i8
  %2545 = or i8 %2544, %2542
  %2546 = icmp ne i8 %2545, 0
  br i1 %2546, label %inst_3aa0, label %inst_3a9b

inst_3a9b:                                        ; preds = %inst_3a96
  %2547 = load i64, i64* @R14_2440_56234d8dffa8
  %2548 = add i64 %2539, %2547
  %2549 = inttoptr i64 %2548 to i8*
  store i8 39, i8* %2549
  br label %inst_3aa0

inst_3aa9:                                        ; preds = %inst_3aa0
  %2550 = load i64, i64* @R14_2440_56234d8dffa8
  %2551 = add i64 %2550, 1
  %2552 = add i64 %2551, %2539
  %2553 = inttoptr i64 %2552 to i8*
  store i8 39, i8* %2553
  br label %inst_3aaf

inst_3aca:                                        ; preds = %inst_3ac0
  %2554 = load i64, i64* @RSP_2312_56234d8dffa8
  %2555 = add i64 %2554, 16
  %2556 = inttoptr i64 %2555 to i64*
  %2557 = load i64, i64* %2556
  %2558 = add i64 %609, %2557
  %2559 = load i64, i64* @R14_2440_56234d8dffa8
  %2560 = add i64 %2557, 1
  %2561 = add i64 %2560, %2559
  store i64 %2561, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2562 = add i64 %2559, %2558
  store i64 %2562, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3aed

inst_3af8:                                        ; preds = %inst_3aed
  %2563 = zext i8 %1351 to i64
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2564 = and i64 %2563, 63
  switch i64 %2564, label %2565 [
    i64 0, label %_ZN12_GLOBAL__N_13SHLI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i64 1, label %2569
  ]

2565:                                             ; preds = %inst_3af8
  %2566 = add nsw i64 %2564, -1
  %2567 = shl i64 1, %2566
  %2568 = shl i64 %2567, 1
  br label %2569

2569:                                             ; preds = %2565, %inst_3af8
  %2570 = phi i64 [ %2568, %2565 ], [ 2, %inst_3af8 ]
  store i64 %2570, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  br label %_ZN12_GLOBAL__N_13SHLI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_13SHLI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %2569, %inst_3af8
  %2571 = add i64 %1361, 5
  %2572 = add i64 %2571, 3
  %2573 = add i64 %2572, 3
  %2574 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %2574, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %2575 = add i64 %2573, 10
  store i64 8589934635, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2576 = add i64 %2575, 3
  %2577 = and i64 8589934635, %2574
  %2578 = icmp eq i64 %2577, 0
  %2579 = zext i1 %2578 to i8
  %2580 = add i64 %2576, 2
  %2581 = sub i64 %2580, 50
  %2582 = icmp eq i8 %2579, 0
  %2583 = select i1 %2582, i64 %2580, i64 %2581
  br i1 %2578, label %inst_3ae0, label %inst_3b12

inst_3b12:                                        ; preds = %_ZN12_GLOBAL__N_13SHLI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %2584 = add i64 %2583, 5
  %2585 = load i64*, i64** @RSP_2312_56234d8e7800
  %2586 = bitcast i64* %2585 to i32*
  %2587 = getelementptr i64, i64* %2585, i32 8
  %2588 = load i64, i64* %2587
  store i64 %2588, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %2589 = add i64 %2584, 5
  %2590 = getelementptr i64, i64* %2585, i32 14
  %2591 = load i64, i64* %2590
  store i64 %2591, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %2592 = add i64 %2589, 5
  %2593 = getelementptr i64, i64* %2585, i32 6
  %2594 = load i64, i64* %2593
  store i64 %2594, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %2595 = add i64 %2592, 8
  %2596 = getelementptr i32, i32* %2586, i32 2
  store i32 2, i32* %2596
  br label %inst_3b29

inst_3b30:                                        ; preds = %inst_3b29
  %2597 = bitcast i8* %1023 to i32*
  %2598 = add i64 %1031, 2
  %2599 = load i8, i8* @RAX_2216_56234d8dff60
  %2600 = icmp eq i8 %2599, 0
  %2601 = zext i1 %2600 to i8
  %2602 = add i64 %2598, 5
  %2603 = add i64 %2602, 5
  %2604 = icmp eq i8 %2601, 0
  %2605 = getelementptr i32, i32* %1022, i32 2
  %2606 = load i32, i32* %2605
  %2607 = select i1 %2604, i32 4, i32 %2606
  %2608 = zext i32 %2607 to i64
  store i64 %2608, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2609 = add i64 %2603, 4
  %2610 = getelementptr i32, i32* %2597, i32 2
  store i32 %2607, i32* %2610
  br label %inst_3b40

inst_4193:                                        ; preds = %inst_3b79
  %2611 = add i64 %130, 8
  %2612 = add i64 %2611, 9
  %2613 = add i64 %2612, 3
  %2614 = add i64 %2613, 6
  %2615 = add i64 %2614, 1536
  %2616 = add i64 %2615, 5
  %2617 = add i64 %133, -8
  %2618 = inttoptr i64 %2617 to i64*
  store i64 %2616, i64* %2618
  store i64 %2617, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2619 = call %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %131)
  br label %inst_4198

inst_3b93:                                        ; preds = %inst_3b79
  %2620 = add i64 184, %133
  %2621 = getelementptr i64, i64* %132, i32 23
  %2622 = icmp ult i64 %2620, %133
  %2623 = icmp ult i64 %2620, 184
  %2624 = or i1 %2622, %2623
  %2625 = zext i1 %2624 to i8
  store i8 %2625, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %2626 = trunc i64 %2620 to i32
  %2627 = and i32 %2626, 255
  %2628 = call i32 @llvm.ctpop.i32(i32 %2627) #13, !range !1234
  %2629 = trunc i32 %2628 to i8
  %2630 = and i8 %2629, 1
  %2631 = xor i8 %2630, 1
  store i8 %2631, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %2632 = xor i64 184, %133
  %2633 = xor i64 %2632, %2620
  %2634 = lshr i64 %2633, 4
  %2635 = trunc i64 %2634 to i8
  %2636 = and i8 %2635, 1
  store i8 %2636, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2637 = icmp eq i64 %2620, 0
  %2638 = zext i1 %2637 to i8
  store i8 %2638, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %2639 = lshr i64 %2620, 63
  %2640 = trunc i64 %2639 to i8
  store i8 %2640, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %2641 = lshr i64 %133, 63
  %2642 = xor i64 %2639, %2641
  %2643 = add nuw nsw i64 %2642, %2639
  %2644 = icmp eq i64 %2643, 2
  %2645 = zext i1 %2644 to i8
  store i8 %2645, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %2646 = add i64 %2620, 8
  %2647 = getelementptr i64, i64* %2621, i32 1
  %2648 = load i64, i64* %2621
  store i64 %2648, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %2649 = add i64 %2646, 8
  %2650 = getelementptr i64, i64* %2647, i32 1
  %2651 = load i64, i64* %2647
  store i64 %2651, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %2652 = add i64 %2649, 8
  %2653 = getelementptr i64, i64* %2650, i32 1
  %2654 = load i64, i64* %2650
  store i64 %2654, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %2655 = add i64 %2652, 8
  %2656 = getelementptr i64, i64* %2653, i32 1
  %2657 = load i64, i64* %2653
  store i64 %2657, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %2658 = add i64 %2655, 8
  %2659 = load i64, i64* %2656
  store i64 %2659, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %2660 = add i64 %2658, 8
  %2661 = getelementptr i64, i64* %2656, i32 1
  %2662 = load i64, i64* %2661
  store i64 %2662, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %2663 = add i64 %2660, 8
  store i64 %2663, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %131

inst_3bb5:                                        ; preds = %inst_3bb0
  %2664 = load i64, i64* @R14_2440_56234d8dffa8
  %2665 = add i64 %408, %2664
  %2666 = inttoptr i64 %2665 to i8*
  store i8 39, i8* %2666
  br label %inst_3bba

inst_3bc3:                                        ; preds = %inst_3bba
  %2667 = load i64, i64* @R14_2440_56234d8dffa8
  %2668 = add i64 %2667, 1
  %2669 = add i64 %2668, %408
  %2670 = inttoptr i64 %2669 to i8*
  store i8 92, i8* %2670
  br label %inst_3bc9

inst_41c2:                                        ; preds = %inst_3bc9
  %2671 = load i64, i64* %2289
  store i64 %2671, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_37c2

inst_3bd6:                                        ; preds = %inst_3bc9
  %2672 = load i64, i64* @R14_2440_56234d8dffa8
  %2673 = add i64 %2672, 2
  %2674 = add i64 %2673, %408
  %2675 = inttoptr i64 %2674 to i8*
  store i8 39, i8* %2675
  %2676 = getelementptr i64, i64* %1421, i32 10
  %2677 = load i64, i64* %2676
  store i64 %2677, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_37c2

inst_3c0c:                                        ; preds = %inst_3c04
  %2678 = load i64, i64* @RSP_2312_56234d8dffa8
  %2679 = add i64 %2678, 13
  %2680 = inttoptr i64 %2679 to i8*
  store i8 1, i8* %2680
  br label %inst_3c11

inst_41aa:                                        ; preds = %inst_3c11
  %2681 = getelementptr i8, i8* %1575, i32 14
  store i8 1, i8* %2681
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %2682 = getelementptr i64, i64* %1576, i32 10
  store i64 0, i64* %2682
  br label %inst_3764

inst_3c1a:                                        ; preds = %inst_3c11
  %2683 = bitcast i8* %1575 to i64*
  %2684 = bitcast i8* %1575 to i32*
  %2685 = getelementptr i64, i64* %2683, i32 10
  store i64 0, i64* %2685
  %2686 = getelementptr i8, i8* %1575, i32 14
  store i8 1, i8* %2686
  %2687 = getelementptr i8, i8* %1575, i32 124
  store i8 0, i8* %2687
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %2688 = getelementptr i8, i8* %1575, i32 15
  store i8 0, i8* %2688
  %2689 = getelementptr i64, i64* %2683, i32 3
  store i64 1, i64* %2689
  %2690 = getelementptr i64, i64* %2683, i32 9
  store i64 ptrtoint (i8* @data_62dd to i64), i64* %2690
  store i64 1, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %2691 = getelementptr i32, i32* %2684, i32 2
  store i32 2, i32* %2691
  br label %inst_3073

inst_405d:                                        ; preds = %inst_3c60
  %2692 = load i8*, i8** @RSP_2312_56234d8e76a0
  %2693 = bitcast i8* %2692 to i64*
  %2694 = getelementptr i8, i8* %2692, i32 14
  store i8 1, i8* %2694
  %2695 = getelementptr i8, i8* %2692, i32 124
  store i8 0, i8* %2695
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %2696 = getelementptr i64, i64* %2693, i32 10
  store i64 0, i64* %2696
  %2697 = getelementptr i8, i8* %2692, i32 15
  store i8 1, i8* %2697
  %2698 = getelementptr i8, i8* %2692, i32 13
  store i8 1, i8* %2698
  %2699 = getelementptr i64, i64* %2693, i32 3
  store i64 1, i64* %2699
  store i64 0, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %2700 = getelementptr i64, i64* %2693, i32 9
  store i64 ptrtoint (i8* @data_62db to i64), i64* %2700
  br label %inst_3073

inst_3c68:                                        ; preds = %inst_3c60
  %2701 = load i64, i64* @R13_2424_56234d8dffa8
  %2702 = icmp eq i64 %2701, 0
  br i1 %2702, label %inst_3e96, label %inst_3c71

inst_3e96:                                        ; preds = %inst_3c68
  %2703 = load i8*, i8** @RSP_2312_56234d8e76a0
  %2704 = bitcast i8* %2703 to i64*
  %2705 = getelementptr i64, i64* %2704, i32 10
  store i64 0, i64* %2705
  %2706 = getelementptr i8, i8* %2703, i32 14
  store i8 1, i8* %2706
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %2707 = getelementptr i8, i8* %2703, i32 124
  store i8 0, i8* %2707
  br label %inst_3c8b

inst_3c71:                                        ; preds = %inst_3c68
  %2708 = load i8*, i8** @R14_2440_56234d8e76a0
  store i8 34, i8* %2708
  %2709 = load i8*, i8** @RSP_2312_56234d8e76a0
  %2710 = bitcast i8* %2709 to i64*
  %2711 = getelementptr i8, i8* %2709, i32 14
  store i8 1, i8* %2711
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %2712 = getelementptr i8, i8* %2709, i32 124
  store i8 0, i8* %2712
  %2713 = getelementptr i64, i64* %2710, i32 10
  store i64 0, i64* %2713
  br label %inst_3c8b

inst_3d3b:                                        ; preds = %inst_3d34
  %2714 = add i64 %1055, 7
  store i8* @data_62df, i8** @RSI_2280_56234d8e76a0
  %2715 = add i64 %2714, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2716 = add i64 %2715, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2717 = add i64 %2716, 5
  %2718 = add i64 %1045, -8
  %2719 = inttoptr i64 %2718 to i64*
  store i64 %2717, i64* %2719
  store i64 %2718, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2720 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1043)
  %2721 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %2721, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %2722 = load i64*, i64** @RSP_2312_56234d8e7800
  %2723 = load i32*, i32** @RSP_2312_56234d8ed000
  %2724 = getelementptr i64, i64* %2722, i32 13
  store i64 %2721, i64* %2724
  store i8* @data_62df, i8** @RAX_2216_56234d8e76a0
  %2725 = sub i64 %2721, ptrtoint (i8* @data_62df to i64)
  %2726 = icmp ult i64 %2721, ptrtoint (i8* @data_62df to i64)
  %2727 = zext i1 %2726 to i8
  store i8 %2727, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %2728 = trunc i64 %2725 to i32
  %2729 = and i32 %2728, 255
  %2730 = call i32 @llvm.ctpop.i32(i32 %2729) #13, !range !1234
  %2731 = trunc i32 %2730 to i8
  %2732 = and i8 %2731, 1
  %2733 = xor i8 %2732, 1
  store i8 %2733, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %2734 = xor i64 ptrtoint (i8* @data_62df to i64), %2721
  %2735 = xor i64 %2734, %2725
  %2736 = lshr i64 %2735, 4
  %2737 = trunc i64 %2736 to i8
  %2738 = and i8 %2737, 1
  store i8 %2738, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2739 = icmp eq i64 %2725, 0
  %2740 = zext i1 %2739 to i8
  store i8 %2740, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %2741 = lshr i64 %2725, 63
  %2742 = trunc i64 %2741 to i8
  store i8 %2742, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %2743 = lshr i64 %2721, 63
  %2744 = xor i64 %2741, %2743
  %2745 = add nuw nsw i64 %2744, %2743
  %2746 = icmp eq i64 %2745, 2
  %2747 = zext i1 %2746 to i8
  store i8 %2747, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %2748 = icmp eq i8 %2740, 0
  %2749 = select i1 %2748, i64 ptrtoint (i8* @data_3d66 to i64), i64 ptrtoint (i8* @data_40fe to i64)
  br i1 %2739, label %inst_40fe, label %inst_3d66

inst_40fe:                                        ; preds = %inst_3d3b
  %2750 = add i64 %2749, 4
  %2751 = getelementptr i32, i32* %2723, i32 2
  %2752 = load i32, i32* %2751
  %2753 = zext i32 %2752 to i64
  store i64 %2753, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2754 = add i64 %2750, 3
  store i64 %2721, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2755 = add i64 %2754, 5
  %2756 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2757 = add i64 %2756, -8
  %2758 = inttoptr i64 %2757 to i64*
  store i64 %2755, i64* %2758
  store i64 %2757, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2759 = call %struct.Memory* @sub_2eb0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2720)
  %2760 = load i64, i64* @RSP_2312_56234d8dffa8
  %2761 = add i64 %2760, 104
  %2762 = load i64, i64* @RAX_2216_56234d8dffa8
  %2763 = inttoptr i64 %2761 to i64*
  store i64 %2762, i64* %2763
  br label %inst_3d66

inst_4114:                                        ; preds = %inst_3d66
  %2764 = add i64 %1209, 4
  %2765 = getelementptr i32, i32* %1183, i32 2
  %2766 = load i32, i32* %2765
  %2767 = zext i32 %2766 to i64
  store i64 %2767, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2768 = add i64 %2764, 3
  store i64 %1181, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2769 = add i64 %2768, 5
  %2770 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2771 = add i64 %2770, -8
  %2772 = inttoptr i64 %2771 to i64*
  store i64 %2769, i64* %2772
  store i64 %2771, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2773 = call %struct.Memory* @sub_2eb0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1180)
  %2774 = load i64, i64* @RSP_2312_56234d8dffa8
  %2775 = add i64 %2774, 96
  %2776 = load i64, i64* @RAX_2216_56234d8dffa8
  %2777 = inttoptr i64 %2775 to i64*
  store i64 %2776, i64* %2777
  br label %inst_3d91

inst_3f5d:                                        ; preds = %inst_3d91
  %2778 = add i64 %1383, 5
  %2779 = load i64, i64* @RSP_2312_56234d8dffa8
  %2780 = add i64 %2779, 104
  %2781 = inttoptr i64 %2780 to i64*
  %2782 = load i64, i64* %2781
  store i64 %2782, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2783 = add i64 %2778, 3
  %2784 = inttoptr i64 %2782 to i8*
  %2785 = load i8, i8* %2784
  %2786 = zext i8 %2785 to i64
  store i64 %2786, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2787 = add i64 %2783, 2
  %2788 = icmp eq i8 %2785, 0
  %2789 = zext i1 %2788 to i8
  %2790 = add i64 %2787, 6
  %2791 = sub i64 %2790, 465
  %2792 = icmp eq i8 %2789, 0
  %2793 = select i1 %2792, i64 %2790, i64 %2791
  br i1 %2788, label %inst_3d9c, label %inst_3f70

inst_3e3e:                                        ; preds = %inst_3e39
  %2794 = load i64, i64* @R14_2440_56234d8dffa8
  %2795 = add i64 %998, %2794
  %2796 = inttoptr i64 %2795 to i8*
  store i8 48, i8* %2796
  br label %inst_3e43

inst_3e4c:                                        ; preds = %inst_3e43
  %2797 = load i64, i64* @R14_2440_56234d8dffa8
  %2798 = add i64 %2797, 2
  %2799 = add i64 %2798, %1513
  %2800 = inttoptr i64 %2799 to i8*
  store i8 48, i8* %2800
  br label %inst_3e52

inst_3ef2:                                        ; preds = %inst_3eb1
  %2801 = load i8, i8* %2383
  %2802 = icmp eq i8 %2801, 0
  %2803 = zext i1 %2802 to i8
  %2804 = icmp eq i8 %2803, 0
  br i1 %2804, label %inst_3f07, label %inst_3f18

inst_3f75:                                        ; preds = %inst_3f70
  %2805 = load i64, i64* @R14_2440_56234d8dffa8
  %2806 = add i64 %1219, %2805
  %2807 = load i8, i8* @RAX_2216_56234d8dff60
  %2808 = inttoptr i64 %2806 to i8*
  store i8 %2807, i8* %2808
  br label %inst_3f79

inst_3f9f:                                        ; preds = %inst_3f92
  store i64 8070630310989004800, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2809 = and i64 %2314, 63
  %2810 = shl i64 1, %2809
  %2811 = and i64 %2810, 8070630310989004800
  %2812 = icmp ne i64 %2811, 0
  %2813 = zext i1 %2812 to i8
  %2814 = icmp eq i8 %2813, 0
  br i1 %2814, label %inst_3810, label %inst_3fb3

inst_3fb3:                                        ; preds = %inst_3f9f
  %2815 = getelementptr i8, i8* %1586, i32 15
  %2816 = load i8, i8* %2815
  %2817 = icmp eq i8 %2816, 0
  %2818 = zext i1 %2817 to i8
  %2819 = icmp eq i8 %2818, 0
  br i1 %2819, label %inst_41a2, label %inst_3fbe

inst_41a2:                                        ; preds = %inst_3fb3
  store i64 %2298, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_3b40

inst_3fbe:                                        ; preds = %inst_3fb3
  %2820 = load i64, i64* @R13_2424_56234d8dffa8
  %2821 = load i64, i64* @R15_2456_56234d8dffa8
  %2822 = sub i64 %2820, %2821
  %2823 = icmp ult i64 %2820, %2821
  %2824 = zext i1 %2823 to i8
  %2825 = icmp eq i64 %2822, 0
  %2826 = zext i1 %2825 to i8
  %2827 = or i8 %2826, %2824
  %2828 = icmp ne i8 %2827, 0
  br i1 %2828, label %inst_3fc8, label %inst_3fc3

inst_3fc3:                                        ; preds = %inst_3fbe
  %2829 = load i64, i64* @R14_2440_56234d8dffa8
  %2830 = add i64 %2821, %2829
  %2831 = inttoptr i64 %2830 to i8*
  store i8 63, i8* %2831
  br label %inst_3fc8

inst_3fd1:                                        ; preds = %inst_3fc8
  %2832 = load i64, i64* @R14_2440_56234d8dffa8
  %2833 = add i64 %2832, 1
  %2834 = add i64 %2833, %2821
  %2835 = inttoptr i64 %2834 to i8*
  store i8 34, i8* %2835
  br label %inst_3fd7

inst_3fe0:                                        ; preds = %inst_3fd7
  %2836 = load i64, i64* @R14_2440_56234d8dffa8
  %2837 = add i64 %2836, 2
  %2838 = add i64 %2837, %2821
  %2839 = inttoptr i64 %2838 to i8*
  store i8 34, i8* %2839
  br label %inst_3fe6

inst_3fef:                                        ; preds = %inst_3fe6
  %2840 = load i64, i64* @R14_2440_56234d8dffa8
  %2841 = add i64 %2840, 3
  %2842 = add i64 %2841, %2821
  %2843 = inttoptr i64 %2842 to i8*
  store i8 63, i8* %2843
  br label %inst_3ff5

inst_4010:                                        ; preds = %inst_4008
  %2844 = load i8*, i8** @RSP_2312_56234d8e76a0
  %2845 = bitcast i8* %2844 to i64*
  %2846 = getelementptr i8, i8* %2844, i32 14
  store i8 1, i8* %2846
  %2847 = getelementptr i8, i8* %2844, i32 124
  store i8 0, i8* %2847
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %2848 = getelementptr i64, i64* %2845, i32 10
  store i64 0, i64* %2848
  %2849 = getelementptr i8, i8* %2844, i32 15
  store i8 1, i8* %2849
  %2850 = getelementptr i8, i8* %2844, i32 13
  store i8 0, i8* %2850
  %2851 = getelementptr i64, i64* %2845, i32 3
  store i64 1, i64* %2851
  store i64 0, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %2852 = getelementptr i64, i64* %2845, i32 9
  store i64 ptrtoint (i8* @data_62dd to i64), i64* %2852
  br label %inst_3073

inst_40a6:                                        ; preds = %inst_409c
  %2853 = add i64 %551, 2
  %2854 = load i8, i8* @RAX_2216_56234d8dff60
  %2855 = icmp eq i8 %2854, 0
  %2856 = zext i1 %2855 to i8
  %2857 = add i64 %2853, 2
  %2858 = add i64 %2857, 40
  %2859 = icmp eq i8 %2856, 0
  %2860 = select i1 %2859, i64 %2857, i64 %2858
  br i1 %2855, label %inst_40d2, label %inst_40aa

inst_40aa:                                        ; preds = %inst_40a6
  %2861 = add i64 %2860, 3
  %2862 = inttoptr i64 %544 to i8*
  %2863 = load i8, i8* %2862
  %2864 = zext i8 %2863 to i64
  store i64 %2864, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %2865 = add i64 %2861, 3
  %2866 = add i64 %2865, 2
  %2867 = icmp eq i8 %2863, 0
  %2868 = zext i1 %2867 to i8
  %2869 = add i64 %2866, 2
  %2870 = add i64 %2869, 30
  %2871 = icmp eq i8 %2868, 0
  %2872 = select i1 %2871, i64 %2869, i64 %2870
  br i1 %2867, label %inst_40d2, label %inst_40b4

inst_40b4:                                        ; preds = %inst_40aa
  %2873 = add i64 %2872, 3
  store i64 %913, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2874 = add i64 %2873, 3
  %2875 = sub i64 %544, %913
  br label %inst_40ba

inst_40bf:                                        ; preds = %inst_40ba
  %2876 = add i64 %602, 4
  %2877 = load i64, i64* @R14_2440_56234d8dffa8
  %2878 = add i64 %592, %2877
  %2879 = load i8, i8* @RCX_2248_56234d8dff60
  %2880 = inttoptr i64 %2878 to i8*
  store i8 %2879, i8* %2880
  br label %inst_40c3

inst_40cf:                                        ; preds = %inst_40c3
  %2881 = add i64 %676, 3
  store i64 %664, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_40d2

inst_40db:                                        ; preds = %inst_40d2
  %2882 = load i64, i64* @R14_2440_56234d8dffa8
  %2883 = add i64 %694, %2882
  %2884 = inttoptr i64 %2883 to i8*
  store i8 0, i8* %2884
  br label %inst_3b79
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5bf0_fini(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5bf0:
  %0 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1 = add i64 %0, 8
  store i64 %1, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %memory
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_2d90(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_2d90:
  %0 = load i64, i64* @R13_2424_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @R12_2408_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i64, i64* @RBP_2328_56234d8dffa8
  %8 = add i64 %5, -8
  %9 = getelementptr i64, i64* %6, i32 -1
  store i64 %7, i64* %9
  %10 = load i64, i64* @RBX_2232_56234d8dffa8
  %11 = add i64 %8, -8
  %12 = getelementptr i64, i64* %9, i32 -1
  store i64 %10, i64* %12
  %13 = sub i64 %11, 8
  store i64 %13, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %14 = load i64, i64* @RDX_2264_56234d8dffa8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %inst_2e01, label %inst_2d9f

inst_2dc0:                                        ; preds = %inst_2db5, %inst_2d9f
  %16 = phi i64 [ undef, %inst_2d9f ], [ %164, %inst_2db5 ]
  %17 = phi %struct.Memory* [ %memory, %inst_2d9f ], [ %30, %inst_2db5 ]
  %18 = add i64 %16, 3
  %19 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %19, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %20 = add i64 %18, 3
  %21 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %21, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %22 = add i64 %20, 3
  %23 = load i32, i32* @R13_2424_56234d8dff90
  %24 = zext i32 %23 to i64
  %25 = and i64 %24, 4294967295
  store i64 %25, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %26 = add i64 %22, 5
  %27 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %28 = add i64 %27, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %26, i64* %29
  store i64 %28, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %30 = call %struct.Memory* @sub_4ba0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %17)
  %31 = load i64, i64* @RAX_2216_56234d8dffa8
  %32 = sub i64 %31, -1
  %33 = icmp eq i64 %32, 0
  %34 = zext i1 %33 to i8
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %inst_2db0, label %inst_2dd4

inst_2dd4:                                        ; preds = %inst_2db5, %inst_2e01, %inst_2dc0
  %36 = phi %struct.Memory* [ %memory, %inst_2e01 ], [ %30, %inst_2db5 ], [ %30, %inst_2dc0 ]
  %37 = load i64*, i64** @RSP_2312_56234d8e7800
  %38 = load i64, i64* @RSP_2312_56234d8dffa8
  %39 = add i64 8, %38
  %40 = getelementptr i64, i64* %37, i32 1
  %41 = icmp ult i64 %39, %38
  %42 = icmp ult i64 %39, 8
  %43 = or i1 %41, %42
  %44 = zext i1 %43 to i8
  store i8 %44, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %45 = trunc i64 %39 to i32
  %46 = and i32 %45, 255
  %47 = call i32 @llvm.ctpop.i32(i32 %46) #13, !range !1234
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  store i8 %50, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %51 = xor i64 8, %38
  %52 = xor i64 %51, %39
  %53 = lshr i64 %52, 4
  %54 = trunc i64 %53 to i8
  %55 = and i8 %54, 1
  store i8 %55, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  store i8 %57, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %58 = lshr i64 %39, 63
  %59 = trunc i64 %58 to i8
  store i8 %59, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %60 = lshr i64 %38, 63
  %61 = xor i64 %58, %60
  %62 = add nuw nsw i64 %61, %58
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  store i8 %64, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %65 = load i64, i64* @R12_2408_56234d8dffa8
  store i64 %65, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %66 = add i64 %39, 8
  %67 = getelementptr i64, i64* %40, i32 1
  %68 = load i64, i64* %40
  store i64 %68, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %69 = add i64 %66, 8
  %70 = getelementptr i64, i64* %67, i32 1
  %71 = load i64, i64* %67
  store i64 %71, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %72 = add i64 %69, 8
  %73 = load i64, i64* %70
  store i64 %73, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %74 = add i64 %72, 8
  %75 = getelementptr i64, i64* %70, i32 1
  %76 = load i64, i64* %75
  store i64 %76, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %77 = add i64 %74, 8
  store i64 %77, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %36

inst_2e01:                                        ; preds = %inst_2d90
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_2dd4

inst_2d9f:                                        ; preds = %inst_2d90
  %78 = load i32, i32* @RDI_2296_56234d8dff90
  %79 = zext i32 %78 to i64
  %80 = and i64 %79, 4294967295
  store i64 %80, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %81 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %81, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  store i64 %14, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br label %inst_2dc0

inst_2de8:                                        ; preds = %inst_2db0
  %82 = add i64 %176, 5
  %83 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %84 = add i64 %83, -8
  %85 = inttoptr i64 %84 to i64*
  store i64 %82, i64* %85
  store i64 %84, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %86 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %30)
  %87 = load i32*, i32** @RAX_2216_56234d8ed000
  store i32 28, i32* %87
  %88 = load i64*, i64** @RSP_2312_56234d8e7800
  %89 = load i64, i64* @RSP_2312_56234d8dffa8
  %90 = add i64 8, %89
  %91 = getelementptr i64, i64* %88, i32 1
  %92 = icmp ult i64 %90, %89
  %93 = icmp ult i64 %90, 8
  %94 = or i1 %92, %93
  %95 = zext i1 %94 to i8
  store i8 %95, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %96 = trunc i64 %90 to i32
  %97 = and i32 %96, 255
  %98 = call i32 @llvm.ctpop.i32(i32 %97) #13, !range !1234
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  store i8 %101, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %102 = xor i64 8, %89
  %103 = xor i64 %102, %90
  %104 = lshr i64 %103, 4
  %105 = trunc i64 %104 to i8
  %106 = and i8 %105, 1
  store i8 %106, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %107 = icmp eq i64 %90, 0
  %108 = zext i1 %107 to i8
  store i8 %108, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %109 = lshr i64 %90, 63
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %111 = lshr i64 %89, 63
  %112 = xor i64 %109, %111
  %113 = add nuw nsw i64 %112, %109
  %114 = icmp eq i64 %113, 2
  %115 = zext i1 %114 to i8
  store i8 %115, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %116 = load i64, i64* @R12_2408_56234d8dffa8
  store i64 %116, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %117 = add i64 %90, 8
  %118 = getelementptr i64, i64* %91, i32 1
  %119 = load i64, i64* %91
  store i64 %119, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %120 = add i64 %117, 8
  %121 = getelementptr i64, i64* %118, i32 1
  %122 = load i64, i64* %118
  store i64 %122, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %123 = add i64 %120, 8
  %124 = load i64, i64* %121
  store i64 %124, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %125 = add i64 %123, 8
  %126 = getelementptr i64, i64* %121, i32 1
  %127 = load i64, i64* %126
  store i64 %127, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %128 = add i64 %125, 8
  store i64 %128, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %86

inst_2db5:                                        ; preds = %inst_2db0
  %129 = add i64 %176, 3
  %130 = load i64, i64* @R12_2408_56234d8dffa8
  %131 = add i64 %31, %130
  store i64 %131, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %132 = add i64 %129, 3
  %133 = load i64, i64* @RBP_2328_56234d8dffa8
  %134 = add i64 %31, %133
  store i64 %134, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %135 = add i64 %132, 3
  %136 = load i64, i64* @RBX_2232_56234d8dffa8
  %137 = sub i64 %136, %31
  store i64 %137, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %138 = icmp ult i64 %136, %31
  %139 = zext i1 %138 to i8
  store i8 %139, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %140 = trunc i64 %137 to i32
  %141 = and i32 %140, 255
  %142 = call i32 @llvm.ctpop.i32(i32 %141) #13, !range !1234
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %146 = xor i64 %31, %136
  %147 = xor i64 %146, %137
  %148 = lshr i64 %147, 4
  %149 = trunc i64 %148 to i8
  %150 = and i8 %149, 1
  store i8 %150, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %151 = icmp eq i64 %137, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %153 = lshr i64 %137, 63
  %154 = trunc i64 %153 to i8
  store i8 %154, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %155 = lshr i64 %136, 63
  %156 = xor i64 %165, %155
  %157 = xor i64 %153, %155
  %158 = add nuw nsw i64 %157, %156
  %159 = icmp eq i64 %158, 2
  %160 = zext i1 %159 to i8
  store i8 %160, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %161 = add i64 %135, 2
  %162 = add i64 %161, 20
  %163 = icmp eq i8 %152, 0
  %164 = select i1 %163, i64 %161, i64 %162
  br i1 %151, label %inst_2dd4, label %inst_2dc0

inst_2db0:                                        ; preds = %inst_2dc0
  %165 = lshr i64 %31, 63
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %166 = trunc i64 %31 to i32
  %167 = and i32 %166, 255
  %168 = call i32 @llvm.ctpop.i32(i32 %167) #13, !range !1234
  %169 = trunc i32 %168 to i8
  %170 = and i8 %169, 1
  %171 = xor i8 %170, 1
  store i8 %171, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %172 = icmp eq i64 %31, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %174 = trunc i64 %165 to i8
  store i8 %174, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %175 = icmp eq i8 %173, 0
  %176 = select i1 %175, i64 add (i64 ptrtoint (i8* @data_2db0 to i64), i64 5), i64 add (i64 ptrtoint (i8* @data_2db0 to i64), i64 56)
  br i1 %172, label %inst_2de8, label %inst_2db5
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_2d50(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_2d50:
  %0 = call %struct.Memory* @ext_18e0_posix_fadvise(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  ret %struct.Memory* %0
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_2710_start(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_2710:
  store i64 0, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %0 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %0, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %1 = load i64*, i64** @RSP_2312_56234d8e7800
  %2 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %3 = add i64 %2, 8
  %4 = load i64, i64* %1
  store i64 %4, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 %3, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %5 = and i64 -16, %3
  %6 = inttoptr i64 %5 to i64*
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 255
  %9 = call i32 @llvm.ctpop.i32(i32 %8) #13, !range !1234
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  store i8 %12, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %13 = icmp eq i64 %5, 0
  %14 = zext i1 %13 to i8
  store i8 %14, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %15 = lshr i64 %5, 63
  %16 = trunc i64 %15 to i8
  store i8 %16, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %17 = load i64, i64* @RAX_2216_56234d8dffa8
  %18 = add i64 %5, -8
  %19 = getelementptr i64, i64* %6, i32 -1
  store i64 %17, i64* %19
  %20 = add i64 %18, -8
  %21 = getelementptr i64, i64* %19, i32 -1
  store i64 %18, i64* %21
  store void ()* @fini, void ()** @R8_2344_56234d8ed260
  store void ()* @init, void ()** @RCX_2248_56234d8ed260
  store i32 (i32, i8**, i8**)* @main, i32 (i32, i8**, i8**)** @RDI_2296_56234d8ee330
  %22 = add i64 %20, -8
  %23 = load i64, i64* bitcast (i8** @data_207fe0 to i64*)
  %24 = getelementptr i64, i64* %21, i32 -1
  store i64 ptrtoint (i8** @data_207fe0 to i64), i64* %24
  store i64 %22, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  store i64 %23, i64* @RIP_2472_56234d8dffa8, align 8, !tbaa !1216
  %25 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 %23, %struct.Memory* %memory)
  store i8* @data_273a, i8** @RIP_2472_56234d8e76a0
  call void @abort() #13
  unreachable
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5460(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5460:
  store i8* @data_6b0f, i8** @RSI_2280_56234d8e76a0
  %0 = load i64, i64* @RSP_2312_56234d8dffa8
  %1 = sub i64 %0, 8
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 ptrtoint (i8* @data_5477 to i64), i64* %3
  store i64 %2, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %4 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %5 = load i32, i32* bitcast (i8* @data_208040 to i32*)
  %6 = zext i32 %5 to i64
  store i64 %6, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_6284, i8** @RDX_2264_56234d8e76a0
  %7 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %7, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %8 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 ptrtoint (i8* @data_5490 to i64), i64* %10
  store i64 %9, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %11 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %4)
  %12 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 ptrtoint (i8* @data_5495 to i64), i64* %14
  store i64 %13, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %15 = call %struct.Memory* @ext_208278_abort(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %11)
  ret %struct.Memory* %15
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_2ca0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_2ca0:
  %0 = load i64, i64* @RBP_2328_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @RBX_2232_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = sub i64 %5, 8
  %8 = inttoptr i64 %7 to i64*
  %9 = icmp ult i64 %5, 8
  %10 = zext i1 %9 to i8
  store i8 %10, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %11 = trunc i64 %7 to i32
  %12 = and i32 %11, 255
  %13 = call i32 @llvm.ctpop.i32(i32 %12) #13, !range !1234
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  store i8 %16, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %17 = xor i64 8, %5
  %18 = xor i64 %17, %7
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  store i8 %21, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %22 = icmp eq i64 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %24 = lshr i64 %7, 63
  %25 = trunc i64 %24 to i8
  store i8 %25, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %26 = lshr i64 %5, 63
  %27 = xor i64 %24, %26
  %28 = add nuw nsw i64 %27, %26
  %29 = icmp eq i64 %28, 2
  %30 = zext i1 %29 to i8
  store i8 %30, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %31 = load i64, i64* @stdout
  store i64 %31, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %32 = add i64 %7, -8
  %33 = getelementptr i64, i64* %8, i32 -1
  store i64 ptrtoint (i8* @data_2cb2 to i64), i64* %33
  store i64 %32, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %34 = call %struct.Memory* @sub_5530(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %35 = load i32, i32* @RAX_2216_56234d8dff90
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #13, !range !1234
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  store i8 %40, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %41 = icmp eq i32 %35, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %43 = lshr i32 %35, 31
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %45 = icmp eq i8 %42, 0
  %46 = select i1 %45, i64 ptrtoint (i8* @data_2cb6 to i64), i64 ptrtoint (i8* @data_2ccc to i64)
  br i1 %41, label %inst_2ccc, label %inst_2cb6

inst_2d22:                                        ; preds = %inst_2d05, %inst_2d2d, %inst_2ccc
  %47 = phi i64 [ %100, %inst_2ccc ], [ undef, %inst_2d2d ], [ ptrtoint (i8* @data_2d22 to i64), %inst_2d05 ]
  %48 = phi %struct.Memory* [ %88, %inst_2ccc ], [ %116, %inst_2d2d ], [ %204, %inst_2d05 ]
  %49 = add i64 %47, 6
  %50 = load i32, i32* bitcast (i8* @data_208040 to i32*)
  %51 = zext i32 %50 to i64
  store i64 %51, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %52 = add i64 %49, 5
  %53 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %52, i64* %55
  store i64 %54, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %56 = call %struct.Memory* @ext_208290__exit(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %48)
  br label %inst_2d2d

inst_2ce3:                                        ; preds = %inst_2cc7, %inst_2cb6
  %57 = phi i64 [ %128, %inst_2cb6 ], [ %156, %inst_2cc7 ]
  %58 = add i64 %57, 7
  store i8* @data_5c44, i8** @RSI_2280_56234d8e76a0
  %59 = add i64 %58, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %60 = add i64 %59, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %61 = add i64 %60, 5
  %62 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %61, i64* %64
  store i64 %63, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %65 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %121)
  %66 = load i64, i64* bitcast (i8* @data_208108 to i64*)
  store i64 %66, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %67 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %67, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %68 = trunc i64 %66 to i32
  %69 = and i32 %68, 255
  %70 = call i32 @llvm.ctpop.i32(i32 %69) #13, !range !1234
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %74 = icmp eq i64 %66, 0
  %75 = zext i1 %74 to i8
  store i8 %75, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %76 = lshr i64 %66, 63
  %77 = trunc i64 %76 to i8
  store i8 %77, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %78 = icmp eq i8 %75, 0
  %79 = select i1 %78, i64 ptrtoint (i8* @data_2d05 to i64), i64 ptrtoint (i8* @data_2d2d to i64)
  br i1 %74, label %inst_2d2d, label %inst_2d05

inst_2ccc:                                        ; preds = %inst_2cc7, %inst_2ca0
  %80 = phi i64 [ %46, %inst_2ca0 ], [ %156, %inst_2cc7 ]
  %81 = phi %struct.Memory* [ %34, %inst_2ca0 ], [ %121, %inst_2cc7 ]
  %82 = add i64 %80, 7
  %83 = load i64, i64* @stderr
  store i64 %83, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %84 = add i64 %82, 5
  %85 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %86 = add i64 %85, -8
  %87 = inttoptr i64 %86 to i64*
  store i64 %84, i64* %87
  store i64 %86, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %88 = call %struct.Memory* @sub_5530(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %81)
  %89 = load i32, i32* @RAX_2216_56234d8dff90
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %90 = and i32 %89, 255
  %91 = call i32 @llvm.ctpop.i32(i32 %90) #13, !range !1234
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %95 = icmp eq i32 %89, 0
  %96 = zext i1 %95 to i8
  store i8 %96, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %97 = lshr i32 %89, 31
  %98 = trunc i32 %97 to i8
  store i8 %98, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %99 = icmp eq i8 %96, 0
  %100 = select i1 %99, i64 ptrtoint (i8* @data_2d22 to i64), i64 ptrtoint (i8* @data_2cdc to i64)
  br i1 %99, label %inst_2d22, label %inst_2cdc

inst_2d2d:                                        ; preds = %inst_2ce3, %inst_2d22
  %101 = phi i64 [ ptrtoint (i8* @data_2d2d to i64), %inst_2d22 ], [ %79, %inst_2ce3 ]
  %102 = phi %struct.Memory* [ %56, %inst_2d22 ], [ %65, %inst_2ce3 ]
  %103 = add i64 %101, 2
  %104 = load i32*, i32** @RBX_2232_56234d8ed000
  %105 = load i32, i32* %104
  %106 = zext i32 %105 to i64
  store i64 %106, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %107 = add i64 %103, 7
  store i8* @data_6284, i8** @RDX_2264_56234d8e76a0
  %108 = add i64 %107, 3
  %109 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %109, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %110 = add i64 %108, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %111 = add i64 %110, 2
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %112 = add i64 %111, 5
  %113 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115
  store i64 %114, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %116 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %102)
  br label %inst_2d22

inst_2cb6:                                        ; preds = %inst_2ca0
  %117 = add i64 %46, 5
  %118 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %119 = add i64 %118, -8
  %120 = inttoptr i64 %119 to i64*
  store i64 %117, i64* %120
  store i64 %119, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %121 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %34)
  %122 = load i8, i8* @data_208100
  %123 = icmp eq i8 %122, 0
  %124 = zext i1 %123 to i8
  %125 = load i32*, i32** @RAX_2216_56234d8ed000
  %126 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %126, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %127 = icmp eq i8 %124, 0
  %128 = select i1 %127, i64 ptrtoint (i8* @data_2cc7 to i64), i64 ptrtoint (i8* @data_2ce3 to i64)
  br i1 %123, label %inst_2ce3, label %inst_2cc7

inst_2cc7:                                        ; preds = %inst_2cb6
  %129 = add i64 %128, 3
  %130 = load i32, i32* %125
  %131 = sub i32 %130, 32
  %132 = icmp ult i32 %130, 32
  %133 = zext i1 %132 to i8
  store i8 %133, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %134 = and i32 %131, 255
  %135 = call i32 @llvm.ctpop.i32(i32 %134) #13, !range !1234
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  store i8 %138, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %139 = xor i32 %130, 32
  %140 = xor i32 %139, %131
  %141 = lshr i32 %140, 4
  %142 = trunc i32 %141 to i8
  %143 = and i8 %142, 1
  store i8 %143, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %144 = icmp eq i32 %131, 0
  %145 = zext i1 %144 to i8
  store i8 %145, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %146 = lshr i32 %131, 31
  %147 = trunc i32 %146 to i8
  store i8 %147, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %148 = lshr i32 %130, 31
  %149 = xor i32 %146, %148
  %150 = add nuw nsw i32 %149, %148
  %151 = icmp eq i32 %150, 2
  %152 = zext i1 %151 to i8
  store i8 %152, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %153 = add i64 %129, 2
  %154 = add i64 %153, 23
  %155 = icmp eq i8 %145, 0
  %156 = select i1 %155, i64 %154, i64 %153
  br i1 %155, label %inst_2ce3, label %inst_2ccc

inst_2cdc:                                        ; preds = %inst_2ccc
  %157 = load i64*, i64** @RSP_2312_56234d8e7800
  %158 = load i64, i64* @RSP_2312_56234d8dffa8
  %159 = add i64 8, %158
  %160 = getelementptr i64, i64* %157, i32 1
  %161 = icmp ult i64 %159, %158
  %162 = icmp ult i64 %159, 8
  %163 = or i1 %161, %162
  %164 = zext i1 %163 to i8
  store i8 %164, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %165 = trunc i64 %159 to i32
  %166 = and i32 %165, 255
  %167 = call i32 @llvm.ctpop.i32(i32 %166) #13, !range !1234
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  store i8 %170, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %171 = xor i64 8, %158
  %172 = xor i64 %171, %159
  %173 = lshr i64 %172, 4
  %174 = trunc i64 %173 to i8
  %175 = and i8 %174, 1
  store i8 %175, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %176 = icmp eq i64 %159, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %178 = lshr i64 %159, 63
  %179 = trunc i64 %178 to i8
  store i8 %179, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %180 = lshr i64 %158, 63
  %181 = xor i64 %178, %180
  %182 = add nuw nsw i64 %181, %178
  %183 = icmp eq i64 %182, 2
  %184 = zext i1 %183 to i8
  store i8 %184, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %185 = add i64 %159, 8
  %186 = load i64, i64* %160
  store i64 %186, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %187 = add i64 %185, 8
  %188 = getelementptr i64, i64* %160, i32 1
  %189 = load i64, i64* %188
  store i64 %189, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %190 = add i64 %187, 8
  store i64 %190, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %88

inst_2d05:                                        ; preds = %inst_2ce3
  %191 = add i64 %79, 5
  %192 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %193 = add i64 %192, -8
  %194 = inttoptr i64 %193 to i64*
  store i64 %191, i64* %194
  store i64 %193, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %195 = call %struct.Memory* @sub_4920(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %65)
  %196 = load i32*, i32** @RBX_2232_56234d8ed000
  %197 = load i32, i32* %196
  %198 = zext i32 %197 to i64
  store i64 %198, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_6280, i8** @RDX_2264_56234d8e76a0
  %199 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %199, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %200 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %200, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %201 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 ptrtoint (i8* @data_2d22 to i64), i64* %203
  store i64 %202, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %204 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %195)
  br label %inst_2d22
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_28a0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_28a0:
  %0 = load i64, i64* @R12_2408_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @RBP_2328_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %7 = load i64, i64* @RBX_2232_56234d8dffa8
  %8 = add i64 %5, -8
  %9 = getelementptr i64, i64* %6, i32 -1
  store i64 %7, i64* %9
  %10 = load i32, i32* @RDI_2296_56234d8dff90
  %11 = zext i32 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %13 = add i64 -128, %8
  %14 = getelementptr i64, i64* %9, i32 -16
  store i64 %13, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %15 = load i64, i64* bitcast (i8* @data_208110 to i64*)
  store i64 %15, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %16 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %17 = add i64 %16, 40
  %18 = inttoptr i64 %17 to i64*
  %19 = load i64, i64* %18
  %20 = getelementptr i64, i64* %14, i32 15
  store i64 %19, i64* %20
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  %23 = icmp eq i8 %22, 0
  %24 = select i1 %23, i64 ptrtoint (i8* @data_28ca to i64), i64 ptrtoint (i8* @data_28f8 to i64)
  br i1 %21, label %inst_28f8, label %inst_28ca

inst_2ac0:                                        ; preds = %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit, %inst_28f8
  %25 = phi i64 [ ptrtoint (i8* @data_2ac0 to i64), %inst_28f8 ], [ %295, %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit ]
  %26 = add i64 %25, 4
  %27 = load i64, i64* @RAX_2216_56234d8dffa8
  %28 = add i64 16, %27
  store i64 %28, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %29 = add i64 %26, 3
  %30 = inttoptr i64 %28 to i64*
  %31 = load i64, i64* %30
  store i64 %31, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %32 = add i64 %29, 3
  %33 = icmp eq i64 %31, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %35 = add i64 %32, 2
  %36 = add i64 %35, 12
  %37 = icmp eq i8 %34, 0
  %38 = select i1 %37, i64 %35, i64 %36
  br i1 %33, label %inst_2ad8, label %inst_2acc

inst_2b42:                                        ; preds = %inst_2b26, %inst_2af3, %inst_2c49
  %39 = phi i64 [ undef, %inst_2c49 ], [ %331, %inst_2af3 ], [ %344, %inst_2b26 ]
  %40 = phi %struct.Memory* [ %87, %inst_2c49 ], [ %318, %inst_2af3 ], [ %339, %inst_2b26 ]
  %41 = add i64 %39, 7
  store i8* @data_6228, i8** @RSI_2280_56234d8e76a0
  %42 = add i64 %41, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %43 = add i64 %42, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %44 = add i64 %43, 5
  %45 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47
  store i64 %46, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %48 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %40)
  store i8* @data_5c50, i8** @RCX_2248_56234d8e76a0
  store i8* @data_61b8, i8** @RDX_2264_56234d8e76a0
  %49 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %49, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %50 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 ptrtoint (i8* @data_2b72 to i64), i64* %52
  store i64 %51, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %53 = call %struct.Memory* @ext_2083b8___printf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %48)
  %54 = load i64, i64* @R12_2408_56234d8dffa8
  %55 = load i64, i64* @RBX_2232_56234d8dffa8
  %56 = sub i64 %54, %55
  %57 = icmp eq i64 %56, 0
  %58 = zext i1 %57 to i8
  store i8* @data_5c70, i8** @RCX_2248_56234d8e76a0
  %59 = icmp eq i8 %58, 0
  %60 = select i1 %59, i64 ptrtoint (i8* @data_6801 to i64), i64 ptrtoint (i8* @data_5c70 to i64)
  store i64 %60, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_2b87

inst_2b87:                                        ; preds = %inst_2bff, %inst_2b42
  %61 = phi %struct.Memory* [ %251, %inst_2bff ], [ %53, %inst_2b42 ]
  store i8* @data_6248, i8** @RSI_2280_56234d8e76a0
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %62 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 add (i64 ptrtoint (i8* @data_2b87 to i64), i64 19), i64* %64
  store i64 %63, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %65 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %61)
  %66 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %66, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %67 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %67, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %68 = load i64, i64* @R12_2408_56234d8dffa8
  store i64 %68, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %69 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 ptrtoint (i8* @data_2baf to i64), i64* %71
  store i64 %70, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %72 = call %struct.Memory* @ext_2083b8___printf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %65)
  br label %inst_28f1

inst_2c49:                                        ; preds = %inst_2c42, %inst_2b26
  %73 = phi i64 [ %358, %inst_2c42 ], [ %344, %inst_2b26 ]
  %74 = phi %struct.Memory* [ %352, %inst_2c42 ], [ %339, %inst_2b26 ]
  %75 = add i64 %73, 7
  store i8* @data_61e0, i8** @RSI_2280_56234d8e76a0
  %76 = add i64 %75, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %77 = add i64 %76, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %78 = add i64 %77, 5
  %79 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81
  store i64 %80, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %82 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %74)
  store i8* @data_5c50, i8** @RDX_2264_56234d8e76a0
  %83 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %83, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %84 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 ptrtoint (i8* @data_2c72 to i64), i64* %86
  store i64 %85, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %87 = call %struct.Memory* @ext_2083b8___printf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %82)
  br label %inst_2b42

inst_28f1:                                        ; preds = %inst_28ca, %inst_2b87
  %88 = phi %struct.Memory* [ %72, %inst_2b87 ], [ %265, %inst_28ca ]
  %89 = load i32, i32* @RBP_2328_56234d8dff90
  %90 = zext i32 %89 to i64
  %91 = and i64 %90, 4294967295
  store i64 %91, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %92 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %93 = add i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64 add (i64 ptrtoint (i8* @data_28f1 to i64), i64 7), i64* %94
  store i64 %93, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %95 = call %struct.Memory* @ext_2083f0_exit(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %88)
  br label %inst_28f8

inst_2ad8:                                        ; preds = %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit, %inst_2ac0
  %96 = phi i64 [ %38, %inst_2ac0 ], [ %295, %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit ]
  %97 = add i64 %96, 4
  %98 = getelementptr i64, i64* %30, i32 1
  %99 = load i64, i64* %98
  store i64 %99, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %100 = add i64 %97, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %101 = add i64 %100, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %102 = add i64 %101, 7
  store i8* @data_5cb3, i8** @RSI_2280_56234d8e76a0
  %103 = add i64 %102, 3
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %104 = trunc i64 %99 to i32
  %105 = and i32 %104, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #13, !range !1234
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  store i8 %109, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %110 = icmp eq i64 %99, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %112 = lshr i64 %99, 63
  %113 = trunc i64 %112 to i8
  store i8 %113, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %114 = add i64 %103, 6
  %115 = add i64 %114, 193
  %116 = icmp eq i8 %111, 0
  %117 = select i1 %116, i64 %114, i64 %115
  %118 = add i64 %117, 5
  %119 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %120 = add i64 %119, -8
  %121 = inttoptr i64 %120 to i64*
  store i64 %118, i64* %121
  store i64 %120, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %122 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %218)
  store i8* @data_61b8, i8** @RCX_2248_56234d8e76a0
  store i8* @data_5cca, i8** @RDX_2264_56234d8e76a0
  %123 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %123, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %124 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  br i1 %110, label %inst_2bb4, label %inst_2af3

inst_28f8:                                        ; preds = %inst_28f1, %inst_28a0
  %127 = phi i64 [ %24, %inst_28a0 ], [ ptrtoint (i8* @data_28f8 to i64), %inst_28f1 ]
  %128 = phi %struct.Memory* [ %memory, %inst_28a0 ], [ %95, %inst_28f1 ]
  %129 = add i64 %127, 7
  store i8* @data_5e08, i8** @RSI_2280_56234d8e76a0
  %130 = add i64 %129, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %131 = add i64 %130, 5
  %132 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %133 = add i64 %132, -8
  %134 = inttoptr i64 %133 to i64*
  store i64 %131, i64* %134
  store i64 %133, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %135 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %128)
  %136 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %136, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %137 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %137, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %138 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 ptrtoint (i8* @data_2918 to i64), i64* %140
  store i64 %139, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %141 = call %struct.Memory* @ext_2083b8___printf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %135)
  %142 = load i64, i64* @stdout
  store i64 %142, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_5e30, i8** @RSI_2280_56234d8e76a0
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %143 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %144 = add i64 %143, -8
  %145 = inttoptr i64 %144 to i64*
  store i64 ptrtoint (i8* @data_2932 to i64), i64* %145
  store i64 %144, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %146 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %141)
  %147 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %147, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %148 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %148, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %149 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %150 = add i64 %149, -8
  %151 = inttoptr i64 %150 to i64*
  store i64 ptrtoint (i8* @data_293d to i64), i64* %151
  store i64 %150, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %152 = call %struct.Memory* @ext_208348_fputs_unlocked(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %146)
  %153 = load i64, i64* @stdout
  store i64 %153, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_5e60, i8** @RSI_2280_56234d8e76a0
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %154 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 ptrtoint (i8* @data_2957 to i64), i64* %156
  store i64 %155, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %157 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %152)
  %158 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %158, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %159 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %159, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %160 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %161 = add i64 %160, -8
  %162 = inttoptr i64 %161 to i64*
  store i64 ptrtoint (i8* @data_2962 to i64), i64* %162
  store i64 %161, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %163 = call %struct.Memory* @ext_208348_fputs_unlocked(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %157)
  %164 = load i64, i64* @stdout
  store i64 %164, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_5e98, i8** @RSI_2280_56234d8e76a0
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %165 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %166 = add i64 %165, -8
  %167 = inttoptr i64 %166 to i64*
  store i64 ptrtoint (i8* @data_297c to i64), i64* %167
  store i64 %166, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %168 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %163)
  %169 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %169, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %170 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %170, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %171 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %172 = add i64 %171, -8
  %173 = inttoptr i64 %172 to i64*
  store i64 ptrtoint (i8* @data_2987 to i64), i64* %173
  store i64 %172, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %174 = call %struct.Memory* @ext_208348_fputs_unlocked(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %168)
  %175 = load i64, i64* @stdout
  store i64 %175, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_5fe8, i8** @RSI_2280_56234d8e76a0
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %176 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %177 = add i64 %176, -8
  %178 = inttoptr i64 %177 to i64*
  store i64 ptrtoint (i8* @data_29a1 to i64), i64* %178
  store i64 %177, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %179 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %174)
  %180 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %180, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %181 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %181, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %182 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %183 = add i64 %182, -8
  %184 = inttoptr i64 %183 to i64*
  store i64 ptrtoint (i8* @data_29ac to i64), i64* %184
  store i64 %183, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %185 = call %struct.Memory* @ext_208348_fputs_unlocked(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %179)
  %186 = load i64, i64* @stdout
  store i64 %186, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_60c0, i8** @RSI_2280_56234d8e76a0
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %187 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %188 = add i64 %187, -8
  %189 = inttoptr i64 %188 to i64*
  store i64 ptrtoint (i8* @data_29c6 to i64), i64* %189
  store i64 %188, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %190 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %185)
  %191 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %191, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %192 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %192, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %193 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %194 = add i64 %193, -8
  %195 = inttoptr i64 %194 to i64*
  store i64 ptrtoint (i8* @data_29d1 to i64), i64* %195
  store i64 %194, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %196 = call %struct.Memory* @ext_208348_fputs_unlocked(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %190)
  %197 = load i64, i64* @stdout
  store i64 %197, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_60f0, i8** @RSI_2280_56234d8e76a0
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %198 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %199 = add i64 %198, -8
  %200 = inttoptr i64 %199 to i64*
  store i64 ptrtoint (i8* @data_29eb to i64), i64* %200
  store i64 %199, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %201 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %196)
  %202 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %202, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %203 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %203, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %204 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %205 = add i64 %204, -8
  %206 = inttoptr i64 %205 to i64*
  store i64 ptrtoint (i8* @data_29f6 to i64), i64* %206
  store i64 %205, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %207 = call %struct.Memory* @ext_208348_fputs_unlocked(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %201)
  %208 = load i64, i64* bitcast (i8* @data_208110 to i64*)
  store i64 %208, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_6128, i8** @RSI_2280_56234d8e76a0
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %209 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %210 = add i64 %209, -8
  %211 = inttoptr i64 %210 to i64*
  store i64 ptrtoint (i8* @data_2a10 to i64), i64* %211
  store i64 %210, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %212 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %207)
  %213 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %213, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 %213, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %214 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %214, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i8* @data_5c9f, i8** @RBX_2232_56234d8e76a0
  %215 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %216 = add i64 %215, -8
  %217 = inttoptr i64 %216 to i64*
  store i64 ptrtoint (i8* @data_2a2c to i64), i64* %217
  store i64 %216, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %218 = call %struct.Memory* @ext_2083b8___printf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %212)
  store i8* @data_5c95, i8** @RCX_2248_56234d8e76a0
  %219 = load i64*, i64** @RSP_2312_56234d8e7800
  %220 = load i64, i64* @RSP_2312_56234d8dffa8
  %221 = load i64, i64* @RBX_2232_56234d8dffa8
  %222 = getelementptr i64, i64* %219, i32 8
  store i64 %221, i64* %222
  store i8* @data_5c50, i8** @RBX_2232_56234d8e76a0
  %223 = getelementptr i64, i64* %219, i32 12
  store i64 0, i64* %223
  store i64 ptrtoint (i8* @data_5c54 to i64), i64* %219
  %224 = getelementptr i64, i64* %219, i32 6
  store i64 ptrtoint (i8* @data_5c95 to i64), i64* %224
  %225 = getelementptr i64, i64* %219, i32 10
  store i64 ptrtoint (i8* @data_5ca9 to i64), i64* %225
  %226 = getelementptr i64, i64* %219, i32 13
  store i64 0, i64* %226
  %227 = getelementptr i64, i64* %219, i32 1
  store i64 ptrtoint (i8* @data_5c56 to i64), i64* %227
  %228 = getelementptr i64, i64* %219, i32 2
  store i64 ptrtoint (i8* @data_5cce to i64), i64* %228
  %229 = getelementptr i64, i64* %219, i32 3
  store i64 ptrtoint (i8* @data_5c66 to i64), i64* %229
  %230 = getelementptr i64, i64* %219, i32 4
  store i64 ptrtoint (i8* @data_5c7c to i64), i64* %230
  %231 = getelementptr i64, i64* %219, i32 5
  store i64 ptrtoint (i8* @data_5c86 to i64), i64* %231
  %232 = getelementptr i64, i64* %219, i32 7
  store i64 ptrtoint (i8* @data_5c86 to i64), i64* %232
  %233 = getelementptr i64, i64* %219, i32 9
  store i64 ptrtoint (i8* @data_5c86 to i64), i64* %233
  %234 = getelementptr i64, i64* %219, i32 11
  store i64 ptrtoint (i8* @data_5c86 to i64), i64* %234
  store i64 %220, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_2ac0

inst_2bff:                                        ; preds = %inst_2be7, %inst_2bb4
  %235 = phi i64 [ %313, %inst_2bb4 ], [ %357, %inst_2be7 ]
  %236 = phi %struct.Memory* [ %300, %inst_2bb4 ], [ %352, %inst_2be7 ]
  %237 = add i64 %235, 7
  store i8* @data_6228, i8** @RSI_2280_56234d8e76a0
  %238 = add i64 %237, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %239 = add i64 %238, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %240 = add i64 %239, 7
  store i8* @data_5c50, i8** @R12_2408_56234d8e76a0
  %241 = add i64 %240, 7
  store i8* @data_5c70, i8** @RBX_2232_56234d8e76a0
  %242 = add i64 %241, 5
  %243 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %244 = add i64 %243, -8
  %245 = inttoptr i64 %244 to i64*
  store i64 %242, i64* %245
  store i64 %244, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %246 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %236)
  store i8* @data_5c50, i8** @RCX_2248_56234d8e76a0
  store i8* @data_61b8, i8** @RDX_2264_56234d8e76a0
  %247 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %247, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %248 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %249 = add i64 %248, -8
  %250 = inttoptr i64 %249 to i64*
  store i64 ptrtoint (i8* @data_2c3d to i64), i64* %250
  store i64 %249, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %251 = call %struct.Memory* @ext_2083b8___printf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %246)
  br label %inst_2b87

inst_28ca:                                        ; preds = %inst_28a0
  %252 = add i64 %24, 7
  store i8* @data_5de0, i8** @RSI_2280_56234d8e76a0
  %253 = add i64 %252, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %254 = add i64 %253, 5
  %255 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %256 = add i64 %255, -8
  %257 = inttoptr i64 %256 to i64*
  store i64 %254, i64* %257
  store i64 %256, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %258 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %259 = load i64, i64* @stderr
  store i64 %259, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %260 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %260, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %261 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %261, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %262 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %263 = add i64 %262, -8
  %264 = inttoptr i64 %263 to i64*
  store i64 ptrtoint (i8* @data_28f1 to i64), i64* %264
  store i64 %263, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %265 = call %struct.Memory* @ext_208400___fprintf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %258)
  br label %inst_28f1

inst_2acc:                                        ; preds = %inst_2ac0
  store i64 4, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_5c50, i8** @RSI_2280_56234d8e76a0
  %266 = load i8, i8* @DF_2075_56234d8dff60, align 1, !tbaa !1243
  %267 = icmp eq i8 %266, 0
  %268 = select i1 %267, i64 1, i64 -1
  %269 = load i64, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1240
  %270 = load i8*, i8** @RDI_2296_56234d8e76a0
  br label %271

271:                                              ; preds = %271, %inst_2acc
  %272 = phi i8* [ %286, %271 ], [ %270, %inst_2acc ]
  %273 = phi i64 [ %282, %271 ], [ %31, %inst_2acc ]
  %274 = phi i8* [ %287, %271 ], [ @data_5c50, %inst_2acc ]
  %275 = phi i64 [ %281, %271 ], [ %269, %inst_2acc ]
  %276 = phi i64 [ %283, %271 ], [ 4, %inst_2acc ]
  %277 = load i8, i8* %274
  %278 = load i8, i8* %272
  %279 = sub i8 %277, %278
  %280 = icmp eq i8 %279, 0
  %281 = add i64 %268, %275
  %282 = add i64 %268, %273
  %283 = add i64 %276, -1
  %284 = icmp ne i64 %283, 0
  %285 = and i1 %284, %280
  %286 = inttoptr i64 %282 to i8*
  %287 = inttoptr i64 %281 to i8*
  br i1 %285, label %271, label %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit

_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit: ; preds = %271
  %288 = zext i1 %280 to i8
  store i8 %288, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i64 %283, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %289 = add i64 %38, 5
  %290 = add i64 %289, 3
  %291 = add i64 %290, 2
  %292 = add i64 %291, 2
  %293 = sub i64 %292, 24
  %294 = icmp eq i8 %288, 0
  %295 = select i1 %294, i64 %293, i64 %292
  br i1 %294, label %inst_2ac0, label %inst_2ad8

inst_2bb4:                                        ; preds = %inst_2ad8
  store i64 ptrtoint (i8* @data_2bd6 to i64), i64* %126
  store i64 %125, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %296 = call %struct.Memory* @ext_2083b8___printf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %122)
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 5, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %297 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %298 = add i64 %297, -8
  %299 = inttoptr i64 %298 to i64*
  store i64 ptrtoint (i8* @data_2be2 to i64), i64* %299
  store i64 %298, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %300 = call %struct.Memory* @ext_2083b0_setlocale(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %296)
  %301 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %302 = trunc i64 %301 to i32
  %303 = and i32 %302, 255
  %304 = call i32 @llvm.ctpop.i32(i32 %303) #13, !range !1234
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %308 = icmp eq i64 %301, 0
  %309 = zext i1 %308 to i8
  store i8 %309, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %310 = lshr i64 %301, 63
  %311 = trunc i64 %310 to i8
  store i8 %311, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %312 = icmp eq i8 %309, 0
  %313 = select i1 %312, i64 ptrtoint (i8* @data_2be7 to i64), i64 ptrtoint (i8* @data_2bff to i64)
  br i1 %308, label %inst_2bff, label %inst_2be7

inst_2af3:                                        ; preds = %inst_2ad8
  store i64 ptrtoint (i8* @data_2b15 to i64), i64* %126
  store i64 %125, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %314 = call %struct.Memory* @ext_2083b8___printf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %122)
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 5, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %315 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %316 = add i64 %315, -8
  %317 = inttoptr i64 %316 to i64*
  store i64 ptrtoint (i8* @data_2b21 to i64), i64* %317
  store i64 %316, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %318 = call %struct.Memory* @ext_2083b0_setlocale(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %314)
  %319 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %320 = trunc i64 %319 to i32
  %321 = and i32 %320, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #13, !range !1234
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  store i8 %325, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %326 = icmp eq i64 %319, 0
  %327 = zext i1 %326 to i8
  store i8 %327, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %328 = lshr i64 %319, 63
  %329 = trunc i64 %328 to i8
  store i8 %329, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %330 = icmp eq i8 %327, 0
  %331 = select i1 %330, i64 ptrtoint (i8* @data_2b26 to i64), i64 ptrtoint (i8* @data_2b42 to i64)
  br i1 %326, label %inst_2b42, label %inst_2b26

inst_2b26:                                        ; preds = %inst_2af3
  %332 = add i64 %331, 7
  store i8* @data_5cd8, i8** @RSI_2280_56234d8e76a0
  %333 = add i64 %332, 5
  store i64 3, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %334 = add i64 %333, 3
  store i64 %319, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %335 = add i64 %334, 5
  %336 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %335, i64* %338
  store i64 %337, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %339 = call %struct.Memory* @ext_208288_strncmp(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %318)
  %340 = load i32, i32* @RAX_2216_56234d8dff90
  %341 = icmp eq i32 %340, 0
  %342 = zext i1 %341 to i8
  %343 = icmp eq i8 %342, 0
  %344 = select i1 %343, i64 ptrtoint (i8* @data_2c49 to i64), i64 ptrtoint (i8* @data_2b42 to i64)
  br i1 %343, label %inst_2c49, label %inst_2b42

inst_2be7:                                        ; preds = %inst_2bb4
  %345 = add i64 %313, 7
  store i8* @data_5cd8, i8** @RSI_2280_56234d8e76a0
  %346 = add i64 %345, 5
  store i64 3, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %347 = add i64 %346, 3
  store i64 %301, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %348 = add i64 %347, 5
  %349 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %350 = add i64 %349, -8
  %351 = inttoptr i64 %350 to i64*
  store i64 %348, i64* %351
  store i64 %350, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %352 = call %struct.Memory* @ext_208288_strncmp(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %300)
  %353 = load i32, i32* @RAX_2216_56234d8dff90
  %354 = icmp eq i32 %353, 0
  %355 = zext i1 %354 to i8
  %356 = icmp eq i8 %355, 0
  %357 = select i1 %356, i64 ptrtoint (i8* @data_2c42 to i64), i64 ptrtoint (i8* @data_2bff to i64)
  br i1 %356, label %inst_2c42, label %inst_2bff

inst_2c42:                                        ; preds = %inst_2be7
  %358 = add i64 %357, 7
  store i8* @data_5c50, i8** @R12_2408_56234d8e76a0
  br label %inst_2c49
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_53c0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_53c0:
  %0 = load i64, i64* @RBX_2232_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 %4, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 ptrtoint (i8* @data_53c9 to i64), i64* %6
  store i64 %5, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %7 = call %struct.Memory* @sub_5210(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %8 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %8, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %9 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %9, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %10 = load i64*, i64** @RSP_2312_56234d8e7800
  %11 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %12 = add i64 %11, 8
  store i64 %12, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %13 = load i64, i64* %10
  store i64 %13, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %14 = call %struct.Memory* @ext_18a0_memset(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %7)
  ret %struct.Memory* %14
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_1b00_main(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_1b00:
  %0 = load i64, i64* @R15_2456_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @R14_2440_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %7, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %8 = load i64, i64* @R13_2424_56234d8dffa8
  %9 = add i64 %5, -8
  %10 = getelementptr i64, i64* %6, i32 -1
  store i64 %8, i64* %10
  %11 = load i64, i64* @R12_2408_56234d8dffa8
  %12 = add i64 %9, -8
  %13 = getelementptr i64, i64* %10, i32 -1
  store i64 %11, i64* %13
  store i64 0, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %14 = load i64, i64* @RBP_2328_56234d8dffa8
  %15 = add i64 %12, -8
  %16 = getelementptr i64, i64* %13, i32 -1
  store i64 %14, i64* %16
  %17 = load i64, i64* @RBX_2232_56234d8dffa8
  %18 = add i64 %15, -8
  %19 = getelementptr i64, i64* %16, i32 -1
  store i64 %17, i64* %19
  %20 = sub i64 %18, 344
  %21 = inttoptr i64 %20 to i64*
  %22 = inttoptr i64 %20 to i32*
  %23 = getelementptr i64, i64* %21, i32 9
  store i64 %7, i64* %23
  %24 = load i32, i32* @RDI_2296_56234d8dff90
  %25 = getelementptr i32, i32* %22, i32 20
  store i32 %24, i32* %25
  %26 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %27 = add i64 %26, 40
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28
  %30 = getelementptr i64, i64* %21, i32 41
  store i64 %29, i64* %30
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %31 = add i64 %20, -8
  %32 = getelementptr i64, i64* %21, i32 -1
  store i64 ptrtoint (i8* @data_1b38 to i64), i64* %32
  store i64 %31, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %33 = call %struct.Memory* @ext_2083e8_getpagesize(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %34 = load i64*, i64** @R14_2440_56234d8e7800
  %35 = load i64, i64* %34
  store i64 %35, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %36 = load i32, i32* @RAX_2216_56234d8dff90
  %37 = zext i32 %36 to i64
  %38 = and i64 %37, 4294967295
  store i64 %38, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %39 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 ptrtoint (i8* @data_1b42 to i64), i64* %41
  store i64 %40, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %42 = call %struct.Memory* @sub_2e10(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %33)
  store i8* @data_6801, i8** @RSI_2280_56234d8e76a0
  store i64 6, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %43 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 ptrtoint (i8* @data_1b53 to i64), i64* %45
  store i64 %44, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %46 = call %struct.Memory* @ext_2083b0_setlocale(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %42)
  store i8* @data_5cdc, i8** @RSI_2280_56234d8e76a0
  store i8* @data_5cce, i8** @RDI_2296_56234d8e76a0
  %47 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 ptrtoint (i8* @data_1b66 to i64), i64* %49
  store i64 %48, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %50 = call %struct.Memory* @ext_2082b8_bindtextdomain(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %46)
  store i8* @data_5cce, i8** @RDI_2296_56234d8e76a0
  %51 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %52 = add i64 %51, -8
  %53 = inttoptr i64 %52 to i64*
  store i64 ptrtoint (i8* @data_1b72 to i64), i64* %53
  store i64 %52, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %54 = call %struct.Memory* @ext_2082a8_textdomain(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %50)
  store void ()* @callback_sub_2ca0, void ()** @RDI_2296_56234d8ed260
  %55 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 ptrtoint (i8* @data_1b7e to i64), i64* %57
  store i64 %56, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %58 = call %struct.Memory* @sub_5c00(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %54)
  %59 = load i8*, i8** @RSP_2312_56234d8e76a0
  %60 = getelementptr i8, i8* %59, i32 54
  store i8 0, i8* %60
  %61 = getelementptr i8, i8* %59, i32 85
  store i8 0, i8* %61
  %62 = getelementptr i8, i8* %59, i32 86
  store i8 0, i8* %62
  %63 = getelementptr i8, i8* %59, i32 141
  store i8 0, i8* %63
  %64 = getelementptr i8, i8* %59, i32 55
  store i8 0, i8* %64
  br label %inst_1ba0

inst_1c1b:                                        ; preds = %inst_1c15, %inst_1c2a
  %65 = load i64, i64* @RSP_2312_56234d8dffa8
  %66 = add i64 %65, 54
  %67 = inttoptr i64 %66 to i8*
  store i8 1, i8* %67
  br label %inst_1c20

inst_201d:                                        ; preds = %inst_2015, %inst_1fbf
  %68 = load i8, i8* @RBP_2328_56234d8dff60
  %69 = sub i8 %68, 31
  %70 = icmp ult i8 %68, 31
  %71 = zext i1 %70 to i8
  %72 = icmp eq i8 %69, 0
  %73 = zext i1 %72 to i8
  %74 = or i8 %73, %71
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %inst_2008, label %inst_2023

inst_1c20:                                        ; preds = %inst_1bff, %inst_1c1b
  %76 = load i64, i64* @RSP_2312_56234d8dffa8
  %77 = add i64 %76, 85
  %78 = inttoptr i64 %77 to i8*
  store i8 1, i8* %78
  br label %inst_1ba0

inst_1e37:                                        ; preds = %inst_2429, %inst_2413, %inst_23fd, %inst_1dec
  %79 = phi i64 [ %1581, %inst_23fd ], [ %2294, %inst_2413 ], [ %2321, %inst_2429 ], [ %1567, %inst_1dec ]
  %80 = phi %struct.Memory* [ %1558, %inst_23fd ], [ %1558, %inst_2413 ], [ %2304, %inst_2429 ], [ %1558, %inst_1dec ]
  %81 = add i64 %79, 8
  %82 = load i8*, i8** @RSP_2312_56234d8e76a0
  %83 = bitcast i8* %82 to i64*
  %84 = getelementptr i8, i8* %82, i32 143
  %85 = load i8, i8* %84
  %86 = icmp eq i8 %85, 0
  %87 = zext i1 %86 to i8
  %88 = add i64 %81, 5
  %89 = getelementptr i64, i64* %83, i32 13
  %90 = load i64, i64* %89
  store i64 %90, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %91 = add i64 %88, 4
  %92 = sub i64 %90, 1
  store i64 %92, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %93 = add i64 %91, 2
  %94 = add i64 %93, 20
  %95 = icmp eq i8 %87, 0
  %96 = select i1 %95, i64 %94, i64 %93
  br i1 %95, label %inst_1e5e, label %inst_1e4a

inst_1c38:                                        ; preds = %inst_1c2f, %inst_1c99
  %97 = phi %struct.Memory* [ %299, %inst_1c99 ], [ %1033, %inst_1c2f ]
  %98 = load i64, i64* @RSP_2312_56234d8dffa8
  %99 = add i64 %98, 55
  %100 = inttoptr i64 %99 to i8*
  store i8 1, i8* %100
  br label %inst_1ba0

inst_2241:                                        ; preds = %inst_24ed, %inst_24cd, %inst_2223
  %101 = phi i64 [ %1668, %inst_2223 ], [ undef, %inst_24cd ], [ undef, %inst_24ed ]
  %102 = phi %struct.Memory* [ %1639, %inst_2223 ], [ %2199, %inst_24cd ], [ %2254, %inst_24ed ]
  %103 = add i64 %101, 5
  %104 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %105 = add i64 %104, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 %103, i64* %106
  store i64 %105, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %107 = call %struct.Memory* @sub_1ad0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %102)
  br label %inst_2250

inst_2250:                                        ; preds = %inst_21e0, %inst_2241
  %108 = phi i64 [ %1630, %inst_21e0 ], [ ptrtoint (i8* @data_2250 to i64), %inst_2241 ]
  %109 = phi %struct.Memory* [ %1618, %inst_21e0 ], [ %107, %inst_2241 ]
  %110 = add i64 %108, 5
  %111 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %112 = add i64 %111, -8
  %113 = inttoptr i64 %112 to i64*
  store i64 %110, i64* %113
  store i64 %112, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %114 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %109)
  %115 = load i32*, i32** @RAX_2216_56234d8ed000
  %116 = load i64, i64* @RAX_2216_56234d8dffa8
  %117 = load i32, i32* %115
  %118 = zext i32 %117 to i64
  store i64 %118, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %119 = sub i32 %117, 95
  %120 = icmp eq i32 %119, 0
  %121 = zext i1 %120 to i8
  store i8 %121, i8* @R10_2376_56234d8dff60, align 1, !tbaa !1240
  %122 = sub i32 %117, 38
  %123 = icmp ult i32 %117, 38
  %124 = zext i1 %123 to i8
  %125 = icmp eq i32 %122, 0
  %126 = zext i1 %125 to i8
  %127 = or i8 %126, %124
  %128 = icmp eq i8 %127, 0
  %129 = select i1 %128, i64 ptrtoint (i8* @data_2276 to i64), i64 ptrtoint (i8* @data_2263 to i64)
  br i1 %128, label %inst_2276, label %inst_2263

inst_1e5e:                                        ; preds = %inst_1e4a, %inst_1e37
  %130 = phi i64 [ %96, %inst_1e37 ], [ %1603, %inst_1e4a ]
  %131 = add i64 %130, 5
  store i64 %90, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %132 = add i64 %131, 5
  %133 = getelementptr i64, i64* %83, i32 7
  %134 = load i64, i64* %133
  store i64 %134, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %135 = add i64 %132, 3
  %136 = add i64 %135, 3
  %137 = add i64 %134, %90
  store i64 %137, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %138 = icmp ult i64 %137, %90
  %139 = icmp ult i64 %137, %134
  %140 = or i1 %138, %139
  %141 = zext i1 %140 to i8
  store i8 %141, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %142 = trunc i64 %137 to i32
  %143 = and i32 %142, 255
  %144 = call i32 @llvm.ctpop.i32(i32 %143) #13, !range !1234
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  store i8 %147, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %148 = xor i64 %134, %90
  %149 = xor i64 %148, %137
  %150 = lshr i64 %149, 4
  %151 = trunc i64 %150 to i8
  %152 = and i8 %151, 1
  store i8 %152, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %153 = icmp eq i64 %137, 0
  %154 = zext i1 %153 to i8
  store i8 %154, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %155 = lshr i64 %137, 63
  %156 = trunc i64 %155 to i8
  store i8 %156, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %157 = lshr i64 %90, 63
  %158 = lshr i64 %134, 63
  %159 = xor i64 %155, %157
  %160 = xor i64 %155, %158
  %161 = add nuw nsw i64 %159, %160
  %162 = icmp eq i64 %161, 2
  %163 = zext i1 %162 to i8
  store i8 %163, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %164 = add i64 %136, 5
  %165 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %166 = add i64 %165, -8
  %167 = inttoptr i64 %166 to i64*
  store i64 %164, i64* %167
  store i64 %166, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %168 = call %struct.Memory* @sub_5210(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %80)
  %169 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %169, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %170 = load i64*, i64** @RSP_2312_56234d8e7800
  %171 = load i64, i64* @RSP_2312_56234d8dffa8
  %172 = getelementptr i64, i64* %170, i32 14
  store i64 %169, i64* %172
  %173 = load i64, i64* @RBX_2232_56234d8dffa8
  %174 = load i64, i64* @R15_2456_56234d8dffa8
  %175 = add i64 %173, 18
  %176 = add i64 %175, %174
  store i64 %176, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %177 = load i64, i64* @RBP_2328_56234d8dffa8
  %178 = mul i64 %177, 4
  %179 = add i64 %178, %176
  store i64 %179, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %180 = add i64 %171, -8
  %181 = getelementptr i64, i64* %170, i32 -1
  store i64 ptrtoint (i8* @data_1e89 to i64), i64* %181
  store i64 %180, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %182 = call %struct.Memory* @sub_5210(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %168)
  %183 = load i64, i64* @RAX_2216_56234d8dffa8
  %184 = load i32*, i32** @RSP_2312_56234d8ed000
  %185 = load i8*, i8** @RSP_2312_56234d8e76a0
  %186 = load i64, i64* @RSP_2312_56234d8dffa8
  %187 = bitcast i8* %185 to i64*
  %188 = getelementptr i64, i64* %187, i32 15
  store i64 %183, i64* %188
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %189 = load i64, i64* @R14_2440_56234d8dffa8
  %190 = add i64 %189, %183
  store i64 %190, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %191 = lshr i64 %189, 63
  %192 = load i64, i64* @R13_2424_56234d8dffa8
  %193 = add i64 %192, %189
  store i64 %193, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %194 = icmp ult i64 %193, %189
  %195 = icmp ult i64 %193, %192
  %196 = or i1 %194, %195
  %197 = zext i1 %196 to i8
  store i8 %197, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %198 = trunc i64 %193 to i32
  %199 = and i32 %198, 255
  %200 = call i32 @llvm.ctpop.i32(i32 %199) #13, !range !1234
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = xor i8 %202, 1
  store i8 %203, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %204 = xor i64 %192, %189
  %205 = xor i64 %204, %193
  %206 = lshr i64 %205, 4
  %207 = trunc i64 %206 to i8
  %208 = and i8 %207, 1
  store i8 %208, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %209 = icmp eq i64 %193, 0
  %210 = zext i1 %209 to i8
  store i8 %210, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %211 = lshr i64 %193, 63
  %212 = trunc i64 %211 to i8
  store i8 %212, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %213 = lshr i64 %192, 63
  %214 = xor i64 %211, %191
  %215 = xor i64 %211, %213
  %216 = add nuw nsw i64 %214, %215
  %217 = icmp eq i64 %216, 2
  %218 = zext i1 %217 to i8
  store i8 %218, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %219 = load i32, i32* bitcast (i8* @data_2080f0 to i32*)
  %220 = zext i32 %219 to i64
  store i64 %220, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 %190, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %221 = load i32, i32* @R12_2408_56234d8dff90
  %222 = zext i32 %221 to i64
  %223 = and i64 %222, 4294967295
  store i64 %223, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %224 = load i64, i64* @RBX_2232_56234d8dffa8
  store i8* @data_1ead, i8** @RIP_2472_56234d8e76a0
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %227

226:                                              ; preds = %inst_1e5e
  call void @abort() #13
  unreachable

227:                                              ; preds = %inst_1e5e
  %228 = zext i64 %224 to i128
  %229 = zext i64 %190 to i128
  %230 = udiv i128 %229, %228
  %231 = icmp ult i128 %230, 18446744073709551616
  br i1 %231, label %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit, label %232

232:                                              ; preds = %227
  call void @abort() #13
  unreachable

_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit: ; preds = %227
  %233 = mul i128 %230, %228
  %234 = sub i128 %229, %233
  %235 = trunc i128 %234 to i64
  store i64 %193, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %236 = load i32, i32* @R13_2424_56234d8dff90
  %237 = zext i32 %236 to i64
  %238 = xor i64 1, %237
  %239 = and i64 %238, 4294967295
  store i64 %239, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %240 = sub i64 %190, %235
  store i64 %240, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i8* @data_1ec0, i8** @RIP_2472_56234d8e76a0
  %241 = zext i64 %193 to i128
  %242 = udiv i128 %241, %228
  %243 = icmp ult i128 %242, 18446744073709551616
  br i1 %243, label %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit16, label %244

244:                                              ; preds = %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit
  call void @abort() #13
  unreachable

_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit16: ; preds = %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit
  %245 = getelementptr i8, i8* %185, i32 84
  store i8 1, i8* %245
  %246 = load i32, i32* @RSI_2280_56234d8dff90
  %247 = getelementptr i32, i32* %184, i32 1
  store i32 %246, i32* %247
  %248 = mul i128 %242, %228
  %249 = sub i128 %241, %248
  %250 = trunc i128 %249 to i64
  %251 = load i64, i64* @R15_2456_56234d8dffa8
  %252 = add i64 %251, %240
  store i64 %252, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 %251, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %253 = getelementptr i64, i64* %187, i32 4
  store i64 %240, i64* %253
  store i64 %240, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %254 = getelementptr i64, i64* %187, i32 2
  store i64 %252, i64* %254
  %255 = sub i64 %193, %250
  %256 = add i64 %255, 1
  store i64 %256, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %257 = getelementptr i64, i64* %187, i32 3
  store i64 %255, i64* %257
  %258 = getelementptr i64, i64* %187, i32 1
  store i64 %255, i64* %258
  %259 = getelementptr i8, i8* %185, i32 141
  %260 = load i8, i8* %259
  %261 = zext i8 %260 to i64
  %262 = getelementptr i64, i64* %187, i32 8
  store i64 %256, i64* %262
  %263 = trunc i64 %261 to i32
  %264 = zext i32 %263 to i64
  %265 = xor i64 1, %264
  %266 = and i64 %265, 4294967295
  %267 = trunc i64 %266 to i8
  %268 = getelementptr i8, i8* %185, i32 87
  store i8 %267, i8* %268
  %269 = add i64 %186, 172
  store i64 %269, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %270 = getelementptr i64, i64* %187, i32 12
  store i64 %269, i64* %270
  br label %inst_1f10

inst_2070:                                        ; preds = %inst_2029, %inst_2023
  %271 = sub i8 %68, 10
  %272 = icmp eq i8 %271, 0
  br i1 %272, label %inst_20c0, label %inst_2076

inst_2276:                                        ; preds = %_ZN12_GLOBAL__N_13SHRI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit, %inst_2250
  %273 = phi i64 [ %129, %inst_2250 ], [ %2066, %_ZN12_GLOBAL__N_13SHRI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit ]
  %274 = load i8, i8* @R10_2376_56234d8dff60
  %275 = zext i8 %274 to i64
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %276 = trunc i64 %275 to i32
  %277 = and i32 %276, 255
  %278 = call i32 @llvm.ctpop.i32(i32 %277) #13, !range !1234
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  %281 = xor i8 %280, 1
  store i8 %281, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %282 = icmp eq i8 %274, 0
  %283 = zext i1 %282 to i8
  store i8 %283, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %284 = lshr i8 %274, 7
  store i8 %284, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br i1 %282, label %inst_262f, label %inst_227f

inst_1fbf:                                        ; preds = %inst_1fa8, %inst_1fa1, %inst_1f99
  %285 = phi i64 [ %1793, %inst_1f99 ], [ %1809, %inst_1fa1 ], [ ptrtoint (i8* @data_1fbf to i64), %inst_1fa8 ]
  %286 = phi %struct.Memory* [ %904, %inst_1f99 ], [ %904, %inst_1fa1 ], [ %1820, %inst_1fa8 ]
  %287 = add i64 %285, 5
  %288 = load i8*, i8** @RSP_2312_56234d8e76a0
  %289 = load i32*, i32** @RSP_2312_56234d8ed000
  %290 = load i64*, i64** @RSP_2312_56234d8e7800
  %291 = getelementptr i8, i8* %288, i32 54
  %292 = load i8, i8* %291
  %293 = icmp eq i8 %292, 0
  %294 = zext i1 %293 to i8
  %295 = add i64 %287, 2
  %296 = add i64 %295, 37
  %297 = icmp eq i8 %294, 0
  %298 = select i1 %297, i64 %295, i64 %296
  br i1 %293, label %inst_1feb, label %inst_201d

inst_1c99:                                        ; preds = %inst_1c5b, %inst_1bc8
  %299 = phi %struct.Memory* [ %1033, %inst_1bc8 ], [ %1386, %inst_1c5b ]
  %300 = load i64, i64* @RSP_2312_56234d8dffa8
  %301 = add i64 %300, 141
  %302 = inttoptr i64 %301 to i8*
  store i8 1, i8* %302
  br label %inst_1c38

inst_269d:                                        ; preds = %inst_2696, %inst_257f
  %303 = phi i64 [ %2407, %inst_257f ], [ ptrtoint (i8* @data_269d to i64), %inst_2696 ]
  %304 = phi %struct.Memory* [ %2378, %inst_257f ], [ %2445, %inst_2696 ]
  %305 = add i64 %303, 7
  store i8* @data_5c44, i8** @RSI_2280_56234d8e76a0
  %306 = add i64 %305, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %307 = add i64 %306, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %308 = add i64 %307, 5
  %309 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %310 = add i64 %309, -8
  %311 = inttoptr i64 %310 to i64*
  store i64 %308, i64* %311
  store i64 %310, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %312 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %304)
  %313 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %313, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %314 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %315 = add i64 %314, -8
  %316 = inttoptr i64 %315 to i64*
  store i64 ptrtoint (i8* @data_26b8 to i64), i64* %316
  store i64 %315, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %317 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %312)
  %318 = load i32*, i32** @RAX_2216_56234d8ed000
  %319 = load i32, i32* %318
  %320 = zext i32 %319 to i64
  store i64 %320, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %321 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %321, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %322 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %323 = add i64 %322, -8
  %324 = inttoptr i64 %323 to i64*
  store i64 ptrtoint (i8* @data_26c9 to i64), i64* %324
  store i64 %323, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %325 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %317)
  br label %inst_26c9

inst_22a5:                                        ; preds = %inst_23bf, %inst_2289
  %326 = phi i64 [ %1496, %inst_2289 ], [ undef, %inst_23bf ]
  %327 = phi %struct.Memory* [ %1482, %inst_2289 ], [ %2236, %inst_23bf ]
  %328 = add i64 %326, 7
  %329 = load i64, i64* bitcast (i8* @data_2080f8 to i64*)
  store i64 %329, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %330 = add i64 %328, 5
  store i64 3, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %331 = add i64 %330, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %332 = add i64 %331, 5
  %333 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335
  store i64 %334, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %336 = call %struct.Memory* @sub_4950(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %327)
  %337 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %337, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %338 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %339 = add i64 %338, -8
  %340 = inttoptr i64 %339 to i64*
  store i64 ptrtoint (i8* @data_22c0 to i64), i64* %340
  store i64 %339, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %341 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %336)
  %342 = load i32*, i32** @RAX_2216_56234d8ed000
  %343 = load i32, i32* %342
  %344 = zext i32 %343 to i64
  store i64 %344, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_6284, i8** @RDX_2264_56234d8e76a0
  %345 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %345, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %346 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %347 = add i64 %346, -8
  %348 = inttoptr i64 %347 to i64*
  store i64 ptrtoint (i8* @data_22d5 to i64), i64* %348
  store i64 %347, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %349 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %341)
  %350 = load i64, i64* @RSP_2312_56234d8dffa8
  %351 = add i64 %350, 140
  %352 = inttoptr i64 %351 to i8*
  store i8 0, i8* %352
  br label %inst_22dd

inst_21fd:                                        ; preds = %inst_227f, %inst_21e0
  %353 = phi i64 [ undef, %inst_227f ], [ %1630, %inst_21e0 ]
  %354 = phi %struct.Memory* [ %114, %inst_227f ], [ %1618, %inst_21e0 ]
  %355 = add i64 %353, 8
  %356 = load i64, i64* @RSP_2312_56234d8dffa8
  %357 = add i64 %356, 172
  %358 = inttoptr i64 %357 to i32*
  %359 = load i32, i32* %358
  %360 = zext i32 %359 to i64
  store i64 %360, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %361 = add i64 %355, 3
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %362 = and i32 %359, 255
  %363 = call i32 @llvm.ctpop.i32(i32 %362) #13, !range !1234
  %364 = trunc i32 %363 to i8
  %365 = and i8 %364, 1
  %366 = xor i8 %365, 1
  store i8 %366, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %367 = icmp eq i32 %359, 0
  %368 = zext i1 %367 to i8
  store i8 %368, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %369 = lshr i32 %359, 31
  %370 = trunc i32 %369 to i8
  store i8 %370, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %371 = add i64 %361, 6
  %372 = sub i64 %371, 702
  %373 = icmp eq i8 %368, 0
  %374 = select i1 %373, i64 %372, i64 %371
  br i1 %373, label %inst_1f50, label %inst_1f3c

inst_20c0:                                        ; preds = %inst_1ff1, %inst_2070
  %375 = phi i64 [ %1148, %inst_1ff1 ], [ undef, %inst_2070 ]
  %376 = phi %struct.Memory* [ %286, %inst_1ff1 ], [ %286, %inst_2070 ]
  %377 = add i64 %375, 5
  %378 = load i64, i64* @R15_2456_56234d8dffa8
  %379 = getelementptr i64, i64* %290, i32 2
  %380 = load i64, i64* %379
  %381 = sub i64 %380, %378
  %382 = icmp ult i64 %380, %378
  %383 = zext i1 %382 to i8
  store i8 %383, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %384 = trunc i64 %381 to i32
  %385 = and i32 %384, 255
  %386 = call i32 @llvm.ctpop.i32(i32 %385) #13, !range !1234
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  %389 = xor i8 %388, 1
  store i8 %389, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %390 = xor i64 %380, %378
  %391 = xor i64 %390, %381
  %392 = lshr i64 %391, 4
  %393 = trunc i64 %392 to i8
  %394 = and i8 %393, 1
  store i8 %394, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %395 = icmp eq i64 %381, 0
  %396 = zext i1 %395 to i8
  store i8 %396, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %397 = lshr i64 %381, 63
  %398 = trunc i64 %397 to i8
  store i8 %398, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %399 = lshr i64 %380, 63
  %400 = lshr i64 %378, 63
  %401 = xor i64 %399, %400
  %402 = xor i64 %397, %399
  %403 = add nuw nsw i64 %402, %401
  %404 = icmp eq i64 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %406 = add i64 %377, 4
  %407 = getelementptr i32, i32* %289, i32 12
  %408 = load i32, i32* %407
  %409 = zext i32 %408 to i64
  store i64 %409, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %410 = add i64 %406, 4
  %411 = getelementptr i32, i32* %289, i32 1
  store i32 %408, i32* %411
  %412 = add i64 %410, 6
  %413 = sub i64 %412, 440
  %414 = or i8 %396, %383
  %415 = icmp eq i8 %414, 0
  %416 = select i1 %415, i64 %413, i64 %412
  br i1 %415, label %inst_1f1b, label %inst_20d3

inst_26c9:                                        ; preds = %inst_268f, %inst_1c2f, %inst_1c04, %inst_1be5, %inst_269d
  %417 = phi i64 [ ptrtoint (i8* @data_26c9 to i64), %inst_269d ], [ %1364, %inst_268f ], [ %1309, %inst_1c04 ], [ %1337, %inst_1c2f ], [ %1252, %inst_1be5 ]
  %418 = phi %struct.Memory* [ %325, %inst_269d ], [ %1033, %inst_268f ], [ %1033, %inst_1c04 ], [ %1033, %inst_1c2f ], [ %1033, %inst_1be5 ]
  %419 = add i64 %417, 5
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %420 = add i64 %419, 5
  %421 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %422 = add i64 %421, -8
  %423 = inttoptr i64 %422 to i64*
  store i64 %420, i64* %423
  store i64 %422, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %424 = call %struct.Memory* @sub_28a0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %418)
  br label %inst_26d3

inst_26d3:                                        ; preds = %inst_2300, %inst_26c9
  %425 = phi i64 [ %558, %inst_2300 ], [ ptrtoint (i8* @data_26d3 to i64), %inst_26c9 ]
  %426 = phi %struct.Memory* [ %519, %inst_2300 ], [ %424, %inst_26c9 ]
  %427 = add i64 %425, 5
  %428 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %429 = add i64 %428, -8
  %430 = inttoptr i64 %429 to i64*
  store i64 %427, i64* %430
  store i64 %429, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %431 = call %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %426)
  br label %inst_26d8

inst_26d8:                                        ; preds = %inst_1cb3, %inst_26d3
  %432 = phi i64 [ %1170, %inst_1cb3 ], [ ptrtoint (i8* @data_26d8 to i64), %inst_26d3 ]
  %433 = phi %struct.Memory* [ %1165, %inst_1cb3 ], [ %431, %inst_26d3 ]
  %434 = add i64 %432, 7
  store i8* @data_5d1f, i8** @RSI_2280_56234d8e76a0
  %435 = add i64 %434, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %436 = add i64 %435, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %437 = add i64 %436, 5
  %438 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %439 = add i64 %438, -8
  %440 = inttoptr i64 %439 to i64*
  store i64 %437, i64* %440
  store i64 %439, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %441 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %433)
  %442 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %442, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %443 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %444 = add i64 %443, -8
  %445 = inttoptr i64 %444 to i64*
  store i64 ptrtoint (i8* @data_26f3 to i64), i64* %445
  store i64 %444, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %446 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %441)
  %447 = load i32*, i32** @RAX_2216_56234d8ed000
  %448 = load i32, i32* %447
  %449 = zext i32 %448 to i64
  store i64 %449, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %450 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %450, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %451 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 ptrtoint (i8* @data_2704 to i64), i64* %453
  store i64 %452, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %454 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %446)
  ret %struct.Memory* %454

inst_22dd:                                        ; preds = %inst_23bf, %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit17, %inst_22a5
  %455 = phi i64 [ %1110, %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit17 ], [ %2241, %inst_23bf ], [ ptrtoint (i8* @data_22dd to i64), %inst_22a5 ]
  %456 = phi %struct.Memory* [ %1065, %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit17 ], [ %2236, %inst_23bf ], [ %349, %inst_22a5 ]
  %457 = add i64 %455, 6
  %458 = load i32*, i32** @RSP_2312_56234d8ed000
  %459 = load i8*, i8** @RSP_2312_56234d8e76a0
  %460 = bitcast i8* %459 to i64*
  %461 = bitcast i32* %458 to i64*
  %462 = getelementptr i64, i64* %461, i32 11
  %463 = load i64, i64* %462
  %464 = add i64 %463, 1
  %465 = getelementptr i64, i64* %460, i32 11
  store i64 %464, i64* %465
  %466 = add i64 %457, 5
  store i64 %464, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %467 = add i64 %466, 4
  %468 = trunc i64 %464 to i32
  %469 = getelementptr i32, i32* %458, i32 20
  %470 = load i32, i32* %469
  %471 = sub i32 %470, %468
  %472 = icmp ult i32 %470, %468
  %473 = zext i1 %472 to i8
  store i8 %473, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %474 = icmp eq i32 %471, 0
  %475 = zext i1 %474 to i8
  store i8 %475, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %476 = lshr i32 %471, 31
  %477 = trunc i32 %476 to i8
  %478 = lshr i32 %470, 31
  %479 = lshr i32 %468, 31
  %480 = xor i32 %478, %479
  %481 = xor i32 %476, %478
  %482 = add nuw nsw i32 %481, %480
  %483 = icmp eq i32 %482, 2
  %484 = add i64 %467, 6
  %485 = sub i64 %484, 1389
  %486 = icmp eq i8 %475, 0
  %487 = icmp eq i8 %477, 0
  %488 = xor i1 %487, %483
  %489 = and i1 %486, %488
  %490 = select i1 %489, i64 %485, i64 %484
  br i1 %489, label %inst_1d85, label %inst_22f2

inst_20e0:                                        ; preds = %inst_20f9, %inst_20d3
  %491 = phi i64 [ %517, %inst_20d3 ], [ %1960, %inst_20f9 ]
  %492 = phi %struct.Memory* [ %511, %inst_20d3 ], [ %502, %inst_20f9 ]
  %493 = add i64 %491, 3
  %494 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %494, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %495 = add i64 %493, 3
  %496 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %496, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %497 = add i64 %495, 5
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %498 = add i64 %497, 5
  %499 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %500 = add i64 %499, -8
  %501 = inttoptr i64 %500 to i64*
  store i64 %498, i64* %501
  store i64 %500, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %502 = call %struct.Memory* @sub_2d90(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %492)
  %503 = load i64, i64* @R14_2440_56234d8dffa8
  %504 = load i64, i64* @RAX_2216_56234d8dffa8
  %505 = sub i64 %503, %504
  %506 = icmp eq i64 %505, 0
  %507 = zext i1 %506 to i8
  %508 = icmp eq i8 %507, 0
  %509 = select i1 %508, i64 ptrtoint (i8* @data_25f7 to i64), i64 ptrtoint (i8* @data_20f9 to i64)
  br i1 %508, label %inst_25f7, label %inst_20f9

inst_20d3:                                        ; preds = %inst_1f10, %inst_20c0
  %510 = phi i64 [ %596, %inst_1f10 ], [ %416, %inst_20c0 ]
  %511 = phi %struct.Memory* [ %560, %inst_1f10 ], [ %376, %inst_20c0 ]
  %512 = add i64 %510, 5
  %513 = load i64, i64* @RSP_2312_56234d8dffa8
  %514 = add i64 %513, 32
  %515 = inttoptr i64 %514 to i64*
  %516 = load i64, i64* %515
  store i64 %516, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %517 = add i64 %512, 8
  br label %inst_20e0

inst_2300:                                        ; preds = %inst_250d, %inst_22f2
  %518 = phi i64 [ %2142, %inst_250d ], [ %2131, %inst_22f2 ]
  %519 = phi %struct.Memory* [ %2137, %inst_250d ], [ %456, %inst_22f2 ]
  %520 = add i64 %518, 8
  %521 = load i64*, i64** @RSP_2312_56234d8e7800
  %522 = load i8*, i8** @RSP_2312_56234d8e76a0
  %523 = load i64, i64* @RSP_2312_56234d8dffa8
  %524 = getelementptr i8, i8* %522, i32 140
  %525 = load i8, i8* %524
  %526 = zext i8 %525 to i64
  %527 = add i64 %520, 3
  %528 = trunc i64 %526 to i32
  %529 = zext i32 %528 to i64
  %530 = xor i64 1, %529
  %531 = and i64 %530, 4294967295
  %532 = add i64 %527, 8
  %533 = getelementptr i64, i64* %521, i32 41
  %534 = load i64, i64* %533
  %535 = add i64 %532, 9
  %536 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %537 = add i64 %536, 40
  %538 = inttoptr i64 %537 to i64*
  %539 = load i64, i64* %538
  %540 = xor i64 %539, %534
  store i64 %540, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %541 = trunc i64 %540 to i32
  %542 = and i32 %541, 255
  %543 = call i32 @llvm.ctpop.i32(i32 %542) #13, !range !1234
  %544 = trunc i32 %543 to i8
  %545 = and i8 %544, 1
  %546 = xor i8 %545, 1
  store i8 %546, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %547 = icmp eq i64 %540, 0
  %548 = zext i1 %547 to i8
  store i8 %548, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %549 = lshr i64 %540, 63
  %550 = trunc i64 %549 to i8
  store i8 %550, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %551 = add i64 %535, 3
  %552 = trunc i64 %531 to i8
  %553 = zext i8 %552 to i64
  %554 = and i64 %553, 255
  store i64 %554, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %555 = add i64 %551, 6
  %556 = add i64 %555, 942
  %557 = icmp eq i8 %548, 0
  %558 = select i1 %557, i64 %556, i64 %555
  br i1 %557, label %inst_26d3, label %inst_2325

inst_1f10:                                        ; preds = %inst_1f8f, %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit16
  %559 = phi i64 [ ptrtoint (i8* @data_1f10 to i64), %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit16 ], [ %913, %inst_1f8f ]
  %560 = phi %struct.Memory* [ %182, %_ZN12_GLOBAL__N_19DIVrdxraxI2RnImLb1EEEEP6MemoryS4_R5StateT_2InImE.exit16 ], [ %904, %inst_1f8f ]
  %561 = add i64 %559, 5
  %562 = load i64, i64* @RSP_2312_56234d8dffa8
  %563 = add i64 %562, 16
  %564 = load i64, i64* @R15_2456_56234d8dffa8
  %565 = inttoptr i64 %563 to i64*
  %566 = load i64, i64* %565
  %567 = sub i64 %566, %564
  %568 = icmp ult i64 %566, %564
  %569 = zext i1 %568 to i8
  store i8 %569, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %570 = trunc i64 %567 to i32
  %571 = and i32 %570, 255
  %572 = call i32 @llvm.ctpop.i32(i32 %571) #13, !range !1234
  %573 = trunc i32 %572 to i8
  %574 = and i8 %573, 1
  %575 = xor i8 %574, 1
  store i8 %575, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %576 = xor i64 %566, %564
  %577 = xor i64 %576, %567
  %578 = lshr i64 %577, 4
  %579 = trunc i64 %578 to i8
  %580 = and i8 %579, 1
  store i8 %580, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %581 = icmp eq i64 %567, 0
  %582 = zext i1 %581 to i8
  store i8 %582, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %583 = lshr i64 %567, 63
  %584 = trunc i64 %583 to i8
  store i8 %584, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %585 = lshr i64 %566, 63
  %586 = lshr i64 %564, 63
  %587 = xor i64 %585, %586
  %588 = xor i64 %583, %585
  %589 = add nuw nsw i64 %588, %587
  %590 = icmp eq i64 %589, 2
  %591 = zext i1 %590 to i8
  store i8 %591, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %592 = add i64 %561, 6
  %593 = add i64 %592, 440
  %594 = or i8 %582, %569
  %595 = icmp ne i8 %594, 0
  %596 = select i1 %595, i64 %593, i64 %592
  br i1 %595, label %inst_20d3, label %inst_1f1b

inst_1f1b:                                        ; preds = %inst_1f10, %inst_20c0
  %597 = phi i64 [ %416, %inst_20c0 ], [ %596, %inst_1f10 ]
  %598 = phi %struct.Memory* [ %376, %inst_20c0 ], [ %560, %inst_1f10 ]
  %599 = add i64 %597, 5
  %600 = load i64, i64* @RBX_2232_56234d8dffa8
  %601 = load i64, i64* @RSP_2312_56234d8dffa8
  %602 = add i64 %601, 8
  %603 = inttoptr i64 %602 to i64*
  %604 = load i64, i64* %603
  %605 = sub i64 %600, %604
  %606 = icmp ugt i64 %604, %600
  %607 = zext i1 %606 to i8
  %608 = icmp eq i64 %605, 0
  %609 = zext i1 %608 to i8
  %610 = add i64 %599, 6
  %611 = add i64 %610, 525
  %612 = or i8 %609, %607
  %613 = icmp ne i8 %612, 0
  %614 = select i1 %613, i64 %611, i64 %610
  br i1 %613, label %inst_2133, label %inst_1f26

inst_1f26:                                        ; preds = %inst_2107, %inst_1f1b
  %615 = phi i64 [ %1990, %inst_2107 ], [ %614, %inst_1f1b ]
  %616 = phi %struct.Memory* [ %1974, %inst_2107 ], [ %598, %inst_1f1b ]
  %617 = add i64 %615, 5
  %618 = load i64*, i64** @RSP_2312_56234d8e7800
  %619 = load i8*, i8** @RSP_2312_56234d8e76a0
  %620 = bitcast i8* %619 to i32*
  %621 = getelementptr i8, i8* %619, i32 84
  %622 = load i8, i8* %621
  %623 = icmp eq i8 %622, 0
  %624 = zext i1 %623 to i8
  %625 = add i64 %617, 11
  %626 = getelementptr i32, i32* %620, i32 43
  store i32 0, i32* %626
  %627 = add i64 %625, 6
  %628 = add i64 %627, 676
  %629 = icmp eq i8 %624, 0
  %630 = select i1 %629, i64 %628, i64 %627
  br i1 %629, label %inst_21e0, label %inst_1f3c

inst_2133:                                        ; preds = %inst_2107, %inst_1f1b
  %631 = phi i64 [ %614, %inst_1f1b ], [ %1990, %inst_2107 ]
  %632 = phi %struct.Memory* [ %598, %inst_1f1b ], [ %1974, %inst_2107 ]
  %633 = load i8*, i8** @RSP_2312_56234d8e76a0
  %634 = load i64*, i64** @RSP_2312_56234d8e7800
  %635 = load i64, i64* @RSP_2312_56234d8dffa8
  %636 = bitcast i8* %633 to i32*
  %637 = getelementptr i32, i32* %636, i32 1
  %638 = load i32, i32* %637
  %639 = add i32 %638, 1
  store i32 %639, i32* %637
  %640 = load i8*, i8** @RBX_2232_56234d8e76a0
  %641 = load i64, i64* @RBX_2232_56234d8dffa8
  %642 = add i64 %641, 1
  store i64 %642, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %643 = load i32, i32* %637
  %644 = zext i32 %643 to i64
  store i64 %644, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %645 = icmp eq i32 %643, 0
  %646 = lshr i32 %643, 31
  %647 = trunc i32 %646 to i8
  %648 = icmp ne i8 %647, 0
  %649 = or i1 %645, %648
  br i1 %649, label %inst_2190, label %inst_2144

inst_1f3c:                                        ; preds = %inst_1f26, %inst_21fd
  %650 = phi %struct.Memory* [ %616, %inst_1f26 ], [ %354, %inst_21fd ]
  %651 = add i64 %630, 3
  %652 = load i64, i64* @R15_2456_56234d8dffa8
  %653 = add i64 %651, 5
  %654 = load i64, i64* @RSP_2312_56234d8dffa8
  %655 = add i64 %654, 32
  %656 = inttoptr i64 %655 to i64*
  %657 = load i64, i64* %656
  %658 = sub i64 %652, %657
  store i64 %658, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %659 = icmp ugt i64 %657, %652
  %660 = zext i1 %659 to i8
  store i8 %660, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %661 = trunc i64 %658 to i32
  %662 = and i32 %661, 255
  %663 = call i32 @llvm.ctpop.i32(i32 %662) #13, !range !1234
  %664 = trunc i32 %663 to i8
  %665 = and i8 %664, 1
  %666 = xor i8 %665, 1
  store i8 %666, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %667 = xor i64 %657, %652
  %668 = xor i64 %667, %658
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  store i8 %671, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %672 = icmp eq i64 %658, 0
  %673 = zext i1 %672 to i8
  store i8 %673, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %674 = lshr i64 %658, 63
  %675 = trunc i64 %674 to i8
  store i8 %675, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %676 = lshr i64 %652, 63
  %677 = lshr i64 %657, 63
  %678 = xor i64 %677, %676
  %679 = xor i64 %674, %676
  %680 = add nuw nsw i64 %679, %678
  %681 = icmp eq i64 %680, 2
  %682 = zext i1 %681 to i8
  store i8 %682, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %683 = add i64 %653, 6
  %684 = add i64 %683, 729
  %685 = icmp eq i8 %673, 0
  %686 = select i1 %685, i64 %684, i64 %683
  br i1 %685, label %inst_2223, label %inst_1f4a

inst_2548:                                        ; preds = %inst_251c, %inst_1e4a
  %687 = phi i64 [ ptrtoint (i8* @data_2548 to i64), %inst_251c ], [ %1603, %inst_1e4a ]
  %688 = phi %struct.Memory* [ %2364, %inst_251c ], [ %80, %inst_1e4a ]
  %689 = add i64 %687, 5
  %690 = load i64*, i64** @RSP_2312_56234d8e7800
  %691 = load i64, i64* @RSP_2312_56234d8dffa8
  %692 = getelementptr i64, i64* %690, i32 7
  %693 = load i64, i64* %692
  %694 = add i64 %689, 3
  %695 = load i64, i64* @R15_2456_56234d8dffa8
  %696 = sub i64 %695, %693
  %697 = icmp ult i64 %695, %693
  %698 = zext i1 %697 to i8
  store i8 %698, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %699 = trunc i64 %696 to i32
  %700 = and i32 %699, 255
  %701 = call i32 @llvm.ctpop.i32(i32 %700) #13, !range !1234
  %702 = trunc i32 %701 to i8
  %703 = and i8 %702, 1
  %704 = xor i8 %703, 1
  store i8 %704, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %705 = xor i64 %693, %695
  %706 = xor i64 %705, %696
  %707 = lshr i64 %706, 4
  %708 = trunc i64 %707 to i8
  %709 = and i8 %708, 1
  store i8 %709, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %710 = icmp eq i64 %696, 0
  %711 = zext i1 %710 to i8
  store i8 %711, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %712 = lshr i64 %696, 63
  %713 = trunc i64 %712 to i8
  store i8 %713, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %714 = lshr i64 %695, 63
  %715 = lshr i64 %693, 63
  %716 = xor i64 %715, %714
  %717 = xor i64 %712, %714
  %718 = add nuw nsw i64 %717, %716
  %719 = icmp eq i64 %718, 2
  %720 = zext i1 %719 to i8
  store i8 %720, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %721 = add i64 %694, 4
  %722 = icmp eq i8 %698, 0
  %723 = select i1 %722, i64 %695, i64 %693
  store i64 %723, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %724 = add i64 %721, 4
  %725 = load i64, i64* @R14_2440_56234d8dffa8
  %726 = add i64 %725, %723
  store i64 %726, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %727 = add i64 %724, 3
  store i64 %723, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %728 = add i64 %727, 5
  %729 = add i64 %691, -8
  %730 = getelementptr i64, i64* %690, i32 -1
  store i64 %728, i64* %730
  store i64 %729, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %731 = call %struct.Memory* @sub_5210(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %688)
  %732 = load i64, i64* @R14_2440_56234d8dffa8
  %733 = load i64, i64* @RAX_2216_56234d8dffa8
  %734 = add i64 %733, %732
  store i64 %734, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %735 = load i64*, i64** @RSP_2312_56234d8e7800
  %736 = getelementptr i64, i64* %735, i32 14
  store i64 %733, i64* %736
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 %734, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 %734, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %737 = getelementptr i64, i64* %735, i32 13
  %738 = load i64, i64* %737
  store i8* @data_2575, i8** @RIP_2472_56234d8e76a0
  %739 = icmp eq i64 %738, 0
  br i1 %739, label %740, label %741

740:                                              ; preds = %inst_2548
  call void @abort() #13
  unreachable

741:                                              ; preds = %inst_2548
  %742 = zext i64 %738 to i128
  %743 = zext i64 %734 to i128
  %744 = udiv i128 %743, %742
  %745 = icmp ult i128 %744, 18446744073709551616
  br i1 %745, label %_ZN12_GLOBAL__N_19DIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_2InImE.exit, label %746

746:                                              ; preds = %741
  call void @abort() #13
  unreachable

_ZN12_GLOBAL__N_19DIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_2InImE.exit: ; preds = %741
  %747 = lshr i64 %734, 63
  %748 = mul i128 %744, %742
  %749 = sub i128 %743, %748
  %750 = trunc i128 %749 to i64
  %751 = trunc i128 %744 to i64
  store i64 %751, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %752 = sub i64 %734, %750
  store i64 %752, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %753 = icmp ult i64 %734, %750
  %754 = zext i1 %753 to i8
  store i8 %754, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %755 = trunc i64 %752 to i32
  %756 = and i32 %755, 255
  %757 = call i32 @llvm.ctpop.i32(i32 %756) #13, !range !1234
  %758 = trunc i32 %757 to i8
  %759 = and i8 %758, 1
  %760 = xor i8 %759, 1
  store i8 %760, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %761 = xor i64 %750, %734
  %762 = xor i64 %761, %752
  %763 = lshr i64 %762, 4
  %764 = trunc i64 %763 to i8
  %765 = and i8 %764, 1
  store i8 %765, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %766 = icmp eq i64 %752, 0
  %767 = zext i1 %766 to i8
  store i8 %767, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %768 = lshr i64 %752, 63
  %769 = trunc i64 %768 to i8
  store i8 %769, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %770 = lshr i64 %750, 63
  %771 = xor i64 %770, %747
  %772 = xor i64 %768, %747
  %773 = add nuw nsw i64 %772, %771
  %774 = icmp eq i64 %773, 2
  %775 = zext i1 %774 to i8
  store i8 %775, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  br label %inst_2598

inst_1f4a:                                        ; preds = %inst_2223, %inst_1f3c
  %776 = phi i64 [ %1668, %inst_2223 ], [ %686, %inst_1f3c ]
  %777 = phi %struct.Memory* [ %1639, %inst_2223 ], [ %650, %inst_1f3c ]
  %778 = add i64 %776, 6
  %779 = load i32, i32* bitcast (i8* @data_2080f4 to i32*)
  %780 = zext i32 %779 to i64
  store i64 %780, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1f50

inst_1f50:                                        ; preds = %inst_1f4a, %inst_21fd
  %781 = phi i64 [ %374, %inst_21fd ], [ %778, %inst_1f4a ]
  %782 = phi %struct.Memory* [ %354, %inst_21fd ], [ %777, %inst_1f4a ]
  %783 = add i64 %781, 5
  %784 = load i64*, i64** @RSP_2312_56234d8e7800
  %785 = load i64, i64* @RSP_2312_56234d8dffa8
  %786 = getelementptr i64, i64* %784, i32 7
  %787 = load i64, i64* %786
  store i64 %787, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %788 = add i64 %783, 5
  %789 = getelementptr i64, i64* %784, i32 3
  %790 = load i64, i64* %789
  store i64 %790, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %791 = add i64 %788, 2
  %792 = load i32, i32* @RBX_2232_56234d8dff90
  %793 = zext i32 %792 to i64
  %794 = and i64 %793, 4294967295
  store i64 %794, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %795 = add i64 %791, 5
  %796 = add i64 %785, -8
  %797 = getelementptr i64, i64* %784, i32 -1
  store i64 %795, i64* %797
  store i64 %796, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %798 = call %struct.Memory* @sub_4b40(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %782)
  %799 = load i64, i64* @RAX_2216_56234d8dffa8
  %800 = sub i64 %799, -1
  %801 = icmp eq i64 %800, 0
  %802 = zext i1 %801 to i8
  %803 = icmp eq i8 %802, 0
  %804 = select i1 %803, i64 ptrtoint (i8* @data_1f6b to i64), i64 ptrtoint (i8* @data_2337 to i64)
  br i1 %801, label %inst_2337, label %inst_1f6b

inst_2623:                                        ; preds = %inst_25f7, %inst_1ce1
  %805 = phi %struct.Memory* [ %1165, %inst_1ce1 ], [ %1922, %inst_25f7 ]
  store i8* @data_62ca, i8** @RAX_2216_56234d8e76a0
  br label %inst_1d9a

inst_1dd0:                                        ; preds = %inst_1dbe, %inst_2289
  %806 = phi i64 [ %1496, %inst_2289 ], [ %1498, %inst_1dbe ]
  %807 = phi %struct.Memory* [ %1482, %inst_2289 ], [ %944, %inst_1dbe ]
  %808 = add i64 %806, 8
  %809 = load i64*, i64** @RSP_2312_56234d8e7800
  %810 = load i64, i64* @RSP_2312_56234d8dffa8
  %811 = getelementptr i64, i64* %809, i32 16
  %812 = load i64, i64* %811
  store i64 %812, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %813 = add i64 %808, 2
  %814 = load i32, i32* @RBX_2232_56234d8dff90
  %815 = zext i32 %814 to i64
  %816 = and i64 %815, 4294967295
  store i64 %816, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %817 = add i64 %813, 5
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %818 = add i64 %817, 5
  %819 = add i64 %810, -8
  %820 = getelementptr i64, i64* %809, i32 -1
  store i64 %818, i64* %820
  store i64 %819, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %821 = call %struct.Memory* @ext_208390___fxstat(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %807)
  %822 = load i32, i32* @RAX_2216_56234d8dff90
  %823 = lshr i32 %822, 31
  %824 = trunc i32 %823 to i8
  %825 = icmp eq i8 %824, 0
  %826 = select i1 %825, i64 ptrtoint (i8* @data_1dec to i64), i64 ptrtoint (i8* @data_2490 to i64)
  %827 = icmp eq i8 %824, 1
  br i1 %827, label %inst_2490, label %inst_1dec

inst_215c:                                        ; preds = %inst_2149, %inst_2144
  %828 = phi i64 [ %2003, %inst_2144 ], [ %2013, %inst_2149 ]
  %829 = getelementptr i8, i8* %633, i32 87
  %830 = load i8, i8* %829
  %831 = icmp eq i8 %830, 0
  br i1 %831, label %inst_2190, label %inst_2163

inst_237b:                                        ; preds = %inst_24cd, %inst_2337
  %832 = phi i64 [ %2228, %inst_24cd ], [ %1727, %inst_2337 ]
  %833 = phi %struct.Memory* [ %2199, %inst_24cd ], [ %1695, %inst_2337 ]
  %834 = add i64 %832, 4
  %835 = load i64, i64* @RSP_2312_56234d8dffa8
  %836 = add i64 %835, 4
  %837 = inttoptr i64 %836 to i32*
  %838 = load i32, i32* %837
  %839 = zext i32 %838 to i64
  store i64 %839, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %840 = add i64 %834, 3
  store i64 0, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %841 = add i64 %840, 6
  store i32 %838, i32* bitcast (i8* @data_2080f0 to i32*)
  br label %inst_2388

inst_2015:                                        ; preds = %inst_2076, %inst_205f, %inst_21b8, %inst_20a8, %inst_2090, %inst_202e, %inst_200e
  %842 = load i8*, i8** @RBX_2232_56234d8e76a0
  %843 = load i64, i64* @RBX_2232_56234d8dffa8
  %844 = add i64 1, %843
  store i64 %844, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %845 = load i8, i8* %842
  %846 = zext i8 %845 to i64
  store i64 %846, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_201d

inst_1feb:                                        ; preds = %inst_1fe3, %inst_1fbf
  %847 = phi i64 [ %298, %inst_1fbf ], [ %1131, %inst_1fe3 ]
  %848 = add i64 %847, 4
  %849 = load i8, i8* @RBP_2328_56234d8dff60
  %850 = sub i8 %849, 9
  %851 = icmp eq i8 %850, 0
  %852 = zext i1 %851 to i8
  %853 = add i64 %848, 2
  %854 = sub i64 %853, 33
  %855 = icmp eq i8 %852, 0
  %856 = select i1 %855, i64 %853, i64 %854
  br i1 %851, label %inst_1fd0, label %inst_1ff1

inst_1d85:                                        ; preds = %inst_1ce1, %inst_22dd
  %857 = phi i64 [ %490, %inst_22dd ], [ %1474, %inst_1ce1 ]
  %858 = phi %struct.Memory* [ %456, %inst_22dd ], [ %1165, %inst_1ce1 ]
  %859 = add i64 %857, 5
  %860 = load i64*, i64** @RSP_2312_56234d8e7800
  %861 = getelementptr i64, i64* %860, i32 9
  %862 = load i64, i64* %861
  %863 = add i64 %859, 5
  %864 = getelementptr i64, i64* %860, i32 11
  %865 = load i64, i64* %864
  %866 = add i64 %863, 4
  %867 = mul i64 %865, 8
  %868 = add i64 %867, %862
  %869 = inttoptr i64 %868 to i64*
  %870 = load i64, i64* %869
  store i64 %870, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %871 = add i64 %866, 7
  store i64 %870, i64* bitcast (i8* @data_2080f8 to i64*)
  br label %inst_1d9a

inst_2388:                                        ; preds = %inst_262f, %inst_23eb, %inst_237b
  %872 = phi i64 [ undef, %inst_262f ], [ %841, %inst_237b ], [ undef, %inst_23eb ]
  %873 = phi %struct.Memory* [ %2111, %inst_262f ], [ %833, %inst_237b ], [ %1134, %inst_23eb ]
  %874 = add i64 %872, 5
  %875 = load i64*, i64** @RSP_2312_56234d8e7800
  %876 = load i8*, i8** @RSP_2312_56234d8e76a0
  %877 = load i64, i64* @RSP_2312_56234d8dffa8
  %878 = getelementptr i64, i64* %875, i32 15
  %879 = load i64, i64* %878
  store i64 %879, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %880 = add i64 %874, 8
  %881 = load i8, i8* @R10_2376_56234d8dff60
  %882 = getelementptr i8, i8* %876, i32 140
  %883 = load i8, i8* %882
  %884 = and i8 %883, %881
  store i8 %884, i8* %882
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %885 = zext i8 %884 to i32
  %886 = call i32 @llvm.ctpop.i32(i32 %885) #13, !range !1234
  %887 = trunc i32 %886 to i8
  %888 = and i8 %887, 1
  %889 = xor i8 %888, 1
  store i8 %889, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %890 = icmp eq i8 %884, 0
  %891 = zext i1 %890 to i8
  store i8 %891, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %892 = lshr i8 %884, 7
  store i8 %892, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %893 = add i64 %880, 5
  %894 = add i64 %877, -8
  %895 = getelementptr i64, i64* %875, i32 -1
  store i64 %893, i64* %895
  store i64 %894, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %896 = call %struct.Memory* @ext_208270_free(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %873)
  br label %inst_239a

inst_1f8c:                                        ; preds = %inst_1f74, %inst_21a3
  %897 = phi i64 [ %1780, %inst_1f74 ], [ undef, %inst_21a3 ]
  %898 = phi %struct.Memory* [ %798, %inst_1f74 ], [ %914, %inst_21a3 ]
  %899 = add i64 %897, 3
  %900 = load i8*, i8** @RAX_2216_56234d8e76a0
  %901 = load i8, i8* %900
  %902 = zext i8 %901 to i64
  store i64 %902, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1f8f

inst_1f8f:                                        ; preds = %inst_2218, %inst_1f8c
  %903 = phi i64 [ %899, %inst_1f8c ], [ undef, %inst_2218 ]
  %904 = phi %struct.Memory* [ %898, %inst_1f8c ], [ %632, %inst_2218 ]
  %905 = add i64 %903, 4
  %906 = load i8, i8* @RBP_2328_56234d8dff60
  %907 = sub i8 %906, 10
  %908 = icmp eq i8 %907, 0
  %909 = zext i1 %908 to i8
  %910 = add i64 %905, 6
  %911 = sub i64 %910, 137
  %912 = icmp eq i8 %909, 0
  %913 = select i1 %912, i64 %910, i64 %911
  br i1 %908, label %inst_1f10, label %inst_1f99

inst_2190:                                        ; preds = %inst_216a, %inst_2163, %inst_215c, %inst_2133
  %914 = phi %struct.Memory* [ %632, %inst_2133 ], [ %632, %inst_215c ], [ %632, %inst_2163 ], [ %2044, %inst_216a ]
  %915 = load i64, i64* @RSP_2312_56234d8dffa8
  %916 = add i64 %915, 85
  %917 = inttoptr i64 %916 to i8*
  %918 = load i8, i8* %917
  %919 = icmp eq i8 %918, 0
  %920 = load i8*, i8** @R15_2456_56234d8e76a0
  %921 = load i64, i64* @R15_2456_56234d8dffa8
  %922 = add i64 %921, 1
  store i64 %922, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br i1 %919, label %inst_21d0, label %inst_219b

inst_2598:                                        ; preds = %inst_257f, %_ZN12_GLOBAL__N_19DIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_2InImE.exit
  %923 = phi i64 [ undef, %_ZN12_GLOBAL__N_19DIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_2InImE.exit ], [ %2407, %inst_257f ]
  %924 = phi %struct.Memory* [ %731, %_ZN12_GLOBAL__N_19DIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_2InImE.exit ], [ %2378, %inst_257f ]
  %925 = add i64 %923, 6
  %926 = load i32, i32* bitcast (i8* @data_2080f4 to i32*)
  %927 = zext i32 %926 to i64
  store i64 %927, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %928 = add i64 %925, 3
  %929 = load i64, i64* @RBP_2328_56234d8dffa8
  store i64 %929, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %930 = add i64 %928, 3
  %931 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %931, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %932 = add i64 %930, 5
  %933 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %934 = add i64 %933, -8
  %935 = inttoptr i64 %934 to i64*
  store i64 %932, i64* %935
  store i64 %934, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %936 = call %struct.Memory* @sub_4b40(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %924)
  %937 = load i64, i64* @RAX_2216_56234d8dffa8
  %938 = sub i64 %937, -1
  %939 = icmp eq i64 %938, 0
  %940 = zext i1 %939 to i8
  store i64 %937, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %941 = icmp eq i8 %940, 0
  %942 = select i1 %941, i64 ptrtoint (i8* @data_257a to i64), i64 ptrtoint (i8* @data_25b2 to i64)
  br i1 %941, label %inst_257a, label %inst_25b2

inst_1d9a:                                        ; preds = %inst_1d85, %inst_2623
  %943 = phi i64 [ undef, %inst_2623 ], [ %871, %inst_1d85 ]
  %944 = phi %struct.Memory* [ %805, %inst_2623 ], [ %858, %inst_1d85 ]
  store i8* @data_62ca, i8** @RDI_2296_56234d8e76a0
  store i64 2, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %945 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %945, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %946 = load i8, i8* @DF_2075_56234d8dff60, align 1, !tbaa !1243
  %947 = icmp eq i8 %946, 0
  %948 = select i1 %947, i64 1, i64 -1
  %949 = load i8*, i8** @RSI_2280_56234d8e76a0
  %950 = load i64, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1240
  br label %951

951:                                              ; preds = %951, %inst_1d9a
  %952 = phi i8* [ %966, %951 ], [ @data_62ca, %inst_1d9a ]
  %953 = phi i64 [ %962, %951 ], [ %950, %inst_1d9a ]
  %954 = phi i8* [ %967, %951 ], [ %949, %inst_1d9a ]
  %955 = phi i64 [ %961, %951 ], [ %945, %inst_1d9a ]
  %956 = phi i64 [ %963, %951 ], [ 2, %inst_1d9a ]
  %957 = load i8, i8* %954
  %958 = load i8, i8* %952
  %959 = sub i8 %957, %958
  %960 = icmp eq i8 %959, 0
  %961 = add i64 %948, %955
  %962 = add i64 %948, %953
  %963 = add i64 %956, -1
  %964 = icmp ne i64 %963, 0
  %965 = and i1 %964, %960
  %966 = inttoptr i64 %962 to i8*
  %967 = inttoptr i64 %961 to i8*
  br i1 %965, label %951, label %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit

_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit: ; preds = %951
  %968 = icmp ult i8 %957, %958
  %969 = zext i1 %968 to i8
  %970 = zext i1 %960 to i8
  store i64 %963, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %971 = add i64 %943, 7
  %972 = add i64 %971, 5
  %973 = add i64 %972, 3
  %974 = add i64 %973, 2
  %975 = add i64 %974, 3
  %976 = or i8 %970, %969
  %977 = icmp eq i8 %976, 0
  %978 = zext i1 %977 to i8
  store i8 %978, i8* @RBX_2232_56234d8dff60, align 1, !tbaa !1240
  %979 = add i64 %975, 3
  store i8 %969, i8* @RDX_2264_56234d8dff60, align 1, !tbaa !1240
  %980 = add i64 %979, 2
  %981 = load i32, i32* @RBX_2232_56234d8dff90
  %982 = load i32, i32* @RDX_2264_56234d8dff90
  %983 = sub i32 %981, %982
  %984 = zext i32 %983 to i64
  %985 = add i64 %980, 3
  %986 = trunc i64 %984 to i8
  %987 = zext i8 %986 to i64
  %988 = trunc i64 %987 to i32
  %989 = shl i32 %988, 24
  %990 = ashr exact i32 %989, 24
  %991 = zext i32 %990 to i64
  store i64 %991, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %992 = add i64 %985, 2
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %993 = and i32 %990, 255
  %994 = call i32 @llvm.ctpop.i32(i32 %993) #13, !range !1234
  %995 = trunc i32 %994 to i8
  %996 = and i8 %995, 1
  %997 = xor i8 %996, 1
  store i8 %997, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %998 = icmp eq i32 %990, 0
  %999 = zext i1 %998 to i8
  store i8 %999, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1000 = lshr i32 %990, 31
  %1001 = trunc i32 %1000 to i8
  store i8 %1001, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1002 = add i64 %992, 6
  %1003 = add i64 %1002, 1227
  %1004 = icmp eq i8 %999, 0
  %1005 = select i1 %1004, i64 %1003, i64 %1002
  br i1 %1004, label %inst_2289, label %inst_1dbe

inst_239a:                                        ; preds = %inst_25e2, %inst_2388
  %1006 = phi %struct.Memory* [ %1111, %inst_25e2 ], [ %896, %inst_2388 ]
  %1007 = load i64*, i64** @RSP_2312_56234d8e7800
  %1008 = load i64, i64* @RSP_2312_56234d8dffa8
  %1009 = getelementptr i64, i64* %1007, i32 14
  %1010 = load i64, i64* %1009
  store i64 %1010, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1011 = add i64 %1008, -8
  %1012 = getelementptr i64, i64* %1007, i32 -1
  store i64 add (i64 ptrtoint (i8* @data_239a to i64), i64 10), i64* %1012
  store i64 %1011, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1013 = call %struct.Memory* @ext_208270_free(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1006)
  br label %inst_23a4

inst_1ba0:                                        ; preds = %inst_1c0d, %inst_1bee, %inst_1ca3, %inst_1bda, %inst_1c42, %inst_1c38, %inst_1c20, %inst_1b00
  %1014 = phi i64 [ ptrtoint (i8* @data_1ba0 to i64), %inst_1b00 ], [ undef, %inst_1c38 ], [ undef, %inst_1c20 ], [ undef, %inst_1c0d ], [ undef, %inst_1c42 ], [ %1214, %inst_1bda ], [ undef, %inst_1ca3 ], [ undef, %inst_1bee ]
  %1015 = phi %struct.Memory* [ %58, %inst_1b00 ], [ %97, %inst_1c38 ], [ %1033, %inst_1c20 ], [ %1033, %inst_1c0d ], [ %1033, %inst_1c42 ], [ %1033, %inst_1bda ], [ %1033, %inst_1ca3 ], [ %1033, %inst_1bee ]
  %1016 = add i64 %1014, 5
  %1017 = load i64*, i64** @RSP_2312_56234d8e7800
  %1018 = load i32*, i32** @RSP_2312_56234d8ed000
  %1019 = load i64, i64* @RSP_2312_56234d8dffa8
  %1020 = bitcast i32* %1018 to i64*
  %1021 = getelementptr i64, i64* %1017, i32 9
  %1022 = load i64, i64* %1021
  store i64 %1022, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1023 = add i64 %1016, 4
  %1024 = getelementptr i32, i32* %1018, i32 20
  %1025 = load i32, i32* %1024
  %1026 = zext i32 %1025 to i64
  store i64 %1026, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1027 = add i64 %1023, 7
  store i8** @data_207a80, i8*** @RCX_2248_56234d8ee2d0
  %1028 = add i64 %1027, 7
  store i8* @data_5d14, i8** @RDX_2264_56234d8e76a0
  %1029 = add i64 %1028, 3
  store i64 0, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1030 = add i64 %1029, 5
  %1031 = add i64 %1019, -8
  %1032 = getelementptr i64, i64* %1020, i32 -1
  store i64 %1030, i64* %1032
  store i64 %1031, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1033 = call %struct.Memory* @ext_2082e8_getopt_long(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1015)
  %1034 = load i32, i32* @RAX_2216_56234d8dff90
  %1035 = zext i32 %1034 to i64
  %1036 = sub i32 %1034, -1
  %1037 = icmp ult i32 %1034, -1
  %1038 = zext i1 %1037 to i8
  store i8 %1038, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1039 = and i32 %1036, 255
  %1040 = call i32 @llvm.ctpop.i32(i32 %1039) #13, !range !1234
  %1041 = trunc i32 %1040 to i8
  %1042 = and i8 %1041, 1
  %1043 = xor i8 %1042, 1
  store i8 %1043, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1044 = xor i64 -1, %1035
  %1045 = trunc i64 %1044 to i32
  %1046 = xor i32 %1036, %1045
  %1047 = lshr i32 %1046, 4
  %1048 = trunc i32 %1047 to i8
  %1049 = and i8 %1048, 1
  store i8 %1049, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1050 = icmp eq i32 %1036, 0
  %1051 = zext i1 %1050 to i8
  store i8 %1051, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1052 = lshr i32 %1036, 31
  %1053 = trunc i32 %1052 to i8
  store i8 %1053, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1054 = lshr i32 %1034, 31
  %1055 = xor i32 1, %1054
  %1056 = xor i32 %1052, %1054
  %1057 = add nuw nsw i32 %1056, %1055
  %1058 = icmp eq i32 %1057, 2
  %1059 = zext i1 %1058 to i8
  store i8 %1059, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1060 = icmp eq i8 %1051, 0
  %1061 = select i1 %1060, i64 ptrtoint (i8* @data_1bc8 to i64), i64 ptrtoint (i8* @data_1cb3 to i64)
  br i1 %1050, label %inst_1cb3, label %inst_1bc8

inst_21a3:                                        ; preds = %inst_219b, %inst_21d0
  %1062 = load i8*, i8** @RAX_2216_56234d8e76a0
  store i8 10, i8* %1062
  %1063 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %1063, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1064 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %1064, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1f8c

inst_23a4:                                        ; preds = %inst_2449, %inst_2490, %inst_239a
  %1065 = phi %struct.Memory* [ %1523, %inst_2490 ], [ %1013, %inst_239a ], [ %2340, %inst_2449 ]
  %1066 = load i64, i64* bitcast (i8* @data_2080f8 to i64*)
  store i64 %1066, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_62ca, i8** @RDI_2296_56234d8e76a0
  store i64 2, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %1067 = load i8, i8* @DF_2075_56234d8dff60, align 1, !tbaa !1243
  %1068 = icmp eq i8 %1067, 0
  %1069 = select i1 %1068, i64 1, i64 -1
  %1070 = load i8*, i8** @RSI_2280_56234d8e76a0
  %1071 = load i64, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1240
  br label %1072

1072:                                             ; preds = %1072, %inst_23a4
  %1073 = phi i8* [ %1087, %1072 ], [ @data_62ca, %inst_23a4 ]
  %1074 = phi i64 [ %1083, %1072 ], [ %1071, %inst_23a4 ]
  %1075 = phi i8* [ %1088, %1072 ], [ %1070, %inst_23a4 ]
  %1076 = phi i64 [ %1082, %1072 ], [ %1066, %inst_23a4 ]
  %1077 = phi i64 [ %1084, %1072 ], [ 2, %inst_23a4 ]
  %1078 = load i8, i8* %1075
  %1079 = load i8, i8* %1073
  %1080 = sub i8 %1078, %1079
  %1081 = icmp eq i8 %1080, 0
  %1082 = add i64 %1069, %1076
  %1083 = add i64 %1069, %1074
  %1084 = add i64 %1077, -1
  %1085 = icmp ne i64 %1084, 0
  %1086 = and i1 %1085, %1081
  %1087 = inttoptr i64 %1083 to i8*
  %1088 = inttoptr i64 %1082 to i8*
  br i1 %1086, label %1072, label %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit17

_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit17: ; preds = %1072
  %1089 = lshr i8 %1080, 7
  %1090 = lshr i8 %1078, 7
  %1091 = icmp ult i8 %1078, %1079
  %1092 = zext i1 %1091 to i8
  %1093 = zext i8 %1080 to i32
  %1094 = call i32 @llvm.ctpop.i32(i32 %1093) #13, !range !1234
  %1095 = trunc i32 %1094 to i8
  %1096 = and i8 %1095, 1
  %1097 = xor i8 %1096, 1
  %1098 = xor i8 %1079, %1078
  %1099 = xor i8 %1098, %1080
  %1100 = lshr i8 %1099, 4
  %1101 = and i8 %1100, 1
  %1102 = zext i1 %1081 to i8
  %1103 = xor i8 %1089, %1090
  %1104 = lshr i8 %1079, 7
  %1105 = xor i8 %1104, %1090
  %1106 = add nuw nsw i8 %1103, %1105
  %1107 = icmp eq i8 %1106, 2
  %1108 = zext i1 %1107 to i8
  store i64 %1082, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1240
  store i64 %1083, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1240
  store i8 %1092, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 %1097, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 %1101, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i8 %1102, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 %1089, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 %1108, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i64 %1084, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %1109 = icmp eq i8 %1102, 0
  %1110 = select i1 %1109, i64 add (i64 ptrtoint (i8* @data_23a4 to i64), i64 27), i64 sub (i64 add (i64 ptrtoint (i8* @data_23a4 to i64), i64 27), i64 226)
  br i1 %1081, label %inst_22dd, label %inst_23bf

inst_25e2:                                        ; preds = %inst_25b2, %inst_25ef
  %1111 = phi %struct.Memory* [ %936, %inst_25ef ], [ %2439, %inst_25b2 ]
  %1112 = load i64, i64* @RSP_2312_56234d8dffa8
  %1113 = add i64 %1112, 140
  %1114 = load i8, i8* @R13_2424_56234d8dff60
  %1115 = inttoptr i64 %1113 to i8*
  %1116 = load i8, i8* %1115
  %1117 = and i8 %1116, %1114
  store i8 %1117, i8* %1115
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1118 = zext i8 %1117 to i32
  %1119 = call i32 @llvm.ctpop.i32(i32 %1118) #13, !range !1234
  %1120 = trunc i32 %1119 to i8
  %1121 = and i8 %1120, 1
  %1122 = xor i8 %1121, 1
  store i8 %1122, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1123 = icmp eq i8 %1117, 0
  %1124 = zext i1 %1123 to i8
  store i8 %1124, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1125 = lshr i8 %1117, 7
  store i8 %1125, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br label %inst_239a

inst_1fe3:                                        ; preds = %inst_1ffb, %inst_1fd5
  %1126 = phi i64 [ undef, %inst_1ffb ], [ %1827, %inst_1fd5 ]
  %1127 = add i64 %1126, 4
  %1128 = load i8*, i8** @RBX_2232_56234d8e76a0
  %1129 = load i64, i64* @RBX_2232_56234d8dffa8
  %1130 = add i64 1, %1129
  store i64 %1130, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1131 = add i64 %1127, 4
  %1132 = load i8, i8* %1128
  %1133 = zext i8 %1132 to i64
  store i64 %1133, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1feb

inst_23eb:                                        ; preds = %inst_24ed, %inst_23d7
  %1134 = phi %struct.Memory* [ %2254, %inst_24ed ], [ %798, %inst_23d7 ]
  %1135 = load i64, i64* @RSP_2312_56234d8dffa8
  %1136 = add i64 %1135, 4
  %1137 = inttoptr i64 %1136 to i32*
  %1138 = load i32, i32* %1137
  %1139 = zext i32 %1138 to i64
  store i64 %1139, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  store i32 %1138, i32* bitcast (i8* @data_2080f0 to i32*)
  br label %inst_2388

inst_1ff1:                                        ; preds = %inst_1fd0, %inst_1feb
  %1140 = phi i64 [ %1835, %inst_1fd0 ], [ %856, %inst_1feb ]
  %1141 = add i64 %1140, 4
  %1142 = sub i8 %849, 10
  %1143 = icmp eq i8 %1142, 0
  %1144 = zext i1 %1143 to i8
  %1145 = add i64 %1141, 6
  %1146 = add i64 %1145, 197
  %1147 = icmp eq i8 %1144, 0
  %1148 = select i1 %1147, i64 %1145, i64 %1146
  br i1 %1143, label %inst_20c0, label %inst_1ffb

inst_1cb3:                                        ; preds = %inst_1ba0
  %1149 = add i64 %1061, 4
  %1150 = load i64*, i64** @RSP_2312_56234d8e7800
  %1151 = load i32*, i32** @RSP_2312_56234d8ed000
  %1152 = load i64, i64* @RSP_2312_56234d8dffa8
  %1153 = bitcast i32* %1151 to i64*
  %1154 = getelementptr i32, i32* %1151, i32 12
  store i32 %1034, i32* %1154
  %1155 = add i64 %1149, 8
  %1156 = add i64 %1152, 176
  store i64 %1156, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1157 = add i64 %1155, 5
  store i64 1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1158 = add i64 %1157, 5
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1159 = add i64 %1158, 3
  store i64 %1156, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1160 = add i64 %1159, 8
  %1161 = getelementptr i64, i64* %1153, i32 16
  store i64 %1156, i64* %1161
  %1162 = add i64 %1160, 5
  %1163 = add i64 %1152, -8
  %1164 = getelementptr i64, i64* %1150, i32 -1
  store i64 %1162, i64* %1164
  store i64 %1163, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1165 = call %struct.Memory* @ext_208390___fxstat(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1033)
  %1166 = load i32, i32* @RAX_2216_56234d8dff90
  %1167 = lshr i32 %1166, 31
  %1168 = trunc i32 %1167 to i8
  %1169 = icmp eq i8 %1168, 0
  %1170 = select i1 %1169, i64 ptrtoint (i8* @data_1ce1 to i64), i64 ptrtoint (i8* @data_26d8 to i64)
  %1171 = icmp eq i8 %1168, 1
  br i1 %1171, label %inst_26d8, label %inst_1ce1

inst_1bc8:                                        ; preds = %inst_1ba0
  %1172 = sub i32 %1034, 98
  %1173 = icmp eq i32 %1172, 0
  br i1 %1173, label %inst_1c99, label %inst_1bd1

inst_1bd1:                                        ; preds = %inst_1bc8
  %1174 = add i64 %1061, 3
  %1175 = lshr i32 %1172, 31
  %1176 = trunc i32 %1175 to i8
  %1177 = xor i32 %1175, %1054
  %1178 = add nuw nsw i32 %1177, %1054
  %1179 = icmp eq i32 %1178, 2
  %1180 = add i64 %1174, 6
  %1181 = add i64 %1180, 2
  %1182 = add i64 %1181, 37
  %1183 = icmp ne i8 %1176, 0
  %1184 = xor i1 %1183, %1179
  %1185 = select i1 %1184, i64 %1182, i64 %1181
  %1186 = add i64 %1185, 3
  br i1 %1184, label %inst_1bf8, label %inst_1bd3

inst_1bf8:                                        ; preds = %inst_1bd1
  %1187 = sub i32 %1034, 65
  %1188 = icmp eq i32 %1187, 0
  br i1 %1188, label %inst_1c15, label %inst_1bfd

inst_1bd3:                                        ; preds = %inst_1bd1
  %1189 = sub i32 %1034, 115
  %1190 = icmp eq i32 %1189, 0
  br i1 %1190, label %inst_1c42, label %inst_1bd8

inst_1c42:                                        ; preds = %inst_1bd3
  %1191 = load i64, i64* @RSP_2312_56234d8dffa8
  %1192 = add i64 %1191, 86
  %1193 = inttoptr i64 %1192 to i8*
  store i8 1, i8* %1193
  br label %inst_1ba0

inst_1bd8:                                        ; preds = %inst_1bd3
  %1194 = lshr i32 %1189, 31
  %1195 = trunc i32 %1194 to i8
  %1196 = xor i32 %1194, %1054
  %1197 = add nuw nsw i32 %1196, %1054
  %1198 = icmp eq i32 %1197, 2
  %1199 = add i64 %1186, 2
  %1200 = add i64 %1199, 2
  %1201 = add i64 %1200, 80
  %1202 = icmp ne i8 %1195, 0
  %1203 = xor i1 %1202, %1198
  %1204 = select i1 %1203, i64 %1201, i64 %1200
  %1205 = add i64 %1204, 3
  br i1 %1203, label %inst_1c2a, label %inst_1bda

inst_1c2a:                                        ; preds = %inst_1bd8
  %1206 = sub i32 %1034, 101
  %1207 = icmp eq i32 %1206, 0
  br i1 %1207, label %inst_1c1b, label %inst_1c2f

inst_1bda:                                        ; preds = %inst_1bd8
  %1208 = sub i32 %1034, 117
  %1209 = icmp eq i32 %1208, 0
  %1210 = zext i1 %1209 to i8
  %1211 = add i64 %1205, 2
  %1212 = sub i64 %1211, 63
  %1213 = icmp eq i8 %1210, 0
  %1214 = select i1 %1213, i64 %1211, i64 %1212
  br i1 %1209, label %inst_1ba0, label %inst_1bdf

inst_1bdf:                                        ; preds = %inst_1bda
  %1215 = lshr i32 %1208, 31
  %1216 = trunc i32 %1215 to i8
  %1217 = xor i32 %1215, %1054
  %1218 = add nuw nsw i32 %1217, %1054
  %1219 = icmp eq i32 %1218, 2
  %1220 = icmp ne i8 %1216, 0
  %1221 = xor i1 %1220, %1219
  br i1 %1221, label %inst_1ca3, label %inst_1be5

inst_1ca3:                                        ; preds = %inst_1bdf
  store i64 1, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %1222 = load i64, i64* @RSP_2312_56234d8dffa8
  %1223 = add i64 %1222, 54
  %1224 = inttoptr i64 %1223 to i8*
  store i8 1, i8* %1224
  br label %inst_1ba0

inst_1be5:                                        ; preds = %inst_1bdf
  %1225 = add i64 %1214, 6
  %1226 = add i64 %1225, 3
  %1227 = sub i32 %1034, 118
  %1228 = icmp ult i32 %1034, 118
  %1229 = zext i1 %1228 to i8
  store i8 %1229, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1230 = and i32 %1227, 255
  %1231 = call i32 @llvm.ctpop.i32(i32 %1230) #13, !range !1234
  %1232 = trunc i32 %1231 to i8
  %1233 = and i8 %1232, 1
  %1234 = xor i8 %1233, 1
  store i8 %1234, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1235 = xor i64 118, %1035
  %1236 = trunc i64 %1235 to i32
  %1237 = xor i32 %1227, %1236
  %1238 = lshr i32 %1237, 4
  %1239 = trunc i32 %1238 to i8
  %1240 = and i8 %1239, 1
  store i8 %1240, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1241 = icmp eq i32 %1227, 0
  %1242 = zext i1 %1241 to i8
  store i8 %1242, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1243 = lshr i32 %1227, 31
  %1244 = trunc i32 %1243 to i8
  store i8 %1244, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1245 = xor i32 %1243, %1054
  %1246 = add nuw nsw i32 %1245, %1054
  %1247 = icmp eq i32 %1246, 2
  %1248 = zext i1 %1247 to i8
  store i8 %1248, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1249 = add i64 %1226, 6
  %1250 = add i64 %1249, 2779
  %1251 = icmp eq i8 %1242, 0
  %1252 = select i1 %1251, i64 %1250, i64 %1249
  br i1 %1251, label %inst_26c9, label %inst_1bee

inst_1bee:                                        ; preds = %inst_1be5
  %1253 = load i64, i64* @RSP_2312_56234d8dffa8
  %1254 = add i64 %1253, 54
  %1255 = inttoptr i64 %1254 to i8*
  store i8 1, i8* %1255
  br label %inst_1ba0

inst_1c15:                                        ; preds = %inst_1bf8
  store i64 1, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1c1b

inst_1bfd:                                        ; preds = %inst_1bf8
  %1256 = lshr i32 %1187, 31
  %1257 = trunc i32 %1256 to i8
  %1258 = xor i32 %1256, %1054
  %1259 = add nuw nsw i32 %1258, %1054
  %1260 = icmp eq i32 %1259, 2
  %1261 = add i64 %1186, 2
  %1262 = add i64 %1261, 2
  %1263 = add i64 %1262, 77
  %1264 = icmp ne i8 %1257, 0
  %1265 = xor i1 %1264, %1260
  %1266 = select i1 %1265, i64 %1263, i64 %1262
  br i1 %1265, label %inst_1c4c, label %inst_1bff

inst_1c4c:                                        ; preds = %inst_1bfd
  %1267 = add i64 %1266, 5
  %1268 = sub i32 %1034, -131
  %1269 = icmp eq i32 %1268, 0
  %1270 = zext i1 %1269 to i8
  %1271 = add i64 %1267, 4
  %1272 = load i32*, i32** @RSP_2312_56234d8ed000
  %1273 = load i64, i64* @RSP_2312_56234d8dffa8
  %1274 = getelementptr i32, i32* %1272, i32 12
  store i32 %1034, i32* %1274
  %1275 = add i64 %1271, 6
  %1276 = add i64 %1275, 2612
  %1277 = icmp eq i8 %1270, 0
  %1278 = select i1 %1277, i64 %1276, i64 %1275
  br i1 %1277, label %inst_268f, label %inst_1c5b

inst_1bff:                                        ; preds = %inst_1bfd
  %1279 = sub i32 %1034, 69
  %1280 = icmp eq i32 %1279, 0
  br i1 %1280, label %inst_1c20, label %inst_1c04

inst_1c04:                                        ; preds = %inst_1bff
  %1281 = add i64 %1266, 3
  %1282 = add i64 %1281, 2
  %1283 = add i64 %1282, 3
  %1284 = sub i32 %1034, 84
  %1285 = icmp ult i32 %1034, 84
  %1286 = zext i1 %1285 to i8
  store i8 %1286, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1287 = and i32 %1284, 255
  %1288 = call i32 @llvm.ctpop.i32(i32 %1287) #13, !range !1234
  %1289 = trunc i32 %1288 to i8
  %1290 = and i8 %1289, 1
  %1291 = xor i8 %1290, 1
  store i8 %1291, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1292 = xor i64 84, %1035
  %1293 = trunc i64 %1292 to i32
  %1294 = xor i32 %1284, %1293
  %1295 = lshr i32 %1294, 4
  %1296 = trunc i32 %1295 to i8
  %1297 = and i8 %1296, 1
  store i8 %1297, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1298 = icmp eq i32 %1284, 0
  %1299 = zext i1 %1298 to i8
  store i8 %1299, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1300 = lshr i32 %1284, 31
  %1301 = trunc i32 %1300 to i8
  store i8 %1301, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1302 = xor i32 %1300, %1054
  %1303 = add nuw nsw i32 %1302, %1054
  %1304 = icmp eq i32 %1303, 2
  %1305 = zext i1 %1304 to i8
  store i8 %1305, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1306 = add i64 %1283, 6
  %1307 = add i64 %1306, 2748
  %1308 = icmp eq i8 %1299, 0
  %1309 = select i1 %1308, i64 %1307, i64 %1306
  br i1 %1308, label %inst_26c9, label %inst_1c0d

inst_1c0d:                                        ; preds = %inst_1c04
  store i64 1, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1ba0

inst_1c2f:                                        ; preds = %inst_1c2a
  %1310 = add i64 %1205, 2
  %1311 = add i64 %1310, 3
  %1312 = sub i32 %1034, 110
  %1313 = icmp ult i32 %1034, 110
  %1314 = zext i1 %1313 to i8
  store i8 %1314, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1315 = and i32 %1312, 255
  %1316 = call i32 @llvm.ctpop.i32(i32 %1315) #13, !range !1234
  %1317 = trunc i32 %1316 to i8
  %1318 = and i8 %1317, 1
  %1319 = xor i8 %1318, 1
  store i8 %1319, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1320 = xor i64 110, %1035
  %1321 = trunc i64 %1320 to i32
  %1322 = xor i32 %1312, %1321
  %1323 = lshr i32 %1322, 4
  %1324 = trunc i32 %1323 to i8
  %1325 = and i8 %1324, 1
  store i8 %1325, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1326 = icmp eq i32 %1312, 0
  %1327 = zext i1 %1326 to i8
  store i8 %1327, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1328 = lshr i32 %1312, 31
  %1329 = trunc i32 %1328 to i8
  store i8 %1329, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1330 = xor i32 %1328, %1054
  %1331 = add nuw nsw i32 %1330, %1054
  %1332 = icmp eq i32 %1331, 2
  %1333 = zext i1 %1332 to i8
  store i8 %1333, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1334 = add i64 %1311, 6
  %1335 = add i64 %1334, 2705
  %1336 = icmp eq i8 %1327, 0
  %1337 = select i1 %1336, i64 %1335, i64 %1334
  br i1 %1336, label %inst_26c9, label %inst_1c38

inst_268f:                                        ; preds = %inst_1c4c
  %1338 = add i64 %1278, 5
  %1339 = sub i32 %1034, -130
  %1340 = icmp ult i32 %1034, -130
  %1341 = zext i1 %1340 to i8
  store i8 %1341, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1342 = and i32 %1339, 255
  %1343 = call i32 @llvm.ctpop.i32(i32 %1342) #13, !range !1234
  %1344 = trunc i32 %1343 to i8
  %1345 = and i8 %1344, 1
  %1346 = xor i8 %1345, 1
  store i8 %1346, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1347 = xor i64 -130, %1035
  %1348 = trunc i64 %1347 to i32
  %1349 = xor i32 %1339, %1348
  %1350 = lshr i32 %1349, 4
  %1351 = trunc i32 %1350 to i8
  %1352 = and i8 %1351, 1
  store i8 %1352, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1353 = icmp eq i32 %1339, 0
  %1354 = zext i1 %1353 to i8
  store i8 %1354, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1355 = lshr i32 %1339, 31
  %1356 = trunc i32 %1355 to i8
  store i8 %1356, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1357 = xor i32 %1355, %1054
  %1358 = add nuw nsw i32 %1357, %1055
  %1359 = icmp eq i32 %1358, 2
  %1360 = zext i1 %1359 to i8
  store i8 %1360, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1361 = add i64 %1338, 2
  %1362 = add i64 %1361, 51
  %1363 = icmp eq i8 %1354, 0
  %1364 = select i1 %1363, i64 %1362, i64 %1361
  br i1 %1363, label %inst_26c9, label %inst_2696

inst_1c5b:                                        ; preds = %inst_1c4c
  %1365 = add i64 %1278, 4
  %1366 = sub i64 %1273, 8
  %1367 = add i64 %1365, 7
  %1368 = load i64, i64* @stdout
  store i64 %1368, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1369 = add i64 %1367, 7
  %1370 = load i64, i64* bitcast (i8** @data_208038 to i64*)
  store i64 %1370, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %1371 = add i64 %1369, 2
  %1372 = add i64 %1366, -8
  %1373 = inttoptr i64 %1372 to i64*
  store i64 0, i64* %1373
  %1374 = add i64 %1371, 7
  store i8* @data_5cee, i8** @R9_2360_56234d8e76a0
  %1375 = add i64 %1374, 7
  store i8* @data_5d02, i8** @R8_2344_56234d8e76a0
  %1376 = add i64 %1375, 7
  store i8* @data_5cca, i8** @RDX_2264_56234d8e76a0
  %1377 = add i64 %1376, 7
  store i8* @data_5c50, i8** @RSI_2280_56234d8e76a0
  %1378 = add i64 %1377, 2
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1379 = add i64 %1378, 5
  %1380 = add i64 %1372, -8
  %1381 = getelementptr i64, i64* %1373, i32 -1
  store i64 %1379, i64* %1381
  store i64 %1380, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1382 = call %struct.Memory* @sub_50b0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1033)
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1383 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1384 = add i64 %1383, -8
  %1385 = inttoptr i64 %1384 to i64*
  store i64 ptrtoint (i8* @data_1c99 to i64), i64* %1385
  store i64 %1384, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1386 = call %struct.Memory* @ext_2083f0_exit(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1382)
  br label %inst_1c99

inst_1ce1:                                        ; preds = %inst_1cb3
  %1387 = add i64 %1170, 8
  %1388 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1389 = bitcast i8* %1388 to i64*
  %1390 = bitcast i8* %1388 to i32*
  %1391 = getelementptr i64, i64* %1389, i32 29
  %1392 = load i64, i64* %1391
  %1393 = add i64 %1387, 10
  %1394 = add i64 %1393, 7
  %1395 = load i32, i32* @optind
  %1396 = sext i32 %1395 to i64
  %1397 = add i64 %1394, 8
  %1398 = getelementptr i8, i8* %1388, i32 142
  store i8 0, i8* %1398
  %1399 = add i64 %1397, 8
  %1400 = getelementptr i8, i8* %1388, i32 140
  store i8 1, i8* %1400
  %1401 = add i64 %1399, 7
  %1402 = sub i64 %1392, 131072
  store i64 %1402, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1403 = add i64 %1401, 5
  %1404 = getelementptr i64, i64* %1389, i32 11
  store i64 %1396, i64* %1404
  %1405 = add i64 %1403, 3
  %1406 = sub i64 %1402, 2305843009213562880
  %1407 = icmp ult i64 %1402, 2305843009213562880
  %1408 = zext i1 %1407 to i8
  %1409 = icmp eq i64 %1406, 0
  %1410 = zext i1 %1409 to i8
  %1411 = add i64 %1405, 5
  %1412 = add i64 %1411, 4
  %1413 = or i8 %1410, %1408
  %1414 = icmp eq i8 %1413, 0
  %1415 = select i1 %1414, i64 131072, i64 %1392
  store i64 %1415, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1416 = add i64 %1412, 3
  %1417 = load i32, i32* @RBX_2232_56234d8dff90
  %1418 = zext i32 %1417 to i64
  %1419 = shl i64 %1418, 32
  %1420 = ashr exact i64 %1419, 32
  %1421 = add i64 %1416, 5
  %1422 = getelementptr i64, i64* %1389, i32 13
  store i64 %1420, i64* %1422
  %1423 = add i64 %1421, 8
  %1424 = getelementptr i64, i64* %1389, i32 22
  %1425 = load i64, i64* %1424
  %1426 = add i64 %1423, 8
  %1427 = getelementptr i64, i64* %1389, i32 18
  store i64 %1425, i64* %1427
  %1428 = add i64 %1426, 8
  %1429 = getelementptr i64, i64* %1389, i32 23
  %1430 = load i64, i64* %1429
  %1431 = add i64 %1428, 8
  %1432 = getelementptr i64, i64* %1389, i32 19
  store i64 %1430, i64* %1432
  %1433 = add i64 %1431, 7
  %1434 = getelementptr i32, i32* %1390, i32 50
  %1435 = load i32, i32* %1434
  %1436 = zext i32 %1435 to i64
  %1437 = add i64 %1433, 5
  %1438 = and i64 61440, %1436
  %1439 = add i64 %1437, 7
  %1440 = trunc i64 %1438 to i32
  %1441 = getelementptr i32, i32* %1390, i32 34
  store i32 %1440, i32* %1441
  %1442 = add i64 %1439, 5
  %1443 = getelementptr i8, i8* %1388, i32 55
  %1444 = load i8, i8* %1443
  %1445 = add i64 %1442, 4
  %1446 = getelementptr i8, i8* %1388, i32 85
  %1447 = load i8, i8* %1446
  %1448 = or i8 %1447, %1444
  %1449 = add i64 %1445, 4
  %1450 = getelementptr i32, i32* %1390, i32 20
  %1451 = load i32, i32* %1450
  %1452 = sub i32 %1451, %1395
  %1453 = icmp ult i32 %1451, %1395
  %1454 = zext i1 %1453 to i8
  store i8 %1454, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1455 = icmp eq i32 %1452, 0
  %1456 = zext i1 %1455 to i8
  store i8 %1456, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1457 = lshr i32 %1452, 31
  %1458 = trunc i32 %1457 to i8
  %1459 = lshr i32 %1451, 31
  %1460 = lshr i32 %1395, 31
  %1461 = xor i32 %1459, %1460
  %1462 = xor i32 %1457, %1459
  %1463 = add nuw nsw i32 %1462, %1461
  %1464 = icmp eq i32 %1463, 2
  %1465 = add i64 %1449, 7
  %1466 = getelementptr i8, i8* %1388, i32 143
  store i8 %1448, i8* %1466
  %1467 = add i64 %1465, 7
  %1468 = add i64 %1467, 7
  store i64 ptrtoint (i8* @data_62ca to i64), i64* bitcast (i8* @data_2080f8 to i64*)
  %1469 = add i64 %1468, 6
  %1470 = add i64 %1469, 2206
  %1471 = icmp ne i8 %1458, 0
  %1472 = xor i1 %1471, %1464
  %1473 = or i1 %1455, %1472
  %1474 = select i1 %1473, i64 %1470, i64 %1469
  br i1 %1473, label %inst_2623, label %inst_1d85

inst_2289:                                        ; preds = %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit
  %1475 = add i64 %1005, 2
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1476 = add i64 %1475, 3
  store i64 %945, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1477 = add i64 %1476, 2
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1478 = add i64 %1477, 5
  %1479 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1480 = add i64 %1479, -8
  %1481 = inttoptr i64 %1480 to i64*
  store i64 %1478, i64* %1481
  store i64 %1480, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1482 = call %struct.Memory* @ext_2083d0_open(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %944)
  %1483 = load i32, i32* @RAX_2216_56234d8dff90
  %1484 = zext i32 %1483 to i64
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1485 = and i32 %1483, 255
  %1486 = call i32 @llvm.ctpop.i32(i32 %1485) #13, !range !1234
  %1487 = trunc i32 %1486 to i8
  %1488 = and i8 %1487, 1
  %1489 = xor i8 %1488, 1
  store i8 %1489, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1490 = icmp eq i32 %1483, 0
  %1491 = zext i1 %1490 to i8
  store i8 %1491, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1492 = lshr i32 %1483, 31
  %1493 = trunc i32 %1492 to i8
  store i8 %1493, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1494 = and i64 %1484, 4294967295
  store i64 %1494, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i32 %1483, i32* bitcast (i8* @data_2080f4 to i32*)
  %1495 = icmp eq i8 %1493, 0
  %1496 = select i1 %1495, i64 ptrtoint (i8* @data_1dd0 to i64), i64 ptrtoint (i8* @data_22a5 to i64)
  br i1 %1495, label %inst_1dd0, label %inst_22a5

inst_1dbe:                                        ; preds = %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit
  %1497 = add i64 %1005, 10
  store i32 0, i32* bitcast (i8* @data_2080f4 to i32*)
  %1498 = add i64 %1497, 8
  %1499 = load i64, i64* @RSP_2312_56234d8dffa8
  %1500 = add i64 %1499, 142
  %1501 = inttoptr i64 %1500 to i8*
  store i8 1, i8* %1501
  br label %inst_1dd0

inst_2490:                                        ; preds = %inst_1dd0
  %1502 = add i64 %826, 7
  %1503 = load i64, i64* bitcast (i8* @data_2080f8 to i64*)
  store i64 %1503, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1504 = add i64 %1502, 5
  store i64 3, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1505 = add i64 %1504, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1506 = add i64 %1505, 5
  %1507 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1508 = add i64 %1507, -8
  %1509 = inttoptr i64 %1508 to i64*
  store i64 %1506, i64* %1509
  store i64 %1508, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1510 = call %struct.Memory* @sub_4950(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %821)
  %1511 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %1511, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1512 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1513 = add i64 %1512, -8
  %1514 = inttoptr i64 %1513 to i64*
  store i64 ptrtoint (i8* @data_24ab to i64), i64* %1514
  store i64 %1513, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1515 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1510)
  %1516 = load i32*, i32** @RAX_2216_56234d8ed000
  %1517 = load i32, i32* %1516
  %1518 = zext i32 %1517 to i64
  store i64 %1518, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_6284, i8** @RDX_2264_56234d8e76a0
  %1519 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %1519, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1520 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1521 = add i64 %1520, -8
  %1522 = inttoptr i64 %1521 to i64*
  store i64 ptrtoint (i8* @data_24c0 to i64), i64* %1522
  store i64 %1521, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1523 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1515)
  %1524 = load i64, i64* @RSP_2312_56234d8dffa8
  %1525 = add i64 %1524, 140
  %1526 = inttoptr i64 %1525 to i8*
  store i8 0, i8* %1526
  br label %inst_23a4

inst_1dec:                                        ; preds = %inst_1dd0
  %1527 = add i64 %826, 8
  %1528 = load i64*, i64** @RSP_2312_56234d8e7800
  %1529 = load i64, i64* @RSP_2312_56234d8dffa8
  %1530 = getelementptr i64, i64* %1528, i32 29
  %1531 = load i64, i64* %1530
  %1532 = add i64 %1527, 10
  %1533 = add i64 %1532, 2
  %1534 = load i32, i32* @RBX_2232_56234d8dff90
  %1535 = zext i32 %1534 to i64
  %1536 = and i64 %1535, 4294967295
  store i64 %1536, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1537 = add i64 %1533, 7
  %1538 = sub i64 %1531, 131072
  %1539 = add i64 %1537, 3
  %1540 = sub i64 %1538, 2305843009213562880
  %1541 = icmp ult i64 %1538, 2305843009213562880
  %1542 = zext i1 %1541 to i8
  %1543 = icmp eq i64 %1540, 0
  %1544 = zext i1 %1543 to i8
  %1545 = add i64 %1539, 5
  %1546 = add i64 %1545, 4
  %1547 = or i8 %1544, %1542
  %1548 = icmp eq i8 %1547, 0
  %1549 = select i1 %1548, i64 131072, i64 %1531
  store i64 %1549, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1550 = add i64 %1546, 2
  store i64 0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1551 = add i64 %1550, 2
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1552 = add i64 %1551, 5
  store i64 2, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %1553 = add i64 %1552, 5
  %1554 = getelementptr i64, i64* %1528, i32 7
  store i64 %1549, i64* %1554
  %1555 = add i64 %1553, 5
  %1556 = add i64 %1529, -8
  %1557 = getelementptr i64, i64* %1528, i32 -1
  store i64 %1555, i64* %1557
  store i64 %1556, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1558 = call %struct.Memory* @sub_2d50(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %821)
  %1559 = load i64*, i64** @RSP_2312_56234d8e7800
  %1560 = load i32*, i32** @RSP_2312_56234d8ed000
  %1561 = getelementptr i32, i32* %1560, i32 34
  %1562 = load i32, i32* %1561
  %1563 = sub i32 %1562, 32768
  %1564 = icmp eq i32 %1563, 0
  %1565 = zext i1 %1564 to i8
  %1566 = icmp eq i8 %1565, 0
  %1567 = select i1 %1566, i64 ptrtoint (i8* @data_1e37 to i64), i64 ptrtoint (i8* @data_23fd to i64)
  br i1 %1564, label %inst_23fd, label %inst_1e37

inst_23fd:                                        ; preds = %inst_1dec
  %1568 = bitcast i32* %1560 to i64*
  %1569 = add i64 %1567, 8
  %1570 = getelementptr i64, i64* %1559, i32 18
  %1571 = load i64, i64* %1570
  %1572 = add i64 %1569, 8
  %1573 = getelementptr i64, i64* %1568, i32 22
  %1574 = load i64, i64* %1573
  %1575 = sub i64 %1574, %1571
  %1576 = icmp eq i64 %1575, 0
  %1577 = zext i1 %1576 to i8
  %1578 = add i64 %1572, 6
  %1579 = sub i64 %1578, 1500
  %1580 = icmp eq i8 %1577, 0
  %1581 = select i1 %1580, i64 %1579, i64 %1578
  br i1 %1580, label %inst_1e37, label %inst_2413

inst_1e4a:                                        ; preds = %inst_1e37
  %1582 = add i64 %96, 6
  %1583 = getelementptr i8, i8* %82, i32 54
  %1584 = load i8, i8* %1583
  %1585 = zext i8 %1584 to i64
  %1586 = add i64 %1582, 3
  %1587 = trunc i64 %1585 to i32
  %1588 = zext i32 %1587 to i64
  %1589 = load i32, i32* @R12_2408_56234d8dff90
  %1590 = zext i32 %1589 to i64
  %1591 = or i64 %1590, %1588
  %1592 = and i64 %1591, 4294967295
  store i64 %1592, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %1593 = add i64 %1586, 5
  %1594 = trunc i64 %1592 to i8
  %1595 = getelementptr i8, i8* %82, i32 86
  %1596 = load i8, i8* %1595
  %1597 = or i8 %1596, %1594
  store i8 %1597, i8* @R13_2424_56234d8dff60, align 1, !tbaa !1240
  %1598 = icmp eq i8 %1597, 0
  %1599 = zext i1 %1598 to i8
  %1600 = add i64 %1593, 6
  %1601 = add i64 %1600, 1770
  %1602 = icmp eq i8 %1599, 0
  %1603 = select i1 %1602, i64 %1600, i64 %1601
  br i1 %1598, label %inst_2548, label %inst_1e5e

inst_21e0:                                        ; preds = %inst_1f26
  %1604 = add i64 %630, 6
  %1605 = load i32, i32* bitcast (i8* @data_2080f4 to i32*)
  %1606 = zext i32 %1605 to i64
  store i64 %1606, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1607 = add i64 %1604, 5
  %1608 = getelementptr i64, i64* %618, i32 12
  %1609 = load i64, i64* %1608
  store i64 %1609, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1610 = add i64 %1607, 2
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1611 = add i64 %1610, 5
  store i8* @data_541b, i8** @RSI_2280_56234d8e76a0
  %1612 = add i64 %1611, 2
  %1613 = and i64 %1606, 4294967295
  store i64 %1613, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1614 = add i64 %1612, 5
  %1615 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1616 = add i64 %1615, -8
  %1617 = inttoptr i64 %1616 to i64*
  store i64 %1614, i64* %1617
  store i64 %1616, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1618 = call %struct.Memory* @ext_208318_ioctl(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %616)
  %1619 = load i32, i32* @RAX_2216_56234d8dff90
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1620 = and i32 %1619, 255
  %1621 = call i32 @llvm.ctpop.i32(i32 %1620) #13, !range !1234
  %1622 = trunc i32 %1621 to i8
  %1623 = and i8 %1622, 1
  %1624 = xor i8 %1623, 1
  store i8 %1624, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1625 = icmp eq i32 %1619, 0
  %1626 = zext i1 %1625 to i8
  store i8 %1626, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1627 = lshr i32 %1619, 31
  %1628 = trunc i32 %1627 to i8
  store i8 %1628, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1629 = icmp eq i8 %1628, 0
  %1630 = select i1 %1629, i64 ptrtoint (i8* @data_21fd to i64), i64 ptrtoint (i8* @data_2250 to i64)
  %1631 = icmp eq i8 %1628, 1
  br i1 %1631, label %inst_2250, label %inst_21fd

inst_2223:                                        ; preds = %inst_1f3c
  %1632 = add i64 %686, 5
  store i64 %657, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1633 = add i64 %1632, 3
  store i64 %658, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1634 = add i64 %1633, 5
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1635 = add i64 %1634, 3
  store i64 %657, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1636 = add i64 %1635, 5
  %1637 = add i64 %654, -8
  %1638 = inttoptr i64 %1637 to i64*
  store i64 %1636, i64* %1638
  store i64 %1637, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1639 = call %struct.Memory* @sub_2d90(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %650)
  %1640 = load i64, i64* @RBX_2232_56234d8dffa8
  %1641 = load i64, i64* @RAX_2216_56234d8dffa8
  %1642 = sub i64 %1640, %1641
  %1643 = icmp ult i64 %1640, %1641
  %1644 = zext i1 %1643 to i8
  store i8 %1644, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1645 = trunc i64 %1642 to i32
  %1646 = and i32 %1645, 255
  %1647 = call i32 @llvm.ctpop.i32(i32 %1646) #13, !range !1234
  %1648 = trunc i32 %1647 to i8
  %1649 = and i8 %1648, 1
  %1650 = xor i8 %1649, 1
  store i8 %1650, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1651 = xor i64 %1641, %1640
  %1652 = xor i64 %1651, %1642
  %1653 = lshr i64 %1652, 4
  %1654 = trunc i64 %1653 to i8
  %1655 = and i8 %1654, 1
  store i8 %1655, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1656 = icmp eq i64 %1642, 0
  %1657 = zext i1 %1656 to i8
  store i8 %1657, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1658 = lshr i64 %1642, 63
  %1659 = trunc i64 %1658 to i8
  store i8 %1659, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1660 = lshr i64 %1640, 63
  %1661 = lshr i64 %1641, 63
  %1662 = xor i64 %1661, %1660
  %1663 = xor i64 %1658, %1660
  %1664 = add nuw nsw i64 %1663, %1662
  %1665 = icmp eq i64 %1664, 2
  %1666 = zext i1 %1665 to i8
  store i8 %1666, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1667 = icmp eq i8 %1657, 0
  %1668 = select i1 %1667, i64 ptrtoint (i8* @data_2241 to i64), i64 ptrtoint (i8* @data_1f4a to i64)
  br i1 %1656, label %inst_1f4a, label %inst_2241

inst_2337:                                        ; preds = %inst_1f50
  %1669 = add i64 %804, 7
  %1670 = load i64, i64* bitcast (i8* @data_2080f8 to i64*)
  store i64 %1670, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1671 = add i64 %1669, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1672 = add i64 %1671, 3
  %1673 = load i64, i64* @R15_2456_56234d8dffa8
  store i64 %1673, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1674 = add i64 %1672, 5
  store i64 3, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1675 = add i64 %1674, 3
  %1676 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %1676, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1677 = add i64 %1675, 3
  store i64 %1673, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %1678 = add i64 %1677, 5
  %1679 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1680 = add i64 %1679, -8
  %1681 = inttoptr i64 %1680 to i64*
  store i64 %1678, i64* %1681
  store i64 %1680, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1682 = call %struct.Memory* @sub_4950(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %798)
  %1683 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %1683, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1684 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1685 = add i64 %1684, -8
  %1686 = inttoptr i64 %1685 to i64*
  store i64 ptrtoint (i8* @data_235b to i64), i64* %1686
  store i64 %1685, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1687 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1682)
  %1688 = load i32*, i32** @RAX_2216_56234d8ed000
  %1689 = load i32, i32* %1688
  %1690 = zext i32 %1689 to i64
  store i64 %1690, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_6284, i8** @RDX_2264_56234d8e76a0
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1691 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %1691, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %1692 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1693 = add i64 %1692, -8
  %1694 = inttoptr i64 %1693 to i64*
  store i64 ptrtoint (i8* @data_2370 to i64), i64* %1694
  store i64 %1693, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1695 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1687)
  %1696 = load i64, i64* @R14_2440_56234d8dffa8
  %1697 = load i64, i64* @RSP_2312_56234d8dffa8
  %1698 = add i64 %1697, 32
  %1699 = inttoptr i64 %1698 to i64*
  %1700 = load i64, i64* %1699
  %1701 = sub i64 %1696, %1700
  store i64 %1701, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %1702 = icmp ugt i64 %1700, %1696
  %1703 = zext i1 %1702 to i8
  store i8 %1703, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1704 = trunc i64 %1701 to i32
  %1705 = and i32 %1704, 255
  %1706 = call i32 @llvm.ctpop.i32(i32 %1705) #13, !range !1234
  %1707 = trunc i32 %1706 to i8
  %1708 = and i8 %1707, 1
  %1709 = xor i8 %1708, 1
  store i8 %1709, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1710 = xor i64 %1700, %1696
  %1711 = xor i64 %1710, %1701
  %1712 = lshr i64 %1711, 4
  %1713 = trunc i64 %1712 to i8
  %1714 = and i8 %1713, 1
  store i8 %1714, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1715 = icmp eq i64 %1701, 0
  %1716 = zext i1 %1715 to i8
  store i8 %1716, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1717 = lshr i64 %1701, 63
  %1718 = trunc i64 %1717 to i8
  store i8 %1718, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1719 = lshr i64 %1696, 63
  %1720 = lshr i64 %1700, 63
  %1721 = xor i64 %1720, %1719
  %1722 = xor i64 %1717, %1719
  %1723 = add nuw nsw i64 %1722, %1721
  %1724 = icmp eq i64 %1723, 2
  %1725 = zext i1 %1724 to i8
  store i8 %1725, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1726 = icmp eq i8 %1716, 0
  %1727 = select i1 %1726, i64 ptrtoint (i8* @data_24cd to i64), i64 ptrtoint (i8* @data_237b to i64)
  br i1 %1726, label %inst_24cd, label %inst_237b

inst_1f6b:                                        ; preds = %inst_1f50
  %1728 = add i64 %804, 3
  %1729 = icmp eq i64 %799, 0
  %1730 = zext i1 %1729 to i8
  %1731 = add i64 %1728, 6
  %1732 = add i64 %1731, 1123
  %1733 = icmp eq i8 %1730, 0
  %1734 = select i1 %1733, i64 %1731, i64 %1732
  br i1 %1729, label %inst_23d7, label %inst_1f74

inst_23d7:                                        ; preds = %inst_1f6b
  %1735 = load i64, i64* @R15_2456_56234d8dffa8
  store i64 %1735, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %1736 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %1736, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1737 = load i64, i64* @RSP_2312_56234d8dffa8
  %1738 = add i64 %1737, 32
  %1739 = inttoptr i64 %1738 to i64*
  %1740 = load i64, i64* %1739
  %1741 = sub i64 %1735, %1740
  store i64 %1741, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1742 = icmp ugt i64 %1740, %1735
  %1743 = zext i1 %1742 to i8
  store i8 %1743, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1744 = trunc i64 %1741 to i32
  %1745 = and i32 %1744, 255
  %1746 = call i32 @llvm.ctpop.i32(i32 %1745) #13, !range !1234
  %1747 = trunc i32 %1746 to i8
  %1748 = and i8 %1747, 1
  %1749 = xor i8 %1748, 1
  store i8 %1749, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1750 = xor i64 %1740, %1735
  %1751 = xor i64 %1750, %1741
  %1752 = lshr i64 %1751, 4
  %1753 = trunc i64 %1752 to i8
  %1754 = and i8 %1753, 1
  store i8 %1754, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1755 = icmp eq i64 %1741, 0
  %1756 = zext i1 %1755 to i8
  store i8 %1756, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1757 = lshr i64 %1741, 63
  %1758 = trunc i64 %1757 to i8
  store i8 %1758, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1759 = lshr i64 %1735, 63
  %1760 = lshr i64 %1740, 63
  %1761 = xor i64 %1760, %1759
  %1762 = xor i64 %1757, %1759
  %1763 = add nuw nsw i64 %1762, %1761
  %1764 = icmp eq i64 %1763, 2
  %1765 = zext i1 %1764 to i8
  store i8 %1765, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1766 = icmp eq i8 %1756, 0
  br i1 %1766, label %inst_24ed, label %inst_23eb

inst_1f74:                                        ; preds = %inst_1f6b
  %1767 = add i64 %1734, 5
  %1768 = load i64*, i64** @RSP_2312_56234d8e7800
  %1769 = getelementptr i64, i64* %1768, i32 3
  %1770 = load i64, i64* %1769
  store i64 %1770, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1771 = add i64 %1767, 5
  %1772 = getelementptr i64, i64* %1768, i32 8
  %1773 = load i64, i64* %1772
  store i64 %1773, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1774 = add i64 %1771, 3
  %1775 = add i64 %1770, %799
  %1776 = add i64 %1774, 5
  %1777 = getelementptr i64, i64* %1768, i32 1
  store i64 %1775, i64* %1777
  %1778 = add i64 %1776, 3
  %1779 = inttoptr i64 %1775 to i8*
  store i8 10, i8* %1779
  %1780 = add i64 %1778, 3
  store i64 %1770, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1f8c

inst_1f99:                                        ; preds = %inst_1f8f
  %1781 = add i64 %913, 4
  %1782 = load i32*, i32** @RSP_2312_56234d8ed000
  %1783 = load i8*, i8** @RSP_2312_56234d8e76a0
  %1784 = getelementptr i32, i32* %1782, i32 1
  %1785 = load i32, i32* %1784
  %1786 = zext i32 %1785 to i64
  store i64 %1786, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1787 = add i64 %1781, 2
  %1788 = lshr i32 %1785, 31
  %1789 = trunc i32 %1788 to i8
  %1790 = add i64 %1787, 2
  %1791 = add i64 %1790, 30
  %1792 = icmp eq i8 %1789, 0
  %1793 = select i1 %1792, i64 %1790, i64 %1791
  %1794 = icmp eq i8 %1789, 1
  br i1 %1794, label %inst_1fbf, label %inst_1fa1

inst_1fa1:                                        ; preds = %inst_1f99
  %1795 = add i64 %1793, 5
  %1796 = getelementptr i8, i8* %1783, i32 55
  %1797 = load i8, i8* %1796
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1798 = zext i8 %1797 to i32
  %1799 = call i32 @llvm.ctpop.i32(i32 %1798) #13, !range !1234
  %1800 = trunc i32 %1799 to i8
  %1801 = and i8 %1800, 1
  %1802 = xor i8 %1801, 1
  store i8 %1802, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1803 = icmp eq i8 %1797, 0
  %1804 = zext i1 %1803 to i8
  store i8 %1804, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1805 = lshr i8 %1797, 7
  store i8 %1805, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1806 = add i64 %1795, 2
  %1807 = add i64 %1806, 23
  %1808 = icmp eq i8 %1804, 0
  %1809 = select i1 %1808, i64 %1806, i64 %1807
  br i1 %1803, label %inst_1fbf, label %inst_1fa8

inst_1fa8:                                        ; preds = %inst_1fa1
  %1810 = add i64 %1809, 5
  %1811 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1812 = add i64 %1811, -8
  %1813 = inttoptr i64 %1812 to i64*
  store i64 %1810, i64* %1813
  store i64 %1812, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1814 = call %struct.Memory* @sub_2820(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %904)
  %1815 = load i64, i64* bitcast (i8** @data_208030 to i64*)
  store i64 %1815, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1816 = load i64, i64* @R15_2456_56234d8dffa8
  store i64 %1816, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1817 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1818 = add i64 %1817, -8
  %1819 = inttoptr i64 %1818 to i64*
  store i64 ptrtoint (i8* @data_1fbc to i64), i64* %1819
  store i64 %1818, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1820 = call %struct.Memory* @ext_2082c0_stpcpy(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1814)
  %1821 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %1821, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1fbf

inst_1fd5:                                        ; preds = %inst_1fd0
  %1822 = add i64 %1835, 5
  %1823 = add i64 %1822, 4
  %1824 = load i16*, i16** @R15_2456_56234d8e7750
  %1825 = load i64, i64* @R15_2456_56234d8dffa8
  %1826 = add i64 2, %1825
  store i64 %1826, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1827 = add i64 %1823, 5
  store i16 ptrtoint (i8* @data_495e to i16), i16* %1824
  br label %inst_1fe3

inst_1fd0:                                        ; preds = %inst_1feb
  %1828 = add i64 %856, 3
  %1829 = load i8, i8* @R12_2408_56234d8dff60
  %1830 = icmp eq i8 %1829, 0
  %1831 = zext i1 %1830 to i8
  %1832 = add i64 %1828, 2
  %1833 = add i64 %1832, 28
  %1834 = icmp eq i8 %1831, 0
  %1835 = select i1 %1834, i64 %1832, i64 %1833
  br i1 %1830, label %inst_1ff1, label %inst_1fd5

inst_1ffb:                                        ; preds = %inst_1ff1
  %1836 = load i8*, i8** @R15_2456_56234d8e76a0
  %1837 = load i64, i64* @R15_2456_56234d8dffa8
  store i8 %849, i8* %1836
  %1838 = add i64 1, %1837
  store i64 %1838, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1fe3

inst_2040:                                        ; preds = %inst_2008
  %1839 = sub i8 %68, 127
  %1840 = icmp eq i8 %1839, 0
  br i1 %1840, label %inst_2090, label %inst_2046

inst_200e:                                        ; preds = %inst_2008
  %1841 = load i8*, i8** @R15_2456_56234d8e76a0
  %1842 = load i64, i64* @R15_2456_56234d8dffa8
  store i8 %68, i8* %1841
  %1843 = add i64 1, %1842
  store i64 %1843, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_2015

inst_2008:                                        ; preds = %inst_201d
  %1844 = sub i8 %68, 126
  %1845 = icmp ult i8 %68, 126
  %1846 = zext i1 %1845 to i8
  %1847 = icmp eq i8 %1844, 0
  %1848 = zext i1 %1847 to i8
  %1849 = or i8 %1848, %1846
  %1850 = icmp eq i8 %1849, 0
  br i1 %1850, label %inst_2040, label %inst_200e

inst_2023:                                        ; preds = %inst_201d
  %1851 = sub i8 %68, 9
  %1852 = icmp eq i8 %1851, 0
  %1853 = zext i1 %1852 to i8
  %1854 = icmp eq i8 %1853, 0
  br i1 %1854, label %inst_2070, label %inst_2029

inst_2029:                                        ; preds = %inst_2023
  %1855 = load i8, i8* @R13_2424_56234d8dff60
  %1856 = icmp eq i8 %1855, 0
  br i1 %1856, label %inst_2070, label %inst_202e

inst_202e:                                        ; preds = %inst_2029
  %1857 = load i8*, i8** @R15_2456_56234d8e76a0
  %1858 = load i64, i64* @R15_2456_56234d8dffa8
  store i8 9, i8* %1857
  %1859 = add i64 1, %1858
  store i64 %1859, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_2015

inst_2090:                                        ; preds = %inst_2040
  store i8* @data_3f5e, i8** @RSI_2280_56234d8e76a0
  %1860 = load i16*, i16** @R15_2456_56234d8e7750
  %1861 = load i64, i64* @R15_2456_56234d8dffa8
  %1862 = add i64 2, %1861
  store i64 %1862, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  store i16 ptrtoint (i8* @data_3f5e to i16), i16* %1860
  br label %inst_2015

inst_2046:                                        ; preds = %inst_2040
  store i8* @data_2d4d, i8** @RCX_2248_56234d8e76a0
  %1863 = sub i8 %68, -97
  %1864 = icmp ult i8 %68, -97
  %1865 = zext i1 %1864 to i8
  %1866 = icmp eq i8 %1863, 0
  %1867 = zext i1 %1866 to i8
  %1868 = load i8*, i8** @R15_2456_56234d8e76a0
  %1869 = load i64, i64* @R15_2456_56234d8dffa8
  %1870 = bitcast i8* %1868 to i16*
  store i16 ptrtoint (i8* @data_2d4d to i16), i16* %1870
  %1871 = or i8 %1867, %1865
  %1872 = icmp ne i8 %1871, 0
  br i1 %1872, label %inst_20a8, label %inst_2055

inst_20a8:                                        ; preds = %inst_2046
  %1873 = load i32, i32* @RBP_2328_56234d8dff90
  %1874 = sub i32 %1873, 64
  %1875 = zext i32 %1874 to i64
  %1876 = getelementptr i8, i8* %1868, i32 2
  store i8 94, i8* %1876
  %1877 = add i64 4, %1869
  store i64 %1877, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1878 = sub i64 %1877, 1
  %1879 = trunc i64 %1875 to i8
  %1880 = inttoptr i64 %1878 to i8*
  store i8 %1879, i8* %1880
  br label %inst_2015

inst_2055:                                        ; preds = %inst_2046
  %1881 = sub i8 %68, -1
  %1882 = icmp eq i8 %1881, 0
  br i1 %1882, label %inst_21b8, label %inst_205f

inst_21b8:                                        ; preds = %inst_2055
  %1883 = add i64 4, %1869
  store i64 %1883, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1884 = sub i64 %1883, 2
  %1885 = inttoptr i64 %1884 to i16*
  store i16 ptrtoint (i8* @data_3f5e to i16), i16* %1885
  br label %inst_2015

inst_205f:                                        ; preds = %inst_2055
  %1886 = load i32, i32* @RBP_2328_56234d8dff90
  %1887 = add i32 -128, %1886
  %1888 = zext i32 %1887 to i64
  %1889 = add i64 3, %1869
  store i64 %1889, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1890 = sub i64 %1889, 1
  %1891 = trunc i64 %1888 to i8
  %1892 = inttoptr i64 %1890 to i8*
  store i8 %1891, i8* %1892
  br label %inst_2015

inst_2076:                                        ; preds = %inst_2070
  %1893 = load i32, i32* @RBP_2328_56234d8dff90
  %1894 = add i32 64, %1893
  %1895 = zext i32 %1894 to i64
  %1896 = load i8*, i8** @R15_2456_56234d8e76a0
  %1897 = load i64, i64* @R15_2456_56234d8dffa8
  store i8 94, i8* %1896
  %1898 = add i64 2, %1897
  store i64 %1898, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1899 = sub i64 %1898, 1
  %1900 = trunc i64 %1895 to i8
  %1901 = inttoptr i64 %1899 to i8*
  store i8 %1900, i8* %1901
  br label %inst_2015

inst_25f7:                                        ; preds = %inst_20e0
  %1902 = add i64 %509, 7
  store i8* @data_5c44, i8** @RSI_2280_56234d8e76a0
  %1903 = add i64 %1902, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1904 = add i64 %1903, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1905 = add i64 %1904, 5
  %1906 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1907 = add i64 %1906, -8
  %1908 = inttoptr i64 %1907 to i64*
  store i64 %1905, i64* %1908
  store i64 %1907, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1909 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %502)
  %1910 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %1910, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %1911 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1912 = add i64 %1911, -8
  %1913 = inttoptr i64 %1912 to i64*
  store i64 ptrtoint (i8* @data_2612 to i64), i64* %1913
  store i64 %1912, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1914 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1909)
  %1915 = load i32*, i32** @RAX_2216_56234d8ed000
  %1916 = load i32, i32* %1915
  %1917 = zext i32 %1916 to i64
  store i64 %1917, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1918 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %1918, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1919 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %1920 = add i64 %1919, -8
  %1921 = inttoptr i64 %1920 to i64*
  store i64 ptrtoint (i8* @data_2623 to i64), i64* %1921
  store i64 %1920, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1922 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1914)
  br label %inst_2623

inst_20f9:                                        ; preds = %inst_20e0
  %1923 = lshr i64 %503, 63
  %1924 = add i64 %509, 3
  %1925 = load i64, i64* @RBP_2328_56234d8dffa8
  %1926 = add i64 %503, %1925
  store i64 %1926, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %1927 = add i64 %1924, 3
  %1928 = load i64, i64* @R15_2456_56234d8dffa8
  %1929 = add i64 %1927, 3
  %1930 = sub i64 %1928, %1926
  store i64 %1930, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %1931 = lshr i64 %1930, 63
  %1932 = add i64 %1929, 3
  %1933 = sub i64 %503, %1930
  %1934 = icmp ult i64 %503, %1930
  %1935 = zext i1 %1934 to i8
  store i8 %1935, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %1936 = trunc i64 %1933 to i32
  %1937 = and i32 %1936, 255
  %1938 = call i32 @llvm.ctpop.i32(i32 %1937) #13, !range !1234
  %1939 = trunc i32 %1938 to i8
  %1940 = and i8 %1939, 1
  %1941 = xor i8 %1940, 1
  store i8 %1941, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %1942 = xor i64 %1930, %503
  %1943 = xor i64 %1942, %1933
  %1944 = lshr i64 %1943, 4
  %1945 = trunc i64 %1944 to i8
  %1946 = and i8 %1945, 1
  store i8 %1946, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %1947 = icmp eq i64 %1933, 0
  %1948 = zext i1 %1947 to i8
  store i8 %1948, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %1949 = lshr i64 %1933, 63
  %1950 = trunc i64 %1949 to i8
  store i8 %1950, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %1951 = xor i64 %1931, %1923
  %1952 = xor i64 %1949, %1923
  %1953 = add nuw nsw i64 %1952, %1951
  %1954 = icmp eq i64 %1953, 2
  %1955 = zext i1 %1954 to i8
  store i8 %1955, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %1956 = add i64 %1932, 2
  %1957 = sub i64 %1956, 39
  %1958 = or i8 %1948, %1935
  %1959 = icmp ne i8 %1958, 0
  %1960 = select i1 %1959, i64 %1957, i64 %1956
  br i1 %1959, label %inst_20e0, label %inst_2107

inst_2107:                                        ; preds = %inst_20f9
  %1961 = add i64 %1960, 5
  %1962 = load i64*, i64** @RSP_2312_56234d8e7800
  %1963 = load i64, i64* @RSP_2312_56234d8dffa8
  %1964 = getelementptr i64, i64* %1962, i32 4
  %1965 = load i64, i64* %1964
  store i64 %1965, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1966 = add i64 %1961, 3
  store i64 %1930, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %1967 = add i64 %1966, 3
  store i64 %1926, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %1968 = add i64 %1967, 5
  %1969 = getelementptr i64, i64* %1962, i32 5
  store i64 %1930, i64* %1969
  %1970 = add i64 %1968, 3
  store i64 %1965, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %1971 = add i64 %1970, 5
  %1972 = add i64 %1963, -8
  %1973 = getelementptr i64, i64* %1962, i32 -1
  store i64 %1971, i64* %1973
  store i64 %1972, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %1974 = call %struct.Memory* @ext_2083c0_memmove(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %502)
  %1975 = load i64, i64* @RBX_2232_56234d8dffa8
  %1976 = load i64*, i64** @RSP_2312_56234d8e7800
  %1977 = getelementptr i64, i64* %1976, i32 1
  %1978 = load i64, i64* %1977
  %1979 = sub i64 %1975, %1978
  %1980 = icmp ugt i64 %1978, %1975
  %1981 = zext i1 %1980 to i8
  %1982 = icmp eq i64 %1979, 0
  %1983 = zext i1 %1982 to i8
  %1984 = getelementptr i64, i64* %1976, i32 5
  %1985 = load i64, i64* %1984
  store i64 %1985, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %1986 = load i64, i64* @R15_2456_56234d8dffa8
  %1987 = add i64 %1985, %1986
  store i64 %1987, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %1988 = or i8 %1983, %1981
  %1989 = icmp eq i8 %1988, 0
  %1990 = select i1 %1989, i64 ptrtoint (i8* @data_1f26 to i64), i64 ptrtoint (i8* @data_2133 to i64)
  br i1 %1989, label %inst_1f26, label %inst_2133

inst_2144:                                        ; preds = %inst_2133
  %1991 = add i64 %631, 5
  %1992 = add i64 %1991, 4
  %1993 = add i64 %1992, 4
  %1994 = add i64 %1993, 2
  %1995 = add i64 %1994, 2
  %1996 = add i64 %1995, 3
  %1997 = sub i32 %643, 1
  %1998 = icmp eq i32 %1997, 0
  %1999 = zext i1 %1998 to i8
  %2000 = add i64 %1996, 2
  %2001 = add i64 %2000, 19
  %2002 = icmp eq i8 %1999, 0
  %2003 = select i1 %2002, i64 %2000, i64 %2001
  br i1 %1998, label %inst_215c, label %inst_2149

inst_2149:                                        ; preds = %inst_2144
  %2004 = add i64 %2003, 5
  %2005 = getelementptr i8, i8* %633, i32 86
  %2006 = load i8, i8* %2005
  %2007 = icmp eq i8 %2006, 0
  %2008 = zext i1 %2007 to i8
  %2009 = add i64 %2004, 8
  store i32 2, i32* %637
  %2010 = add i64 %2009, 6
  %2011 = add i64 %2010, 188
  %2012 = icmp eq i8 %2008, 0
  %2013 = select i1 %2012, i64 %2011, i64 %2010
  br i1 %2012, label %inst_2218, label %inst_215c

inst_2218:                                        ; preds = %inst_2149
  %2014 = load i8, i8* %640
  %2015 = zext i8 %2014 to i64
  store i64 %2015, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  store i64 %642, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_1f8f

inst_2163:                                        ; preds = %inst_215c
  %2016 = getelementptr i8, i8* %633, i32 55
  %2017 = load i8, i8* %2016
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %2018 = zext i8 %2017 to i32
  %2019 = call i32 @llvm.ctpop.i32(i32 %2018) #13, !range !1234
  %2020 = trunc i32 %2019 to i8
  %2021 = and i8 %2020, 1
  %2022 = xor i8 %2021, 1
  store i8 %2022, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2023 = icmp eq i8 %2017, 0
  %2024 = zext i1 %2023 to i8
  store i8 %2024, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %2025 = lshr i8 %2017, 7
  store i8 %2025, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  br i1 %2023, label %inst_2190, label %inst_216a

inst_216a:                                        ; preds = %inst_2163
  %2026 = add i64 %828, 5
  %2027 = add i64 %2026, 2
  %2028 = add i64 %2027, 5
  %2029 = add i64 %2028, 2
  %2030 = add i64 %2029, 38
  %2031 = icmp eq i8 %2024, 0
  %2032 = select i1 %2031, i64 %2029, i64 %2030
  %2033 = add i64 %2032, 5
  %2034 = getelementptr i64, i64* %634, i32 5
  store i64 %642, i64* %2034
  %2035 = add i64 %2033, 5
  %2036 = add i64 %635, -8
  %2037 = getelementptr i64, i64* %634, i32 -1
  store i64 %2035, i64* %2037
  store i64 %2036, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2038 = call %struct.Memory* @sub_2820(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %632)
  %2039 = load i64, i64* bitcast (i8** @data_208030 to i64*)
  store i64 %2039, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2040 = load i64, i64* @R15_2456_56234d8dffa8
  store i64 %2040, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2041 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2042 = add i64 %2041, -8
  %2043 = inttoptr i64 %2042 to i64*
  store i64 ptrtoint (i8* @data_2183 to i64), i64* %2043
  store i64 %2042, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2044 = call %struct.Memory* @ext_2082c0_stpcpy(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2038)
  %2045 = load i64, i64* @RSP_2312_56234d8dffa8
  %2046 = add i64 %2045, 40
  %2047 = inttoptr i64 %2046 to i64*
  %2048 = load i64, i64* %2047
  store i64 %2048, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2049 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %2049, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_2190

inst_21d0:                                        ; preds = %inst_2190
  store i64 %922, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 %921, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 %922, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_21a3

inst_219b:                                        ; preds = %inst_2190
  store i8 36, i8* %920
  %2050 = add i64 2, %921
  store i64 %2050, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_21a3

inst_2263:                                        ; preds = %inst_2250
  store i64 274916179968, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2051 = load i8, i8* @RCX_2248_56234d8dff60
  %2052 = zext i8 %2051 to i64
  %2053 = and i64 %2052, 63
  switch i64 %2053, label %2054 [
    i64 0, label %_ZN12_GLOBAL__N_13SHRI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i64 1, label %2057
  ]

2054:                                             ; preds = %inst_2263
  %2055 = add nsw i64 %2053, -1
  %2056 = lshr i64 274916179968, %2055
  br label %2057

2057:                                             ; preds = %2054, %inst_2263
  %2058 = phi i64 [ %2056, %2054 ], [ 274916179968, %inst_2263 ]
  %2059 = lshr i64 %2058, 1
  store i64 %2059, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  br label %_ZN12_GLOBAL__N_13SHRI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_13SHRI3RnWImE2RnImLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %2057, %inst_2263
  %2060 = add i64 %129, 10
  %2061 = add i64 %2060, 3
  %2062 = add i64 %2061, 3
  %2063 = load i32, i32* @RDX_2264_56234d8dff90
  %2064 = zext i32 %2063 to i64
  %2065 = and i64 1, %2064
  store i64 %2065, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2066 = add i64 %2062, 3
  %2067 = load i32, i32* @R10_2376_56234d8dff90
  %2068 = zext i32 %2067 to i64
  %2069 = trunc i64 %2065 to i32
  %2070 = zext i32 %2069 to i64
  %2071 = or i64 %2070, %2068
  %2072 = and i64 %2071, 4294967295
  store i64 %2072, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_2276

inst_262f:                                        ; preds = %inst_2276
  %2073 = add i64 %273, 3
  %2074 = add i64 %2073, 6
  %2075 = add i64 %2074, 944
  %2076 = icmp eq i8 %283, 0
  %2077 = select i1 %2076, i64 %2074, i64 %2075
  %2078 = add i64 %2077, 7
  %2079 = load i64, i64* bitcast (i8* @data_2080f8 to i64*)
  store i64 %2079, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2080 = add i64 %2078, 5
  store i64 4, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2081 = add i64 %2080, 5
  %2082 = load i64*, i64** @RSP_2312_56234d8e7800
  %2083 = load i8*, i8** @RSP_2312_56234d8e76a0
  %2084 = load i64, i64* @RSP_2312_56234d8dffa8
  %2085 = bitcast i8* %2083 to i64*
  %2086 = getelementptr i8, i8* %2083, i32 8
  store i8 0, i8* %2086
  %2087 = add i64 %2081, 5
  %2088 = getelementptr i64, i64* %2082, i32 2
  store i64 %116, i64* %2088
  %2089 = add i64 %2087, 3
  %2090 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %2090, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %2091 = add i64 %2089, 5
  %2092 = add i64 %2084, -8
  %2093 = getelementptr i64, i64* %2085, i32 -1
  store i64 %2091, i64* %2093
  store i64 %2092, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2094 = call %struct.Memory* @sub_4850(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %114)
  store i8* @data_5d4d, i8** @RSI_2280_56234d8e76a0
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2095 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %2095, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %2096 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2097 = add i64 %2096, -8
  %2098 = inttoptr i64 %2097 to i64*
  store i64 ptrtoint (i8* @data_2663 to i64), i64* %2098
  store i64 %2097, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2099 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2094)
  %2100 = load i64*, i64** @RSP_2312_56234d8e7800
  %2101 = load i64, i64* @RSP_2312_56234d8dffa8
  %2102 = getelementptr i64, i64* %2100, i32 2
  %2103 = load i64, i64* %2102
  store i64 %2103, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %2104 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %2104, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2105 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %2105, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2106 = inttoptr i64 %2103 to i32*
  %2107 = load i32, i32* %2106
  %2108 = zext i32 %2107 to i64
  store i64 %2108, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2109 = add i64 %2101, -8
  %2110 = getelementptr i64, i64* %2100, i32 -1
  store i64 ptrtoint (i8* @data_267a to i64), i64* %2110
  store i64 %2109, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2111 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2099)
  %2112 = load i32*, i32** @RSP_2312_56234d8ed000
  %2113 = load i8*, i8** @RSP_2312_56234d8e76a0
  %2114 = getelementptr i32, i32* %2112, i32 1
  %2115 = load i32, i32* %2114
  %2116 = zext i32 %2115 to i64
  store i64 %2116, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2117 = getelementptr i8, i8* %2113, i32 8
  %2118 = load i8, i8* %2117
  %2119 = zext i8 %2118 to i64
  store i64 %2119, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  store i32 %2115, i32* bitcast (i8* @data_2080f0 to i32*)
  br label %inst_2388

inst_227f:                                        ; preds = %inst_2276
  %2120 = load i64, i64* @RSP_2312_56234d8dffa8
  %2121 = add i64 %2120, 84
  %2122 = inttoptr i64 %2121 to i8*
  store i8 0, i8* %2122
  br label %inst_21fd

inst_22f2:                                        ; preds = %inst_22dd
  %2123 = add i64 %490, 8
  %2124 = getelementptr i8, i8* %459, i32 142
  %2125 = load i8, i8* %2124
  %2126 = icmp eq i8 %2125, 0
  %2127 = zext i1 %2126 to i8
  %2128 = add i64 %2123, 6
  %2129 = add i64 %2128, 525
  %2130 = icmp eq i8 %2127, 0
  %2131 = select i1 %2130, i64 %2129, i64 %2128
  br i1 %2130, label %inst_250d, label %inst_2300

inst_250d:                                        ; preds = %inst_22f2
  %2132 = add i64 %2131, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2133 = add i64 %2132, 5
  %2134 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2135 = add i64 %2134, -8
  %2136 = inttoptr i64 %2135 to i64*
  store i64 %2133, i64* %2136
  store i64 %2135, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2137 = call %struct.Memory* @ext_208320_close(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %456)
  %2138 = load i32, i32* @RAX_2216_56234d8dff90
  %2139 = lshr i32 %2138, 31
  %2140 = trunc i32 %2139 to i8
  %2141 = icmp eq i8 %2140, 0
  %2142 = select i1 %2141, i64 ptrtoint (i8* @data_2300 to i64), i64 ptrtoint (i8* @data_251c to i64)
  br i1 %2141, label %inst_2300, label %inst_251c

inst_2325:                                        ; preds = %inst_2300
  %2143 = bitcast i8* %522 to i64*
  %2144 = add i64 344, %523
  %2145 = getelementptr i64, i64* %521, i32 43
  %2146 = getelementptr i64, i64* %2143, i32 43
  %2147 = icmp ult i64 %2144, %523
  %2148 = icmp ult i64 %2144, 344
  %2149 = or i1 %2147, %2148
  %2150 = zext i1 %2149 to i8
  store i8 %2150, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %2151 = trunc i64 %2144 to i32
  %2152 = and i32 %2151, 255
  %2153 = call i32 @llvm.ctpop.i32(i32 %2152) #13, !range !1234
  %2154 = trunc i32 %2153 to i8
  %2155 = and i8 %2154, 1
  %2156 = xor i8 %2155, 1
  store i8 %2156, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %2157 = xor i64 344, %523
  %2158 = xor i64 %2157, %2144
  %2159 = lshr i64 %2158, 4
  %2160 = trunc i64 %2159 to i8
  %2161 = and i8 %2160, 1
  store i8 %2161, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2162 = icmp eq i64 %2144, 0
  %2163 = zext i1 %2162 to i8
  store i8 %2163, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %2164 = lshr i64 %2144, 63
  %2165 = trunc i64 %2164 to i8
  store i8 %2165, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %2166 = lshr i64 %523, 63
  %2167 = xor i64 %2164, %2166
  %2168 = add nuw nsw i64 %2167, %2164
  %2169 = icmp eq i64 %2168, 2
  %2170 = zext i1 %2169 to i8
  store i8 %2170, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %2171 = add i64 %2144, 8
  %2172 = getelementptr i64, i64* %2145, i32 1
  %2173 = getelementptr i64, i64* %2146, i32 1
  %2174 = load i64, i64* %2146
  store i64 %2174, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %2175 = add i64 %2171, 8
  %2176 = getelementptr i64, i64* %2172, i32 1
  %2177 = getelementptr i64, i64* %2173, i32 1
  %2178 = load i64, i64* %2172
  store i64 %2178, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %2179 = add i64 %2175, 8
  %2180 = getelementptr i64, i64* %2176, i32 1
  %2181 = getelementptr i64, i64* %2177, i32 1
  %2182 = load i64, i64* %2177
  store i64 %2182, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %2183 = add i64 %2179, 8
  %2184 = getelementptr i64, i64* %2180, i32 1
  %2185 = load i64, i64* %2180
  store i64 %2185, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %2186 = add i64 %2183, 8
  %2187 = getelementptr i64, i64* %2181, i32 1
  %2188 = load i64, i64* %2187
  store i64 %2188, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %2189 = add i64 %2186, 8
  %2190 = getelementptr i64, i64* %2184, i32 1
  %2191 = load i64, i64* %2190
  store i64 %2191, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %2192 = add i64 %2189, 8
  store i64 %2192, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %519

inst_24cd:                                        ; preds = %inst_2337
  %2193 = add i64 %1727, 5
  store i64 %1700, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2194 = add i64 %2193, 3
  store i64 %1701, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2195 = add i64 %2194, 5
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2196 = add i64 %2195, 5
  %2197 = add i64 %1697, -8
  %2198 = inttoptr i64 %2197 to i64*
  store i64 %2196, i64* %2198
  store i64 %2197, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2199 = call %struct.Memory* @sub_2d90(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1695)
  %2200 = load i64, i64* @R14_2440_56234d8dffa8
  %2201 = load i64, i64* @RAX_2216_56234d8dffa8
  %2202 = sub i64 %2200, %2201
  %2203 = icmp ult i64 %2200, %2201
  %2204 = zext i1 %2203 to i8
  store i8 %2204, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %2205 = trunc i64 %2202 to i32
  %2206 = and i32 %2205, 255
  %2207 = call i32 @llvm.ctpop.i32(i32 %2206) #13, !range !1234
  %2208 = trunc i32 %2207 to i8
  %2209 = and i8 %2208, 1
  %2210 = xor i8 %2209, 1
  store i8 %2210, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %2211 = xor i64 %2201, %2200
  %2212 = xor i64 %2211, %2202
  %2213 = lshr i64 %2212, 4
  %2214 = trunc i64 %2213 to i8
  %2215 = and i8 %2214, 1
  store i8 %2215, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2216 = icmp eq i64 %2202, 0
  %2217 = zext i1 %2216 to i8
  store i8 %2217, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %2218 = lshr i64 %2202, 63
  %2219 = trunc i64 %2218 to i8
  store i8 %2219, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %2220 = lshr i64 %2200, 63
  %2221 = lshr i64 %2201, 63
  %2222 = xor i64 %2221, %2220
  %2223 = xor i64 %2218, %2220
  %2224 = add nuw nsw i64 %2223, %2222
  %2225 = icmp eq i64 %2224, 2
  %2226 = zext i1 %2225 to i8
  store i8 %2226, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %2227 = icmp eq i8 %2217, 0
  %2228 = select i1 %2227, i64 ptrtoint (i8* @data_24e8 to i64), i64 ptrtoint (i8* @data_237b to i64)
  br i1 %2216, label %inst_237b, label %inst_2241

inst_23bf:                                        ; preds = %_ZN12_GLOBAL__N_112DoREPE_CMPSBEP6MemoryR5State.exit17
  %2229 = add i64 %1110, 6
  %2230 = load i32, i32* bitcast (i8* @data_2080f4 to i32*)
  %2231 = zext i32 %2230 to i64
  store i64 %2231, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2232 = add i64 %2229, 5
  %2233 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2234 = add i64 %2233, -8
  %2235 = inttoptr i64 %2234 to i64*
  store i64 %2232, i64* %2235
  store i64 %2234, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2236 = call %struct.Memory* @ext_208320_close(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1065)
  %2237 = load i32, i32* @RAX_2216_56234d8dff90
  %2238 = lshr i32 %2237, 31
  %2239 = trunc i32 %2238 to i8
  %2240 = icmp eq i8 %2239, 0
  %2241 = select i1 %2240, i64 ptrtoint (i8* @data_22dd to i64), i64 ptrtoint (i8* @data_23d2 to i64)
  br i1 %2240, label %inst_22dd, label %inst_22a5

inst_24ed:                                        ; preds = %inst_23d7
  %2242 = add i64 %1734, 3
  %2243 = add i64 %2242, 3
  %2244 = add i64 %2243, 3
  %2245 = add i64 %2244, 5
  %2246 = add i64 %2245, 6
  %2247 = add i64 %2246, 258
  %2248 = add i64 %2247, 5
  store i64 %1740, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2249 = add i64 %2248, 3
  store i64 %1741, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2250 = add i64 %2249, 5
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2251 = add i64 %2250, 5
  %2252 = add i64 %1737, -8
  %2253 = inttoptr i64 %2252 to i64*
  store i64 %2251, i64* %2253
  store i64 %2252, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2254 = call %struct.Memory* @sub_2d90(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %798)
  %2255 = load i64, i64* @RBX_2232_56234d8dffa8
  %2256 = load i64, i64* @RAX_2216_56234d8dffa8
  %2257 = sub i64 %2255, %2256
  %2258 = icmp ult i64 %2255, %2256
  %2259 = zext i1 %2258 to i8
  store i8 %2259, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %2260 = trunc i64 %2257 to i32
  %2261 = and i32 %2260, 255
  %2262 = call i32 @llvm.ctpop.i32(i32 %2261) #13, !range !1234
  %2263 = trunc i32 %2262 to i8
  %2264 = and i8 %2263, 1
  %2265 = xor i8 %2264, 1
  store i8 %2265, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %2266 = xor i64 %2256, %2255
  %2267 = xor i64 %2266, %2257
  %2268 = lshr i64 %2267, 4
  %2269 = trunc i64 %2268 to i8
  %2270 = and i8 %2269, 1
  store i8 %2270, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2271 = icmp eq i64 %2257, 0
  %2272 = zext i1 %2271 to i8
  store i8 %2272, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %2273 = lshr i64 %2257, 63
  %2274 = trunc i64 %2273 to i8
  store i8 %2274, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %2275 = lshr i64 %2255, 63
  %2276 = lshr i64 %2256, 63
  %2277 = xor i64 %2276, %2275
  %2278 = xor i64 %2273, %2275
  %2279 = add nuw nsw i64 %2278, %2277
  %2280 = icmp eq i64 %2279, 2
  %2281 = zext i1 %2280 to i8
  store i8 %2281, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  br i1 %2271, label %inst_23eb, label %inst_2241

inst_2413:                                        ; preds = %inst_23fd
  %2282 = add i64 %1581, 8
  %2283 = getelementptr i64, i64* %1559, i32 19
  %2284 = load i64, i64* %2283
  store i64 %2284, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %2285 = add i64 %2282, 8
  %2286 = getelementptr i64, i64* %1568, i32 23
  %2287 = load i64, i64* %2286
  %2288 = sub i64 %2287, %2284
  %2289 = icmp eq i64 %2288, 0
  %2290 = zext i1 %2289 to i8
  %2291 = add i64 %2285, 6
  %2292 = sub i64 %2291, 1522
  %2293 = icmp eq i8 %2290, 0
  %2294 = select i1 %2293, i64 %2292, i64 %2291
  br i1 %2293, label %inst_1e37, label %inst_2429

inst_2429:                                        ; preds = %inst_2413
  %2295 = add i64 %2294, 6
  %2296 = load i32, i32* bitcast (i8* @data_2080f4 to i32*)
  %2297 = zext i32 %2296 to i64
  store i64 %2297, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2298 = add i64 %2295, 2
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2299 = add i64 %2298, 5
  store i64 1, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2300 = add i64 %2299, 5
  %2301 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2302 = add i64 %2301, -8
  %2303 = inttoptr i64 %2302 to i64*
  store i64 %2300, i64* %2303
  store i64 %2302, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2304 = call %struct.Memory* @ext_208300_lseek(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1558)
  %2305 = load i64, i64* @RAX_2216_56234d8dffa8
  %2306 = load i64, i64* @RSP_2312_56234d8dffa8
  %2307 = add i64 %2306, 224
  %2308 = inttoptr i64 %2307 to i64*
  %2309 = load i64, i64* %2308
  %2310 = sub i64 %2305, %2309
  %2311 = lshr i64 %2310, 63
  %2312 = trunc i64 %2311 to i8
  %2313 = lshr i64 %2305, 63
  %2314 = lshr i64 %2309, 63
  %2315 = xor i64 %2314, %2313
  %2316 = xor i64 %2311, %2313
  %2317 = add nuw nsw i64 %2316, %2315
  %2318 = icmp eq i64 %2317, 2
  %2319 = icmp eq i8 %2312, 0
  %2320 = xor i1 %2319, %2318
  %2321 = select i1 %2320, i64 ptrtoint (i8* @data_1e37 to i64), i64 ptrtoint (i8* @data_2449 to i64)
  br i1 %2320, label %inst_1e37, label %inst_2449

inst_2449:                                        ; preds = %inst_2429
  %2322 = add i64 %2321, 7
  %2323 = load i64, i64* bitcast (i8* @data_2080f8 to i64*)
  store i64 %2323, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2324 = add i64 %2322, 5
  store i64 3, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2325 = add i64 %2324, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2326 = add i64 %2325, 5
  %2327 = add i64 %2306, -8
  %2328 = inttoptr i64 %2327 to i64*
  store i64 %2326, i64* %2328
  store i64 %2327, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2329 = call %struct.Memory* @sub_4950(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2304)
  store i8* @data_5d2f, i8** @RSI_2280_56234d8e76a0
  %2330 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %2330, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2331 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2332 = add i64 %2331, -8
  %2333 = inttoptr i64 %2332 to i64*
  store i64 ptrtoint (i8* @data_2472 to i64), i64* %2333
  store i64 %2332, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2334 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2329)
  %2335 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %2335, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %2336 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %2336, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2337 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2338 = add i64 %2337, -8
  %2339 = inttoptr i64 %2338 to i64*
  store i64 ptrtoint (i8* @data_2483 to i64), i64* %2339
  store i64 %2338, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2340 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2334)
  %2341 = load i64, i64* @RSP_2312_56234d8dffa8
  %2342 = add i64 %2341, 140
  %2343 = inttoptr i64 %2342 to i8*
  store i8 0, i8* %2343
  br label %inst_23a4

inst_251c:                                        ; preds = %inst_250d
  %2344 = add i64 %2142, 7
  store i8* @data_5d63, i8** @RSI_2280_56234d8e76a0
  %2345 = add i64 %2344, 5
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2346 = add i64 %2345, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2347 = add i64 %2346, 5
  %2348 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2349 = add i64 %2348, -8
  %2350 = inttoptr i64 %2349 to i64*
  store i64 %2347, i64* %2350
  store i64 %2349, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2351 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2137)
  %2352 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %2352, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %2353 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2354 = add i64 %2353, -8
  %2355 = inttoptr i64 %2354 to i64*
  store i64 ptrtoint (i8* @data_2537 to i64), i64* %2355
  store i64 %2354, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2356 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2351)
  %2357 = load i32*, i32** @RAX_2216_56234d8ed000
  %2358 = load i32, i32* %2357
  %2359 = zext i32 %2358 to i64
  store i64 %2359, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2360 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %2360, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2361 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2362 = add i64 %2361, -8
  %2363 = inttoptr i64 %2362 to i64*
  store i64 ptrtoint (i8* @data_2548 to i64), i64* %2363
  store i64 %2362, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2364 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2356)
  br label %inst_2548

inst_25ef:                                        ; preds = %inst_257a
  store i64 1, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_25e2

inst_257f:                                        ; preds = %inst_257a
  %2365 = add i64 %942, 3
  %2366 = add i64 %2365, 2
  %2367 = add i64 %2366, 112
  %2368 = icmp eq i8 %2416, 0
  %2369 = select i1 %2368, i64 %2366, i64 %2367
  %2370 = add i64 %2369, 3
  store i64 %937, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2371 = add i64 %2370, 3
  %2372 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %2372, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2373 = add i64 %2371, 5
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %2374 = add i64 %2373, 5
  %2375 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2376 = add i64 %2375, -8
  %2377 = inttoptr i64 %2376 to i64*
  store i64 %2374, i64* %2377
  store i64 %2376, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2378 = call %struct.Memory* @sub_2d90(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %936)
  %2379 = load i64, i64* @R14_2440_56234d8dffa8
  %2380 = load i64, i64* @RAX_2216_56234d8dffa8
  %2381 = sub i64 %2379, %2380
  %2382 = icmp ult i64 %2379, %2380
  %2383 = zext i1 %2382 to i8
  store i8 %2383, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %2384 = trunc i64 %2381 to i32
  %2385 = and i32 %2384, 255
  %2386 = call i32 @llvm.ctpop.i32(i32 %2385) #13, !range !1234
  %2387 = trunc i32 %2386 to i8
  %2388 = and i8 %2387, 1
  %2389 = xor i8 %2388, 1
  store i8 %2389, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %2390 = xor i64 %2380, %2379
  %2391 = xor i64 %2390, %2381
  %2392 = lshr i64 %2391, 4
  %2393 = trunc i64 %2392 to i8
  %2394 = and i8 %2393, 1
  store i8 %2394, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2395 = icmp eq i64 %2381, 0
  %2396 = zext i1 %2395 to i8
  store i8 %2396, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %2397 = lshr i64 %2381, 63
  %2398 = trunc i64 %2397 to i8
  store i8 %2398, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %2399 = lshr i64 %2379, 63
  %2400 = lshr i64 %2380, 63
  %2401 = xor i64 %2400, %2399
  %2402 = xor i64 %2397, %2399
  %2403 = add nuw nsw i64 %2402, %2401
  %2404 = icmp eq i64 %2403, 2
  %2405 = zext i1 %2404 to i8
  store i8 %2405, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %2406 = icmp eq i8 %2396, 0
  %2407 = select i1 %2406, i64 ptrtoint (i8* @data_269d to i64), i64 ptrtoint (i8* @data_2598 to i64)
  br i1 %2406, label %inst_269d, label %inst_2598

inst_257a:                                        ; preds = %inst_2598
  %2408 = lshr i64 %937, 63
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %2409 = trunc i64 %937 to i32
  %2410 = and i32 %2409, 255
  %2411 = call i32 @llvm.ctpop.i32(i32 %2410) #13, !range !1234
  %2412 = trunc i32 %2411 to i8
  %2413 = and i8 %2412, 1
  %2414 = xor i8 %2413, 1
  store i8 %2414, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %2415 = icmp eq i64 %937, 0
  %2416 = zext i1 %2415 to i8
  store i8 %2416, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %2417 = trunc i64 %2408 to i8
  store i8 %2417, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br i1 %2415, label %inst_25ef, label %inst_257f

inst_25b2:                                        ; preds = %inst_2598
  %2418 = add i64 %942, 7
  %2419 = load i64, i64* bitcast (i8* @data_2080f8 to i64*)
  store i64 %2419, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %2420 = add i64 %2418, 5
  store i64 3, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %2421 = add i64 %2420, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2422 = add i64 %2421, 5
  %2423 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2424 = add i64 %2423, -8
  %2425 = inttoptr i64 %2424 to i64*
  store i64 %2422, i64* %2425
  store i64 %2424, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2426 = call %struct.Memory* @sub_4950(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %936)
  %2427 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %2427, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %2428 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2429 = add i64 %2428, -8
  %2430 = inttoptr i64 %2429 to i64*
  store i64 ptrtoint (i8* @data_25cd to i64), i64* %2430
  store i64 %2429, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2431 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2426)
  %2432 = load i32*, i32** @RAX_2216_56234d8ed000
  %2433 = load i32, i32* %2432
  %2434 = zext i32 %2433 to i64
  store i64 %2434, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_6284, i8** @RDX_2264_56234d8e76a0
  %2435 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %2435, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2436 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2437 = add i64 %2436, -8
  %2438 = inttoptr i64 %2437 to i64*
  store i64 ptrtoint (i8* @data_25e2 to i64), i64* %2438
  store i64 %2437, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2439 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %2431)
  br label %inst_25e2

inst_2696:                                        ; preds = %inst_268f
  %2440 = add i64 %1364, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %2441 = add i64 %2440, 5
  %2442 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2443 = add i64 %2442, -8
  %2444 = inttoptr i64 %2443 to i64*
  store i64 %2441, i64* %2444
  store i64 %2443, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2445 = call %struct.Memory* @sub_28a0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1033)
  br label %inst_269d
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_2810(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_2810:
  %0 = load i64, i64* @RBP_2328_56234d8dffa8
  %1 = load i64*, i64** @RSP_2312_56234d8e7800
  %2 = getelementptr i64, i64* %1, i32 -1
  store i64 %0, i64* %2
  store i64 %0, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %3 = call %struct.Memory* @sub_2780(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_2eb0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_2eb0:
  %0 = load i64, i64* @RBP_2328_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @RBX_2232_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 %7, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %8 = load i32, i32* @RSI_2280_56234d8dff90
  %9 = zext i32 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %11 = sub i64 %5, 8
  %12 = inttoptr i64 %11 to i64*
  %13 = icmp ult i64 %5, 8
  %14 = zext i1 %13 to i8
  store i8 %14, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #13, !range !1234
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  store i8 %20, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %21 = xor i64 8, %5
  %22 = xor i64 %21, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %26 = icmp eq i64 %11, 0
  %27 = zext i1 %26 to i8
  store i8 %27, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %28 = lshr i64 %11, 63
  %29 = trunc i64 %28 to i8
  store i8 %29, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %30 = lshr i64 %5, 63
  %31 = xor i64 %28, %30
  %32 = add nuw nsw i64 %31, %30
  %33 = icmp eq i64 %32, 2
  %34 = zext i1 %33 to i8
  store i8 %34, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %35 = add i64 %11, -8
  %36 = getelementptr i64, i64* %12, i32 -1
  store i64 ptrtoint (i8* @data_2ec0 to i64), i64* %36
  store i64 %35, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %37 = call %struct.Memory* @sub_5610(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %38 = load i8*, i8** @RAX_2216_56234d8e76a0
  %39 = getelementptr i8, i8* %38, i32 5
  %40 = getelementptr i8, i8* %38, i32 3
  %41 = getelementptr i8, i8* %38, i32 2
  %42 = getelementptr i8, i8* %38, i32 4
  %43 = getelementptr i8, i8* %38, i32 1
  %44 = load i8, i8* %38
  %45 = zext i8 %44 to i64
  %46 = trunc i64 %45 to i32
  %47 = zext i32 %46 to i64
  %48 = and i64 -33, %47
  %49 = and i64 %48, 4294967295
  %50 = trunc i64 %49 to i8
  %51 = sub i8 %50, 85
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %inst_2f40, label %inst_2ecb

inst_2ed0:                                        ; preds = %inst_2f70, %inst_2f66, %inst_2f5c, %inst_2f4c, %inst_2f1a, %inst_2f14, %inst_2f0e, %inst_2f08, %inst_2f02, %inst_2efc, %inst_2ef0, %inst_2ecb, %inst_2f40
  store i8* @data_62dd, i8** @RDX_2264_56234d8e76a0
  %53 = load i32, i32* @RBX_2232_56234d8dff90
  %54 = sub i32 %53, 9
  %55 = icmp eq i32 %54, 0
  %56 = zext i1 %55 to i8
  %57 = icmp eq i8 %56, 0
  %58 = select i1 %57, i64 ptrtoint (i8* @data_62dd to i64), i64 ptrtoint (i8* @data_62db to i64)
  store i64 %58, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %59 = load i64*, i64** @RSP_2312_56234d8e7800
  %60 = load i64, i64* @RSP_2312_56234d8dffa8
  %61 = add i64 8, %60
  %62 = getelementptr i64, i64* %59, i32 1
  %63 = icmp ult i64 %61, %60
  %64 = icmp ult i64 %61, 8
  %65 = or i1 %63, %64
  %66 = zext i1 %65 to i8
  store i8 %66, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %67 = trunc i64 %61 to i32
  %68 = and i32 %67, 255
  %69 = call i32 @llvm.ctpop.i32(i32 %68) #13, !range !1234
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %73 = xor i64 8, %60
  %74 = xor i64 %73, %61
  %75 = lshr i64 %74, 4
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  store i8 %77, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %78 = icmp eq i64 %61, 0
  %79 = zext i1 %78 to i8
  store i8 %79, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %80 = lshr i64 %61, 63
  %81 = trunc i64 %80 to i8
  store i8 %81, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %82 = lshr i64 %60, 63
  %83 = xor i64 %80, %82
  %84 = add nuw nsw i64 %83, %80
  %85 = icmp eq i64 %84, 2
  %86 = zext i1 %85 to i8
  store i8 %86, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %87 = add i64 %61, 8
  %88 = load i64, i64* %62
  store i64 %88, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %89 = add i64 %87, 8
  %90 = getelementptr i64, i64* %62, i32 1
  %91 = load i64, i64* %90
  store i64 %91, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %92 = add i64 %89, 8
  store i64 %92, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %37

inst_2f40:                                        ; preds = %inst_2eb0
  %93 = load i8, i8* %43
  %94 = zext i8 %93 to i64
  %95 = trunc i64 %94 to i32
  %96 = zext i32 %95 to i64
  %97 = and i64 -33, %96
  %98 = and i64 %97, 4294967295
  %99 = trunc i64 %98 to i8
  %100 = sub i8 %99, 84
  %101 = icmp eq i8 %100, 0
  %102 = zext i1 %101 to i8
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %inst_2ed0, label %inst_2f4c

inst_2ecb:                                        ; preds = %inst_2eb0
  %104 = sub i8 %50, 71
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %inst_2ef0, label %inst_2ed0

inst_2ef0:                                        ; preds = %inst_2ecb
  %106 = load i8, i8* %43
  %107 = zext i8 %106 to i64
  %108 = trunc i64 %107 to i32
  %109 = zext i32 %108 to i64
  %110 = and i64 -33, %109
  %111 = and i64 %110, 4294967295
  %112 = trunc i64 %111 to i8
  %113 = sub i8 %112, 66
  %114 = icmp eq i8 %113, 0
  %115 = zext i1 %114 to i8
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %inst_2ed0, label %inst_2efc

inst_2efc:                                        ; preds = %inst_2ef0
  %117 = load i8, i8* %41
  %118 = sub i8 %117, 49
  %119 = icmp eq i8 %118, 0
  %120 = zext i1 %119 to i8
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %inst_2ed0, label %inst_2f02

inst_2f02:                                        ; preds = %inst_2efc
  %122 = load i8, i8* %40
  %123 = sub i8 %122, 56
  %124 = icmp eq i8 %123, 0
  %125 = zext i1 %124 to i8
  %126 = icmp eq i8 %125, 0
  br i1 %126, label %inst_2ed0, label %inst_2f08

inst_2f08:                                        ; preds = %inst_2f02
  %127 = load i8, i8* %42
  %128 = sub i8 %127, 48
  %129 = icmp eq i8 %128, 0
  %130 = zext i1 %129 to i8
  %131 = icmp eq i8 %130, 0
  br i1 %131, label %inst_2ed0, label %inst_2f0e

inst_2f0e:                                        ; preds = %inst_2f08
  %132 = load i8, i8* %39
  %133 = sub i8 %132, 51
  %134 = icmp eq i8 %133, 0
  %135 = zext i1 %134 to i8
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %inst_2ed0, label %inst_2f14

inst_2f14:                                        ; preds = %inst_2f0e
  %137 = getelementptr i8, i8* %38, i32 6
  %138 = load i8, i8* %137
  %139 = sub i8 %138, 48
  %140 = icmp eq i8 %139, 0
  %141 = zext i1 %140 to i8
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %inst_2ed0, label %inst_2f1a

inst_2f1a:                                        ; preds = %inst_2f14
  %143 = getelementptr i8, i8* %38, i32 7
  %144 = load i8, i8* %143
  %145 = icmp eq i8 %144, 0
  %146 = zext i1 %145 to i8
  %147 = icmp eq i8 %146, 0
  br i1 %147, label %inst_2ed0, label %inst_2f20

inst_2f20:                                        ; preds = %inst_2f1a
  %148 = load i8*, i8** @RBP_2328_56234d8e76a0
  %149 = load i8, i8* %148
  %150 = sub i8 %149, 96
  %151 = icmp eq i8 %150, 0
  %152 = zext i1 %151 to i8
  store i8* @data_62d8, i8** @RDX_2264_56234d8e76a0
  %153 = icmp eq i8 %152, 0
  %154 = select i1 %153, i64 ptrtoint (i8* @data_62d8 to i64), i64 ptrtoint (i8* @data_62d4 to i64)
  store i64 %154, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %155 = load i64*, i64** @RSP_2312_56234d8e7800
  %156 = load i64, i64* @RSP_2312_56234d8dffa8
  %157 = add i64 8, %156
  %158 = getelementptr i64, i64* %155, i32 1
  %159 = icmp ult i64 %157, %156
  %160 = icmp ult i64 %157, 8
  %161 = or i1 %159, %160
  %162 = zext i1 %161 to i8
  store i8 %162, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %163 = trunc i64 %157 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #13, !range !1234
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %169 = xor i64 8, %156
  %170 = xor i64 %169, %157
  %171 = lshr i64 %170, 4
  %172 = trunc i64 %171 to i8
  %173 = and i8 %172, 1
  store i8 %173, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %174 = icmp eq i64 %157, 0
  %175 = zext i1 %174 to i8
  store i8 %175, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %176 = lshr i64 %157, 63
  %177 = trunc i64 %176 to i8
  store i8 %177, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %178 = lshr i64 %156, 63
  %179 = xor i64 %176, %178
  %180 = add nuw nsw i64 %179, %176
  %181 = icmp eq i64 %180, 2
  %182 = zext i1 %181 to i8
  store i8 %182, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %183 = add i64 %157, 8
  %184 = load i64, i64* %158
  store i64 %184, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %185 = add i64 %183, 8
  %186 = getelementptr i64, i64* %158, i32 1
  %187 = load i64, i64* %186
  store i64 %187, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %188 = add i64 %185, 8
  store i64 %188, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %37

inst_2f4c:                                        ; preds = %inst_2f40
  %189 = load i8, i8* %41
  %190 = zext i8 %189 to i64
  %191 = trunc i64 %190 to i32
  %192 = zext i32 %191 to i64
  %193 = and i64 -33, %192
  %194 = and i64 %193, 4294967295
  %195 = trunc i64 %194 to i8
  %196 = sub i8 %195, 70
  %197 = icmp eq i8 %196, 0
  %198 = zext i1 %197 to i8
  %199 = icmp eq i8 %198, 0
  br i1 %199, label %inst_2ed0, label %inst_2f5c

inst_2f5c:                                        ; preds = %inst_2f4c
  %200 = load i8, i8* %40
  %201 = sub i8 %200, 45
  %202 = icmp eq i8 %201, 0
  %203 = zext i1 %202 to i8
  %204 = icmp eq i8 %203, 0
  br i1 %204, label %inst_2ed0, label %inst_2f66

inst_2f66:                                        ; preds = %inst_2f5c
  %205 = load i8, i8* %42
  %206 = sub i8 %205, 56
  %207 = icmp eq i8 %206, 0
  %208 = zext i1 %207 to i8
  %209 = icmp eq i8 %208, 0
  br i1 %209, label %inst_2ed0, label %inst_2f70

inst_2f70:                                        ; preds = %inst_2f66
  %210 = load i8, i8* %39
  %211 = icmp eq i8 %210, 0
  %212 = zext i1 %211 to i8
  %213 = icmp eq i8 %212, 0
  br i1 %213, label %inst_2ed0, label %inst_2f7a

inst_2f7a:                                        ; preds = %inst_2f70
  %214 = load i8*, i8** @RBP_2328_56234d8e76a0
  %215 = load i8, i8* %214
  %216 = sub i8 %215, 96
  %217 = icmp eq i8 %216, 0
  %218 = zext i1 %217 to i8
  store i8* @data_62d0, i8** @RDX_2264_56234d8e76a0
  %219 = icmp eq i8 %218, 0
  %220 = select i1 %219, i64 ptrtoint (i8* @data_62d0 to i64), i64 ptrtoint (i8* @data_62cc to i64)
  store i64 %220, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %221 = load i64*, i64** @RSP_2312_56234d8e7800
  %222 = load i64, i64* @RSP_2312_56234d8dffa8
  %223 = add i64 8, %222
  %224 = getelementptr i64, i64* %221, i32 1
  %225 = icmp ult i64 %223, %222
  %226 = icmp ult i64 %223, 8
  %227 = or i1 %225, %226
  %228 = zext i1 %227 to i8
  store i8 %228, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %229 = trunc i64 %223 to i32
  %230 = and i32 %229, 255
  %231 = call i32 @llvm.ctpop.i32(i32 %230) #13, !range !1234
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = xor i8 %233, 1
  store i8 %234, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %235 = xor i64 8, %222
  %236 = xor i64 %235, %223
  %237 = lshr i64 %236, 4
  %238 = trunc i64 %237 to i8
  %239 = and i8 %238, 1
  store i8 %239, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %240 = icmp eq i64 %223, 0
  %241 = zext i1 %240 to i8
  store i8 %241, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %242 = lshr i64 %223, 63
  %243 = trunc i64 %242 to i8
  store i8 %243, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %244 = lshr i64 %222, 63
  %245 = xor i64 %242, %244
  %246 = add nuw nsw i64 %245, %242
  %247 = icmp eq i64 %246, 2
  %248 = zext i1 %247 to i8
  store i8 %248, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %249 = add i64 %223, 8
  %250 = load i64, i64* %224
  store i64 %250, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %251 = add i64 %249, 8
  %252 = getelementptr i64, i64* %224, i32 1
  %253 = load i64, i64* %252
  store i64 %253, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %254 = add i64 %251, 8
  store i64 %254, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %37
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_1ad0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_1ad0:
  %0 = load i64, i64* @RBX_2232_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  store i8* @data_5c44, i8** @RSI_2280_56234d8e76a0
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %4 = add i64 %2, -8
  %5 = getelementptr i64, i64* %3, i32 -1
  store i64 ptrtoint (i8* @data_1ae4 to i64), i64* %5
  store i64 %4, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %6 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %7 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %7, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %8 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 ptrtoint (i8* @data_1aec to i64), i64* %10
  store i64 %9, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %11 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %6)
  %12 = load i32*, i32** @RAX_2216_56234d8ed000
  %13 = load i32, i32* %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %15 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %15, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %16 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 ptrtoint (i8* @data_1afd to i64), i64* %18
  store i64 %17, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %19 = call %struct.Memory* @ext_2083c8_error(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %11)
  ret %struct.Memory* %19
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_1720__init_proc(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_1720:
  %0 = load i64, i64* @RSP_2312_56234d8dffa8
  %1 = sub i64 %0, 8
  store i64 %1, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %2 = load i64, i64* bitcast (i8** @data_207fe8 to i64*)
  store i64 %2, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 255
  %5 = call i32 @llvm.ctpop.i32(i32 %4) #13, !range !1234
  %6 = trunc i32 %5 to i8
  %7 = and i8 %6, 1
  %8 = xor i8 %7, 1
  store i8 %8, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %9 = icmp eq i64 %2, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %11 = lshr i64 %2, 63
  %12 = trunc i64 %11 to i8
  store i8 %12, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  br i1 %9, label %inst_1732, label %inst_1730

inst_1732:                                        ; preds = %inst_1730, %inst_1720
  %13 = phi %struct.Memory* [ %memory, %inst_1720 ], [ %46, %inst_1730 ]
  %14 = load i64, i64* @RSP_2312_56234d8dffa8
  %15 = add i64 8, %14
  %16 = icmp ult i64 %15, %14
  %17 = icmp ult i64 %15, 8
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  store i8 %19, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %20 = trunc i64 %15 to i32
  %21 = and i32 %20, 255
  %22 = call i32 @llvm.ctpop.i32(i32 %21) #13, !range !1234
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  store i8 %25, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %26 = xor i64 8, %14
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  store i8 %30, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %31 = icmp eq i64 %15, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %33 = lshr i64 %15, 63
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %35 = lshr i64 %14, 63
  %36 = xor i64 %33, %35
  %37 = add nuw nsw i64 %36, %33
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  store i8 %39, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %40 = add i64 %15, 8
  store i64 %40, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %13

inst_1730:                                        ; preds = %inst_1720
  %41 = icmp eq i8 %10, 0
  %42 = select i1 %41, i64 ptrtoint (i8* @data_1730 to i64), i64 ptrtoint (i8* @data_1732 to i64)
  %43 = add i64 %42, 2
  %44 = add i64 %1, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %43, i64* %45
  store i64 %44, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  store i64 %2, i64* @RIP_2472_56234d8dffa8, align 8, !tbaa !1216
  %46 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 %2, %struct.Memory* %memory)
  br label %inst_1732
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_4870(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
  br label %inst_4870

inst_4870:                                        ; preds = %inst_4903, %0
  %1 = phi %struct.Memory* [ %memory, %0 ], [ %157, %inst_4903 ]
  %2 = load i64, i64* @RSP_2312_56234d8dffa8
  %3 = sub i64 %2, 72
  %4 = inttoptr i64 %3 to float*
  %5 = inttoptr i64 %3 to i64*
  store i64 %3, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %6 = load i32, i32* @RDX_2264_56234d8dff90
  %7 = zext i32 %6 to i64
  %8 = and i64 %7, 4294967295
  %9 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %10 = add i64 %9, 40
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  %13 = getelementptr i64, i64* %5, i32 7
  store i64 %12, i64* %13
  %14 = load i64, i64* bitcast (i8* @data_208250 to i64*)
  store i64 %3, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %15 = trunc i64 %8 to i32
  %16 = zext i32 %15 to i64
  %17 = and i64 31, %16
  %18 = load i64, i64* bitcast (i8* @data_208220 to i64*)
  %19 = load i64, i64* bitcast (i8* @data_208228 to i64*)
  %20 = zext i64 %19 to i128
  %21 = shl nuw i128 %20, 64
  %22 = zext i64 %18 to i128
  %23 = or i128 %21, %22
  store i128 %23, i128* @XMM0_16_56234d8dffc0, align 1, !tbaa !1241
  %24 = getelementptr i64, i64* %5, i32 6
  store i64 %14, i64* %24
  %25 = load <2 x float>, <2 x float>* @XMM0_16_56234d8ed4d0, align 1
  %26 = load <2 x float>, <2 x float>* @XMM0_24_56234d8ed4d0, align 1
  %27 = extractelement <2 x float> %25, i32 0
  store float %27, float* %4
  %28 = extractelement <2 x float> %25, i32 1
  %29 = getelementptr float, float* %4, i32 1
  store float %28, float* %29
  %30 = add i64 %3, 8
  %31 = extractelement <2 x float> %26, i32 0
  %32 = getelementptr float, float* %4, i32 2
  store float %31, float* %32
  %33 = extractelement <2 x float> %26, i32 1
  %34 = getelementptr float, float* %4, i32 3
  store float %33, float* %34
  %35 = trunc i64 %8 to i8
  %36 = zext i8 %35 to i64
  %37 = and i64 %36, 255
  %38 = lshr i64 %37, 4
  %39 = lshr i64 %38, 1
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 127
  %42 = zext i8 %41 to i64
  %43 = and i64 %42, 255
  %44 = mul i64 %43, 4
  %45 = add i64 %30, %44
  store i64 %45, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %46 = load i64, i64* bitcast (i8* @data_208230 to i64*)
  %47 = load i64, i64* bitcast (i8* @data_208238 to i64*)
  %48 = zext i64 %47 to i128
  %49 = shl nuw i128 %48, 64
  %50 = zext i64 %46 to i128
  %51 = or i128 %49, %50
  store i128 %51, i128* @XMM0_16_56234d8dffc0, align 1, !tbaa !1241
  %52 = getelementptr float, float* %4, i32 4
  %53 = load <2 x float>, <2 x float>* @XMM0_16_56234d8ed4d0, align 1
  %54 = load <2 x float>, <2 x float>* @XMM0_24_56234d8ed4d0, align 1
  %55 = extractelement <2 x float> %53, i32 0
  store float %55, float* %52
  %56 = extractelement <2 x float> %53, i32 1
  %57 = getelementptr float, float* %52, i32 1
  store float %56, float* %57
  %58 = extractelement <2 x float> %54, i32 0
  %59 = getelementptr float, float* %52, i32 2
  store float %58, float* %59
  %60 = extractelement <2 x float> %54, i32 1
  %61 = getelementptr float, float* %52, i32 3
  store float %60, float* %61
  %62 = load i64, i64* bitcast (i8* @data_208240 to i64*)
  %63 = load i64, i64* bitcast (i8* @data_208248 to i64*)
  %64 = zext i64 %63 to i128
  %65 = shl nuw i128 %64, 64
  %66 = zext i64 %62 to i128
  %67 = or i128 %65, %66
  store i128 %67, i128* @XMM0_16_56234d8dffc0, align 1, !tbaa !1241
  %68 = getelementptr float, float* %4, i32 8
  %69 = load <2 x float>, <2 x float>* @XMM0_16_56234d8ed4d0, align 1
  %70 = load <2 x float>, <2 x float>* @XMM0_24_56234d8ed4d0, align 1
  %71 = extractelement <2 x float> %69, i32 0
  store float %71, float* %68
  %72 = extractelement <2 x float> %69, i32 1
  %73 = getelementptr float, float* %68, i32 1
  store float %72, float* %73
  %74 = extractelement <2 x float> %70, i32 0
  %75 = getelementptr float, float* %68, i32 2
  store float %74, float* %75
  %76 = extractelement <2 x float> %70, i32 1
  %77 = getelementptr float, float* %68, i32 3
  store float %76, float* %77
  %78 = inttoptr i64 %45 to i32*
  %79 = load i32, i32* %78
  %80 = zext i32 %79 to i64
  %81 = and i64 %80, 4294967295
  %82 = trunc i64 %81 to i32
  %83 = zext i32 %82 to i64
  %84 = trunc i64 %17 to i8
  %85 = zext i8 %84 to i64
  %86 = trunc i64 %85 to i32
  %87 = and i32 %86, 31
  switch i32 %87, label %90 [
    i32 0, label %88
    i32 1, label %95
  ]

88:                                               ; preds = %inst_4870
  %89 = and i64 %83, 4294967295
  store i64 %89, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %_ZN12_GLOBAL__N_13SHRI3RnWImE2RnIjLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

90:                                               ; preds = %inst_4870
  %91 = add nsw i32 %87, -1
  %92 = and i64 %83, 4294967295
  %93 = zext i32 %91 to i64
  %94 = lshr i64 %92, %93
  br label %95

95:                                               ; preds = %90, %inst_4870
  %96 = phi i64 [ %94, %90 ], [ %83, %inst_4870 ]
  %97 = lshr i64 %96, 1
  %98 = trunc i64 %97 to i32
  %99 = and i32 %98, 2147483647
  %100 = zext i32 %99 to i64
  store i64 %100, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %_ZN12_GLOBAL__N_13SHRI3RnWImE2RnIjLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_13SHRI3RnWImE2RnIjLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %95, %88
  %101 = load i32, i32* @RAX_2216_56234d8dff90
  %102 = zext i32 %101 to i64
  %103 = and i64 %102, 4294967295
  %104 = xor i64 %103, 4294967295
  %105 = trunc i64 %104 to i32
  %106 = zext i32 %105 to i64
  %107 = and i64 1, %106
  %108 = trunc i64 %107 to i32
  %109 = zext i32 %108 to i64
  switch i32 %87, label %114 [
    i32 0, label %110
    i32 1, label %112
  ]

110:                                              ; preds = %_ZN12_GLOBAL__N_13SHRI3RnWImE2RnIjLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %111 = and i64 %109, 4294967295
  store i64 %111, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %_ZN12_GLOBAL__N_13SHLI3RnWImE2RnIjLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

112:                                              ; preds = %_ZN12_GLOBAL__N_13SHRI3RnWImE2RnIjLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %113 = shl i64 %109, 1
  br label %121

114:                                              ; preds = %_ZN12_GLOBAL__N_13SHRI3RnWImE2RnIjLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %115 = add nsw i32 %87, -1
  %116 = and i64 %109, 4294967295
  %117 = zext i32 %115 to i64
  %118 = shl i64 %116, %117
  %119 = shl i64 %118, 1
  %120 = and i64 %119, 8589934590
  br label %121

121:                                              ; preds = %114, %112
  %122 = phi i64 [ %113, %112 ], [ %120, %114 ]
  %123 = and i64 %122, 4294967294
  store i64 %123, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %_ZN12_GLOBAL__N_13SHLI3RnWImE2RnIjLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_13SHLI3RnWImE2RnIjLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %121, %110
  store i64 %3, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %124 = load i32, i32* @RAX_2216_56234d8dff90
  %125 = zext i32 %124 to i64
  %126 = xor i64 %80, %125
  %127 = and i64 %126, 4294967295
  store i64 %127, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %128 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %128, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %129 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 %129, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %130 = trunc i64 %127 to i32
  store i32 %130, i32* %78
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %131 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 add (i64 ptrtoint (void ()* @callback_sub_4870 to i64), i64 126), i64* %133
  store i64 %132, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %134 = call %struct.Memory* @sub_41e0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %1)
  %135 = load i64*, i64** @RSP_2312_56234d8e7800
  %136 = load i64, i64* @RSP_2312_56234d8dffa8
  %137 = getelementptr i64, i64* %135, i32 7
  %138 = load i64, i64* %137
  %139 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %140 = add i64 %139, 40
  %141 = inttoptr i64 %140 to i64*
  %142 = load i64, i64* %141
  %143 = xor i64 %142, %138
  store i64 %143, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %144 = trunc i64 %143 to i32
  %145 = and i32 %144, 255
  %146 = call i32 @llvm.ctpop.i32(i32 %145) #13, !range !1234
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  %149 = xor i8 %148, 1
  store i8 %149, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %150 = icmp eq i64 %143, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %152 = lshr i64 %143, 63
  %153 = trunc i64 %152 to i8
  store i8 %153, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %154 = icmp eq i8 %151, 0
  br i1 %154, label %inst_4903, label %inst_48fe

inst_4903:                                        ; preds = %_ZN12_GLOBAL__N_13SHLI3RnWImE2RnIjLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %155 = add i64 %136, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 add (i64 ptrtoint (i8* @data_4903 to i64), i64 5), i64* %156
  store i64 %155, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %157 = call %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %134)
  %158 = load i8, i8* @RSI_2280_56234d8dff60
  %159 = zext i8 %158 to i64
  %160 = trunc i64 %159 to i32
  %161 = shl i32 %160, 24
  %162 = ashr exact i32 %161, 24
  %163 = zext i32 %162 to i64
  store i64 %163, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 -1, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_4870

inst_48fe:                                        ; preds = %_ZN12_GLOBAL__N_13SHLI3RnWImE2RnIjLb1EES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %164 = add i64 72, %136
  %165 = icmp ult i64 %164, %136
  %166 = icmp ult i64 %164, 72
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  store i8 %168, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %169 = trunc i64 %164 to i32
  %170 = and i32 %169, 255
  %171 = call i32 @llvm.ctpop.i32(i32 %170) #13, !range !1234
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %175 = xor i64 72, %136
  %176 = xor i64 %175, %164
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %180 = icmp eq i64 %164, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %182 = lshr i64 %164, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %184 = lshr i64 %136, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %189 = add i64 %164, 8
  store i64 %189, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %134
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5190(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5190:
  %0 = load i64, i64* @RBX_2232_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  store i8* @data_6802, i8** @RSI_2280_56234d8e76a0
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %4 = add i64 %2, -8
  %5 = getelementptr i64, i64* %3, i32 -1
  store i64 ptrtoint (i8* @data_51a4 to i64), i64* %5
  store i64 %4, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %6 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  store i8* @data_6817, i8** @RDX_2264_56234d8e76a0
  %7 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %7, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %8 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 ptrtoint (i8* @data_51ba to i64), i64* %10
  store i64 %9, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %11 = call %struct.Memory* @ext_2083b8___printf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %6)
  store i8* @data_682d, i8** @RSI_2280_56234d8e76a0
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %12 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 ptrtoint (i8* @data_51cd to i64), i64* %14
  store i64 %13, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %15 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %11)
  store i8* @data_61b8, i8** @RCX_2248_56234d8e76a0
  store i8* @data_5cca, i8** @RDX_2264_56234d8e76a0
  %16 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %16, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 1, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %17 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %18 = add i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  store i64 ptrtoint (i8* @data_51ea to i64), i64* %19
  store i64 %18, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %20 = call %struct.Memory* @ext_2083b8___printf_chk(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %15)
  %21 = load i64, i64* @stdout
  store i64 %21, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_6a60, i8** @RSI_2280_56234d8e76a0
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 5, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %22 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 ptrtoint (i8* @data_5204 to i64), i64* %24
  store i64 %23, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %25 = call %struct.Memory* @ext_2082c8_dcgettext(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %20)
  %26 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %26, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %27 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %27, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %28 = load i64*, i64** @RSP_2312_56234d8e7800
  %29 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %30 = add i64 %29, 8
  store i64 %30, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %31 = load i64, i64* %28
  store i64 %31, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %32 = call %struct.Memory* @ext_1910_fputs_unlocked(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %25)
  ret %struct.Memory* %32
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5030(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_5030:
  %0 = load i64, i64* @RSP_2312_56234d8dffa8
  %1 = sub i64 %0, 104
  %2 = inttoptr i64 %1 to i64*
  store i64 %1, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %3 = load i64, i64* @R8_2344_56234d8dffa8
  store i64 %3, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %4 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %5 = add i64 %4, 40
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6
  %8 = getelementptr i64, i64* %2, i32 11
  store i64 %7, i64* %8
  store i64 %1, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5050

inst_5065:                                        ; preds = %inst_5058, %inst_509a
  %9 = phi i64 [ undef, %inst_509a ], [ %91, %inst_5058 ]
  %10 = phi %struct.Memory* [ %47, %inst_509a ], [ %36, %inst_5058 ]
  %11 = add i64 %9, 3
  %12 = load i64*, i64** @R11_2392_56234d8e7800
  %13 = load i64, i64* %12
  store i64 %13, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %14 = add i64 %11, 3
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %15 = trunc i64 %13 to i32
  %16 = and i32 %15, 255
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #13, !range !1234
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  store i8 %20, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %21 = icmp eq i64 %13, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %23 = lshr i64 %13, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %25 = add i64 %14, 4
  %26 = load i64, i64* @R8_2344_56234d8dffa8
  %27 = load i64, i64* @R9_2360_56234d8dffa8
  %28 = mul i64 %27, 8
  %29 = add i64 %28, %26
  %30 = inttoptr i64 %29 to i64*
  store i64 %13, i64* %30
  %31 = add i64 %25, 2
  %32 = add i64 %31, 10
  %33 = icmp eq i8 %22, 0
  %34 = select i1 %33, i64 %31, i64 %32
  br i1 %21, label %inst_507b, label %inst_5071

inst_5050:                                        ; preds = %inst_5071, %inst_5030
  %35 = phi i64 [ ptrtoint (i8* @data_5050 to i64), %inst_5030 ], [ %122, %inst_5071 ]
  %36 = phi %struct.Memory* [ %memory, %inst_5030 ], [ %10, %inst_5071 ]
  %37 = load i32*, i32** @R10_2376_56234d8ed000
  %38 = load i64*, i64** @R10_2376_56234d8e7800
  %39 = load i32, i32* %37
  %40 = sub i32 %39, 47
  %41 = icmp ult i32 %39, 47
  %42 = zext i1 %41 to i8
  %43 = icmp eq i32 %40, 0
  %44 = zext i1 %43 to i8
  %45 = or i8 %44, %42
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %inst_509a, label %inst_5058

inst_509a:                                        ; preds = %inst_5095, %inst_5050
  %47 = phi %struct.Memory* [ %36, %inst_5050 ], [ %125, %inst_5095 ]
  %48 = load i64, i64* @R10_2376_56234d8dffa8
  %49 = add i64 %48, 8
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %52 = add i64 %51, 8
  store i64 %52, i64* %50
  br label %inst_5065

inst_507b:                                        ; preds = %inst_5071, %inst_5065
  %53 = phi i64 [ %34, %inst_5065 ], [ %122, %inst_5071 ]
  %54 = add i64 %53, 5
  %55 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57
  store i64 %56, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %58 = call %struct.Memory* @sub_4c00(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %10)
  %59 = load i64*, i64** @RSP_2312_56234d8e7800
  %60 = load i64, i64* @RSP_2312_56234d8dffa8
  %61 = getelementptr i64, i64* %59, i32 11
  %62 = load i64, i64* %61
  %63 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %64 = add i64 %63, 40
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65
  %67 = xor i64 %66, %62
  store i64 %67, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %68 = trunc i64 %67 to i32
  %69 = and i32 %68, 255
  %70 = call i32 @llvm.ctpop.i32(i32 %69) #13, !range !1234
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %74 = icmp eq i64 %67, 0
  %75 = zext i1 %74 to i8
  store i8 %75, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %76 = lshr i64 %67, 63
  %77 = trunc i64 %76 to i8
  store i8 %77, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %78 = icmp eq i8 %75, 0
  br i1 %78, label %inst_5095, label %inst_5090

inst_5058:                                        ; preds = %inst_5050
  %79 = add i64 %35, 3
  %80 = zext i32 %39 to i64
  %81 = add i64 %79, 3
  %82 = add i64 %81, 2
  %83 = add i64 %82, 3
  %84 = and i64 %80, 4294967295
  %85 = add i64 %83, 4
  %86 = getelementptr i64, i64* %38, i32 2
  %87 = load i64, i64* %86
  %88 = add i64 %87, %84
  store i64 %88, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %89 = add i64 %85, 3
  %90 = add i32 8, %39
  %91 = add i64 %89, 3
  %92 = bitcast i64* %38 to i32*
  store i32 %90, i32* %92
  br label %inst_5065

inst_5071:                                        ; preds = %inst_5065
  %93 = add i64 %34, 4
  %94 = add i64 1, %27
  store i64 %94, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %95 = lshr i64 %94, 63
  %96 = add i64 %93, 4
  %97 = sub i64 %94, 10
  %98 = icmp ult i64 %94, 10
  %99 = zext i1 %98 to i8
  store i8 %99, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %100 = trunc i64 %97 to i32
  %101 = and i32 %100, 255
  %102 = call i32 @llvm.ctpop.i32(i32 %101) #13, !range !1234
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = xor i8 %104, 1
  store i8 %105, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %106 = xor i64 10, %94
  %107 = xor i64 %106, %97
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i8
  %110 = and i8 %109, 1
  store i8 %110, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %111 = icmp eq i64 %97, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %113 = lshr i64 %97, 63
  %114 = trunc i64 %113 to i8
  store i8 %114, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %115 = xor i64 %113, %95
  %116 = add nuw nsw i64 %115, %95
  %117 = icmp eq i64 %116, 2
  %118 = zext i1 %117 to i8
  store i8 %118, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %119 = add i64 %96, 2
  %120 = sub i64 %119, 43
  %121 = icmp eq i8 %112, 0
  %122 = select i1 %121, i64 %120, i64 %119
  br i1 %121, label %inst_5050, label %inst_507b

inst_5095:                                        ; preds = %inst_507b
  %123 = add i64 %60, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 add (i64 ptrtoint (i8* @data_5095 to i64), i64 5), i64* %124
  store i64 %123, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %125 = call %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %58)
  br label %inst_509a

inst_5090:                                        ; preds = %inst_507b
  %126 = add i64 104, %60
  %127 = icmp ult i64 %126, %60
  %128 = icmp ult i64 %126, 104
  %129 = or i1 %127, %128
  %130 = zext i1 %129 to i8
  store i8 %130, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %131 = trunc i64 %126 to i32
  %132 = and i32 %131, 255
  %133 = call i32 @llvm.ctpop.i32(i32 %132) #13, !range !1234
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  store i8 %136, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %137 = xor i64 104, %60
  %138 = xor i64 %137, %126
  %139 = lshr i64 %138, 4
  %140 = trunc i64 %139 to i8
  %141 = and i8 %140, 1
  store i8 %141, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %142 = icmp eq i64 %126, 0
  %143 = zext i1 %142 to i8
  store i8 %143, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %144 = lshr i64 %126, 63
  %145 = trunc i64 %144 to i8
  store i8 %145, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %146 = lshr i64 %60, 63
  %147 = xor i64 %144, %146
  %148 = add nuw nsw i64 %147, %144
  %149 = icmp eq i64 %148, 2
  %150 = zext i1 %149 to i8
  store i8 %150, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %151 = add i64 %126, 8
  store i64 %151, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %58
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_50b0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_50b0:
  %0 = load i64, i64* @RBP_2328_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @RBX_2232_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  store i64 32, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %7 = sub i64 %5, 184
  %8 = inttoptr i64 %7 to i64*
  %9 = inttoptr i64 %7 to i32*
  store i64 %7, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %10 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %11 = add i64 %10, 40
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12
  %14 = getelementptr i64, i64* %8, i32 15
  store i64 %13, i64* %14
  %15 = add i64 %7, 208
  %16 = load i64, i64* @R8_2344_56234d8dffa8
  %17 = getelementptr i64, i64* %8, i32 20
  store i64 %16, i64* %17
  store i64 %15, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %18 = add i64 %7, 32
  store i64 %18, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %19 = load i64, i64* @R9_2360_56234d8dffa8
  %20 = getelementptr i64, i64* %8, i32 21
  store i64 %19, i64* %20
  %21 = getelementptr i32, i32* %9, i32 2
  store i32 32, i32* %21
  %22 = getelementptr i64, i64* %8, i32 2
  store i64 %15, i64* %22
  %23 = add i64 %7, 128
  store i64 0, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %24 = getelementptr i64, i64* %8, i32 3
  store i64 %23, i64* %24
  store i64 %23, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5120

inst_5120:                                        ; preds = %inst_5142, %inst_50b0
  %25 = phi i64 [ ptrtoint (i8* @data_5120 to i64), %inst_50b0 ], [ %120, %inst_5142 ]
  %26 = load i32, i32* @R10_2376_56234d8dff90
  %27 = sub i32 %26, 47
  %28 = icmp ult i32 %26, 47
  %29 = zext i1 %28 to i8
  %30 = icmp eq i32 %27, 0
  %31 = zext i1 %30 to i8
  %32 = or i8 %31, %29
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %inst_517c, label %inst_5126

inst_514c:                                        ; preds = %inst_5142, %inst_5136
  %34 = phi i64 [ %97, %inst_5136 ], [ %120, %inst_5142 ]
  %35 = load i8, i8* @R11_2392_56234d8dff60
  %36 = zext i8 %35 to i64
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %37 = trunc i64 %36 to i32
  %38 = and i32 %37, 255
  %39 = call i32 @llvm.ctpop.i32(i32 %38) #13, !range !1234
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  store i8 %42, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %43 = icmp eq i8 %35, 0
  %44 = zext i1 %43 to i8
  store i8 %44, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %45 = lshr i8 %35, 7
  store i8 %45, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %46 = icmp eq i8 %44, 0
  br i1 %46, label %inst_5175, label %inst_5151

inst_5151:                                        ; preds = %inst_5175, %inst_514c
  %47 = phi %struct.Memory* [ %77, %inst_5175 ], [ %memory, %inst_514c ]
  %48 = add i64 %34, 3
  %49 = add i64 %48, 2
  %50 = add i64 %49, 36
  %51 = select i1 %46, i64 %50, i64 %49
  %52 = add i64 %51, 5
  %53 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %52, i64* %55
  store i64 %54, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %56 = call %struct.Memory* @sub_4c00(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %47)
  %57 = load i64*, i64** @RSP_2312_56234d8e7800
  %58 = load i64, i64* @RSP_2312_56234d8dffa8
  %59 = getelementptr i64, i64* %57, i32 15
  %60 = load i64, i64* %59
  %61 = load i64, i64* @FS_BASE_2168_56234d8dffa8
  %62 = add i64 %61, 40
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63
  %65 = xor i64 %64, %60
  store i64 %65, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %66 = trunc i64 %65 to i32
  %67 = and i32 %66, 255
  %68 = call i32 @llvm.ctpop.i32(i32 %67) #13, !range !1234
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = xor i8 %70, 1
  store i8 %71, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %72 = icmp eq i64 %65, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %74 = lshr i64 %65, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %76 = icmp eq i8 %73, 0
  br i1 %76, label %inst_5170, label %inst_5166

inst_5175:                                        ; preds = %inst_5170, %inst_514c
  %77 = phi %struct.Memory* [ %memory, %inst_514c ], [ %123, %inst_5170 ]
  %78 = load i64, i64* @RSP_2312_56234d8dffa8
  %79 = add i64 %78, 8
  %80 = load i32, i32* @R10_2376_56234d8dff90
  %81 = inttoptr i64 %79 to i32*
  store i32 %80, i32* %81
  br label %inst_5151

inst_5136:                                        ; preds = %inst_5126, %inst_517c
  %82 = phi i64 [ undef, %inst_517c ], [ %109, %inst_5126 ]
  %83 = add i64 %82, 3
  %84 = load i64*, i64** @RAX_2216_56234d8e7800
  %85 = load i64, i64* %84
  store i64 %85, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %86 = add i64 %83, 3
  %87 = icmp eq i64 %85, 0
  %88 = zext i1 %87 to i8
  %89 = add i64 %86, 4
  %90 = load i64, i64* @R9_2360_56234d8dffa8
  %91 = mul i64 %90, 8
  %92 = add i64 %91, %18
  %93 = inttoptr i64 %92 to i64*
  store i64 %85, i64* %93
  %94 = add i64 %89, 2
  %95 = add i64 %94, 10
  %96 = icmp eq i8 %88, 0
  %97 = select i1 %96, i64 %94, i64 %95
  br i1 %87, label %inst_514c, label %inst_5142

inst_517c:                                        ; preds = %inst_5120
  %98 = load i64, i64* @RBX_2232_56234d8dffa8
  store i64 %98, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %99 = add i64 8, %98
  store i64 %99, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5136

inst_5126:                                        ; preds = %inst_5120
  %100 = add i64 %25, 4
  %101 = zext i32 %26 to i64
  %102 = add i64 %100, 2
  %103 = add i64 %102, 3
  %104 = and i64 %101, 4294967295
  %105 = add i64 %103, 6
  store i64 1, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %106 = add i64 %105, 4
  %107 = add i32 8, %26
  %108 = zext i32 %107 to i64
  store i64 %108, i64* @R10_2376_56234d8dffa8, align 8, !tbaa !1216
  %109 = add i64 %106, 3
  %110 = add i64 %23, %104
  store i64 %110, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_5136

inst_5142:                                        ; preds = %inst_5136
  %111 = add i64 %97, 4
  %112 = add i64 1, %90
  store i64 %112, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %113 = add i64 %111, 4
  %114 = sub i64 %112, 10
  %115 = icmp eq i64 %114, 0
  %116 = zext i1 %115 to i8
  %117 = add i64 %113, 2
  %118 = sub i64 %117, 44
  %119 = icmp eq i8 %116, 0
  %120 = select i1 %119, i64 %118, i64 %117
  br i1 %119, label %inst_5120, label %inst_514c

inst_5170:                                        ; preds = %inst_5151
  %121 = add i64 %58, -8
  %122 = inttoptr i64 %121 to i64*
  store i64 add (i64 ptrtoint (i8* @data_5170 to i64), i64 5), i64* %122
  store i64 %121, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %123 = call %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %56)
  br label %inst_5175

inst_5166:                                        ; preds = %inst_5151
  %124 = add i64 184, %58
  %125 = getelementptr i64, i64* %57, i32 23
  %126 = icmp ult i64 %124, %58
  %127 = icmp ult i64 %124, 184
  %128 = or i1 %126, %127
  %129 = zext i1 %128 to i8
  store i8 %129, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %130 = trunc i64 %124 to i32
  %131 = and i32 %130, 255
  %132 = call i32 @llvm.ctpop.i32(i32 %131) #13, !range !1234
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  %135 = xor i8 %134, 1
  store i8 %135, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %136 = xor i64 184, %58
  %137 = xor i64 %136, %124
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %141 = icmp eq i64 %124, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %143 = lshr i64 %124, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %145 = lshr i64 %58, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %150 = add i64 %124, 8
  %151 = load i64, i64* %125
  store i64 %151, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %152 = add i64 %150, 8
  %153 = getelementptr i64, i64* %125, i32 1
  %154 = load i64, i64* %153
  store i64 %154, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %155 = add i64 %152, 8
  store i64 %155, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %56
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_1740(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_1740:
  %0 = load i64, i64* bitcast (i8* @data_207e10 to i64*)
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  store i64 %2, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %4 = load i64, i64* bitcast (i8* @data_207e18 to i64*)
  store i64 %4, i64* @RIP_2472_56234d8dffa8, align 8, !tbaa !1216
  %5 = icmp eq i64 %4, 5964
  br i1 %5, label %inst_174c, label %6

inst_174c:                                        ; preds = %6, %inst_1740
  ret %struct.Memory* %memory

6:                                                ; preds = %inst_1740
  %7 = sub i64 ptrtoint (i8* @data_174c to i64), %4
  %8 = trunc i64 %7 to i32
  %9 = zext i32 %8 to i64
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %inst_174c, label %11

11:                                               ; preds = %6
  %12 = call %struct.Memory* @__remill_jump(%struct.State* @__mcsema_reg_state, i64 %4, %struct.Memory* %memory)
  ret %struct.Memory* %12
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_5210(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
  br label %inst_5210

inst_5223:                                        ; preds = %inst_521e, %inst_5210
  %1 = load i64*, i64** @RSP_2312_56234d8e7800
  %2 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %3 = add i64 %2, 8
  %4 = load i64, i64* %1
  store i64 %4, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %5 = add i64 %3, 8
  store i64 %5, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %45

inst_524b:                                        ; preds = %inst_5241, %inst_5225
  %6 = phi i64 [ %87, %inst_5225 ], [ %104, %inst_5241 ]
  %7 = add i64 %6, 4
  %8 = load i64, i64* @RSP_2312_56234d8dffa8
  %9 = sub i64 %8, 8
  %10 = inttoptr i64 %9 to i64*
  %11 = icmp ult i64 %8, 8
  %12 = zext i1 %11 to i8
  store i8 %12, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = call i32 @llvm.ctpop.i32(i32 %14) #13, !range !1234
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %19 = xor i64 8, %8
  %20 = xor i64 %19, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  store i8 %23, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %24 = icmp eq i64 %9, 0
  %25 = zext i1 %24 to i8
  store i8 %25, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %26 = lshr i64 %9, 63
  %27 = trunc i64 %26 to i8
  store i8 %27, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %28 = lshr i64 %8, 63
  %29 = xor i64 %26, %28
  %30 = add nuw nsw i64 %29, %28
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  store i8 %32, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %33 = add i64 %7, 5
  %34 = add i64 %9, -8
  %35 = getelementptr i64, i64* %10, i32 -1
  store i64 %33, i64* %35
  store i64 %34, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %36 = call %struct.Memory* @sub_5460(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %73)
  br label %inst_5210

inst_5210:                                        ; preds = %inst_5241, %inst_524b, %0
  %37 = phi %struct.Memory* [ %memory, %0 ], [ %36, %inst_524b ], [ %73, %inst_5241 ]
  %38 = load i64, i64* @RBX_2232_56234d8dffa8
  %39 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %38, i64* %41
  %42 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 %42, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %43 = add i64 %40, -8
  %44 = getelementptr i64, i64* %41, i32 -1
  store i64 add (i64 ptrtoint (void ()* @callback_sub_5210 to i64), i64 9), i64* %44
  store i64 %43, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %45 = call %struct.Memory* @ext_208370_malloc(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %37)
  %46 = load i64, i64* @RAX_2216_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 255
  %49 = call i32 @llvm.ctpop.i32(i32 %48) #13, !range !1234
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  store i8 %52, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %53 = icmp eq i64 %46, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %55 = lshr i64 %46, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %57 = icmp eq i8 %54, 0
  br i1 %57, label %inst_5223, label %inst_521e

inst_521e:                                        ; preds = %inst_5210
  %58 = load i64, i64* @RBX_2232_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %59 = trunc i64 %58 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #13, !range !1234
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %65 = icmp eq i64 %58, 0
  %66 = zext i1 %65 to i8
  store i8 %66, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %67 = lshr i64 %58, 63
  %68 = trunc i64 %67 to i8
  store i8 %68, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %69 = icmp eq i8 %66, 0
  br i1 %69, label %inst_5225, label %inst_5223

inst_5225:                                        ; preds = %inst_521e
  %70 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %71 = add i64 %70, -8
  %72 = inttoptr i64 %71 to i64*
  store i64 add (i64 ptrtoint (i8* @data_521e to i64), i64 12), i64* %72
  store i64 %71, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %73 = call %struct.Memory* @sub_5460(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %45)
  %74 = load i64, i64* @RDI_2296_56234d8dffa8
  %75 = load i64, i64* @RSI_2280_56234d8dffa8
  %76 = zext i64 %74 to i128
  %77 = zext i64 %75 to i128
  %78 = mul nuw i128 %76, %77
  %79 = trunc i128 %78 to i64
  %80 = lshr i128 %78, 64
  %81 = trunc i128 %80 to i64
  store i64 %79, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 %81, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %82 = icmp ugt i128 %78, 18446744073709551615
  %83 = zext i1 %82 to i8
  store i64 %79, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 %83, i8* @RAX_2216_56234d8dff60, align 1, !tbaa !1240
  %84 = lshr i64 %79, 63
  %85 = trunc i64 %84 to i8
  %86 = icmp eq i8 %85, 0
  %87 = select i1 %86, i64 ptrtoint (i8* @data_5241 to i64), i64 ptrtoint (i8* @data_524b to i64)
  %88 = icmp eq i8 %85, 1
  br i1 %88, label %inst_524b, label %inst_5241

inst_5241:                                        ; preds = %inst_5225
  %89 = add i64 %87, 3
  %90 = zext i8 %83 to i64
  %91 = and i64 %90, 255
  store i64 %91, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %92 = add i64 %89, 3
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %93 = trunc i64 %91 to i32
  %94 = and i32 %93, 255
  %95 = call i32 @llvm.ctpop.i32(i32 %94) #13, !range !1234
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %99 = icmp eq i64 %91, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %101 = add i64 %92, 2
  %102 = add i64 %101, 2
  %103 = icmp eq i8 %100, 0
  %104 = select i1 %103, i64 %102, i64 %101
  br i1 %103, label %inst_524b, label %inst_5210
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_2780(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_2780:
  store i64* @program_invocation_short_name, i64** @RDI_2296_56234d8e7800
  %0 = load i64, i64* @RBP_2328_56234d8dffa8
  %1 = load i64*, i64** @RSP_2312_56234d8e7800
  %2 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %3 = getelementptr i64, i64* %1, i32 -1
  store i64 %0, i64* %3
  store i64 0, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1240
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1240
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1240
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1240
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1240
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1240
  %4 = load i64, i64* %3
  store i64 %4, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %5 = add i64 %2, 8
  store i64 %5, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %memory
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_2820(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_2820:
  %0 = load i64, i64* bitcast (i8** @data_208028 to i64*)
  store i64 %0, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_208021, i8** @RAX_2216_56234d8e76a0
  br label %inst_283d

inst_2882:                                        ; preds = %inst_2877, %inst_286b
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, 8
  store i64 %2, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %memory

inst_286b:                                        ; preds = %inst_285c, %inst_2888
  %3 = load i64, i64* bitcast (i8** @data_208030 to i64*)
  store i64 %3, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %4 = load i64, i64* @RDX_2264_56234d8dffa8
  %5 = sub i64 %3, %4
  %6 = icmp ult i64 %3, %4
  %7 = zext i1 %6 to i8
  store i8 %7, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %8 = trunc i64 %5 to i32
  %9 = and i32 %8, 255
  %10 = call i32 @llvm.ctpop.i32(i32 %9) #13, !range !1234
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  store i8 %13, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %14 = xor i64 %4, %3
  %15 = xor i64 %14, %5
  %16 = lshr i64 %15, 4
  %17 = trunc i64 %16 to i8
  %18 = and i8 %17, 1
  store i8 %18, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %19 = icmp eq i64 %5, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %21 = lshr i64 %5, 63
  %22 = trunc i64 %21 to i8
  store i8 %22, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %23 = lshr i64 %3, 63
  %24 = lshr i64 %4, 63
  %25 = xor i64 %24, %23
  %26 = xor i64 %21, %23
  %27 = add nuw nsw i64 %26, %25
  %28 = icmp eq i64 %27, 2
  %29 = zext i1 %28 to i8
  store i8 %29, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %30 = or i8 %20, %7
  %31 = icmp ne i8 %30, 0
  br i1 %31, label %inst_2882, label %inst_2877

inst_283d:                                        ; preds = %inst_2830, %inst_2820
  %32 = load i8*, i8** @RAX_2216_56234d8e76a0
  %33 = load i64, i64* @RAX_2216_56234d8dffa8
  %34 = load i8, i8* %32
  %35 = zext i8 %34 to i64
  store i64 %35, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %36 = sub i8 %34, 56
  %37 = icmp eq i8 %36, 0
  %38 = zext i1 %37 to i8
  %39 = lshr i8 %36, 7
  %40 = lshr i8 %34, 7
  %41 = xor i8 %39, %40
  %42 = add nuw nsw i8 %41, %40
  %43 = icmp eq i8 %42, 2
  %44 = icmp eq i8 %38, 0
  %45 = icmp eq i8 %39, 0
  %46 = xor i1 %45, %43
  %47 = and i1 %44, %46
  br i1 %47, label %inst_2830, label %inst_2845

inst_2850:                                        ; preds = %inst_2830
  %48 = sub i64 %0, ptrtoint (i8* @data_208010 to i64)
  %49 = icmp ult i64 %0, ptrtoint (i8* @data_208010 to i64)
  %50 = zext i1 %49 to i8
  %51 = icmp eq i64 %48, 0
  %52 = zext i1 %51 to i8
  %53 = or i8 %52, %50
  %54 = icmp ne i8 %53, 0
  br i1 %54, label %inst_2888, label %inst_285c

inst_2830:                                        ; preds = %inst_283d
  %55 = sub i64 %33, 1
  store i64 %55, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 48, i8* %32
  %56 = sub i64 %0, %55
  %57 = icmp ult i64 %0, %55
  %58 = zext i1 %57 to i8
  %59 = icmp eq i64 %56, 0
  %60 = zext i1 %59 to i8
  %61 = or i8 %60, %58
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %inst_2850, label %inst_283d

inst_2845:                                        ; preds = %inst_283d
  %63 = load i32, i32* @RDX_2264_56234d8dff90
  %64 = zext i32 %63 to i64
  %65 = add i32 1, %63
  %66 = zext i32 %65 to i64
  store i64 %66, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %67 = icmp ult i32 %65, %63
  %68 = icmp ult i32 %65, 1
  %69 = or i1 %67, %68
  %70 = zext i1 %69 to i8
  store i8 %70, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %71 = and i32 %65, 255
  %72 = call i32 @llvm.ctpop.i32(i32 %71) #13, !range !1234
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %76 = xor i64 1, %64
  %77 = trunc i64 %76 to i32
  %78 = xor i32 %65, %77
  %79 = lshr i32 %78, 4
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  store i8 %81, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %82 = icmp eq i32 %65, 0
  %83 = zext i1 %82 to i8
  store i8 %83, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %84 = lshr i32 %65, 31
  %85 = trunc i32 %84 to i8
  store i8 %85, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %86 = lshr i32 %63, 31
  %87 = xor i32 %84, %86
  %88 = add nuw nsw i32 %87, %84
  %89 = icmp eq i32 %88, 2
  %90 = zext i1 %89 to i8
  store i8 %90, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %91 = trunc i64 %66 to i8
  store i8 %91, i8* %32
  %92 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %93 = add i64 %92, 8
  store i64 %93, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %memory

inst_2888:                                        ; preds = %inst_2850
  store i8 62, i8* @data_208010
  store i64 %0, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_286b

inst_285c:                                        ; preds = %inst_2850
  %94 = sub i64 %0, 1
  store i64 %94, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %95 = inttoptr i64 %94 to i8*
  store i8 49, i8* %95
  store i64 %94, i64* bitcast (i8** @data_208028 to i64*)
  br label %inst_286b

inst_2877:                                        ; preds = %inst_286b
  %96 = sub i64 %3, 1
  store i64 %96, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %97 = icmp ult i64 %3, 1
  %98 = zext i1 %97 to i8
  store i8 %98, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %99 = trunc i64 %96 to i32
  %100 = and i32 %99, 255
  %101 = call i32 @llvm.ctpop.i32(i32 %100) #13, !range !1234
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  store i8 %104, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %105 = xor i64 1, %3
  %106 = xor i64 %105, %96
  %107 = lshr i64 %106, 4
  %108 = trunc i64 %107 to i8
  %109 = and i8 %108, 1
  store i8 %109, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %110 = icmp eq i64 %96, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %112 = lshr i64 %96, 63
  %113 = trunc i64 %112 to i8
  store i8 %113, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %114 = xor i64 %112, %23
  %115 = add nuw nsw i64 %114, %23
  %116 = icmp eq i64 %115, 2
  %117 = zext i1 %116 to i8
  store i8 %117, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i64 %96, i64* bitcast (i8** @data_208030 to i64*)
  br label %inst_2882
}

; Function Attrs: noinline
define internal %struct.Memory* @sub_41e0(%struct.State* noalias nonnull %state, i64 %pc, %struct.Memory* noalias %memory) #9 {
inst_41e0:
  %0 = load i64, i64* @R15_2456_56234d8dffa8
  %1 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %2 = add i64 %1, -8
  %3 = inttoptr i64 %2 to i64*
  store i64 %0, i64* %3
  %4 = load i64, i64* @R14_2440_56234d8dffa8
  %5 = add i64 %2, -8
  %6 = getelementptr i64, i64* %3, i32 -1
  store i64 %4, i64* %6
  %7 = load i32, i32* @RDI_2296_56234d8dff90
  %8 = zext i32 %7 to i64
  %9 = shl i64 %8, 32
  %10 = ashr exact i64 %9, 32
  store i64 %10, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %11 = load i64, i64* @R13_2424_56234d8dffa8
  %12 = add i64 %5, -8
  %13 = getelementptr i64, i64* %6, i32 -1
  store i64 %11, i64* %13
  %14 = load i64, i64* @R12_2408_56234d8dffa8
  %15 = add i64 %12, -8
  %16 = getelementptr i64, i64* %13, i32 -1
  store i64 %14, i64* %16
  %17 = load i64, i64* @RDX_2264_56234d8dffa8
  store i64 %17, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %18 = load i64, i64* @RBP_2328_56234d8dffa8
  %19 = add i64 %15, -8
  %20 = getelementptr i64, i64* %16, i32 -1
  store i64 %18, i64* %20
  %21 = load i64, i64* @RBX_2232_56234d8dffa8
  %22 = add i64 %19, -8
  %23 = getelementptr i64, i64* %20, i32 -1
  store i64 %21, i64* %23
  %24 = load i64, i64* @RCX_2248_56234d8dffa8
  store i64 %24, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %25 = sub i64 %22, 40
  %26 = inttoptr i64 %25 to i64*
  %27 = icmp ult i64 %22, 40
  %28 = zext i1 %27 to i8
  store i8 %28, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %29 = trunc i64 %25 to i32
  %30 = and i32 %29, 255
  %31 = call i32 @llvm.ctpop.i32(i32 %30) #13, !range !1234
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %35 = xor i64 40, %22
  %36 = xor i64 %35, %25
  %37 = lshr i64 %36, 4
  %38 = trunc i64 %37 to i8
  %39 = and i8 %38, 1
  store i8 %39, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %40 = icmp eq i64 %25, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %42 = lshr i64 %25, 63
  %43 = trunc i64 %42 to i8
  store i8 %43, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %44 = lshr i64 %22, 63
  %45 = xor i64 %42, %44
  %46 = add nuw nsw i64 %45, %44
  %47 = icmp eq i64 %46, 2
  %48 = zext i1 %47 to i8
  store i8 %48, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %49 = load i64, i64* @RSI_2280_56234d8dffa8
  %50 = getelementptr i64, i64* %26, i32 1
  store i64 %49, i64* %50
  %51 = add i64 %25, -8
  %52 = getelementptr i64, i64* %26, i32 -1
  store i64 ptrtoint (i8* @data_4201 to i64), i64* %52
  store i64 %51, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %53 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %memory)
  %54 = load i32*, i32** @RAX_2216_56234d8ed000
  %55 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %55, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %56 = load i32, i32* %54
  %57 = zext i32 %56 to i64
  store i64 %57, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %58 = load i32, i32* @R15_2456_56234d8dff90
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %59 = and i32 %58, 255
  %60 = call i32 @llvm.ctpop.i32(i32 %59) #13, !range !1234
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  store i8 %63, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %64 = icmp eq i32 %58, 0
  %65 = zext i1 %64 to i8
  store i8 %65, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %66 = lshr i32 %58, 31
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %68 = load i64, i64* bitcast (i8** @data_2080a0 to i64*)
  store i64 %68, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %69 = load i64, i64* @RSP_2312_56234d8dffa8
  %70 = add i64 %69, 24
  %71 = inttoptr i64 %70 to i32*
  store i32 %56, i32* %71
  %72 = icmp eq i8 %67, 0
  %73 = select i1 %72, i64 ptrtoint (i8* @data_421a to i64), i64 ptrtoint (i8* @data_4381 to i64)
  %74 = icmp eq i8 %67, 1
  br i1 %74, label %inst_4381, label %inst_421a

inst_4285:                                        ; preds = %inst_421a, %inst_425d
  %75 = phi i64 [ %410, %inst_421a ], [ ptrtoint (i8* @data_4285 to i64), %inst_425d ]
  %76 = phi %struct.Memory* [ %53, %inst_421a ], [ %310, %inst_425d ]
  %77 = add i64 %75, 3
  %78 = load i64*, i64** @RBP_2328_56234d8e7800
  %79 = load i32*, i32** @RBP_2328_56234d8ed000
  %80 = load i64, i64* @RBP_2328_56234d8dffa8
  %81 = bitcast i32* %79 to i64*
  %82 = getelementptr i32, i32* %79, i32 1
  %83 = load i32, i32* %82
  %84 = zext i32 %83 to i64
  %85 = add i64 %77, 4
  %86 = load i64, i64* @R15_2456_56234d8dffa8
  %87 = shl i64 %86, 3
  %88 = shl i64 %87, 1
  %89 = add i64 %85, 4
  %90 = load i64, i64* @RSP_2312_56234d8dffa8
  %91 = sub i64 %90, 8
  %92 = inttoptr i64 %91 to i64*
  %93 = inttoptr i64 %91 to i32*
  %94 = add i64 %89, 3
  %95 = load i64, i64* @RBX_2232_56234d8dffa8
  %96 = add i64 %88, %95
  %97 = inttoptr i64 %96 to i64*
  store i64 %96, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %98 = add i64 %94, 4
  %99 = add i64 %80, 8
  store i64 %99, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %100 = add i64 %98, 4
  %101 = bitcast i64* %78 to i32*
  %102 = load i32, i32* %101
  %103 = zext i32 %102 to i64
  store i64 %103, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %104 = add i64 %100, 3
  %105 = load i64, i64* %97
  store i64 %105, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %106 = add i64 %104, 4
  %107 = getelementptr i64, i64* %97, i32 1
  %108 = load i64, i64* %107
  store i64 %108, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %109 = add i64 %106, 3
  %110 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %110, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %111 = add i64 %109, 3
  %112 = or i64 1, %84
  %113 = trunc i64 %112 to i32
  %114 = and i64 %112, 4294967295
  store i64 %114, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %115 = and i32 %113, 255
  %116 = call i32 @llvm.ctpop.i32(i32 %115) #13, !range !1234
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  store i8 %119, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 0, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %120 = lshr i32 %113, 31
  %121 = trunc i32 %120 to i8
  store i8 %121, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %122 = add i64 %111, 4
  %123 = trunc i64 %114 to i32
  %124 = getelementptr i32, i32* %93, i32 9
  store i32 %123, i32* %124
  %125 = add i64 %122, 3
  %126 = getelementptr i64, i64* %81, i32 6
  %127 = load i64, i64* %126
  %128 = add i64 %91, -8
  %129 = getelementptr i64, i64* %92, i32 -1
  store i64 %127, i64* %129
  %130 = add i64 %125, 3
  %131 = zext i32 %123 to i64
  %132 = and i64 %131, 4294967295
  store i64 %132, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  %133 = add i64 %130, 3
  %134 = getelementptr i64, i64* %78, i32 5
  %135 = load i64, i64* %134
  %136 = add i64 %128, -8
  %137 = getelementptr i64, i64* %129, i32 -1
  store i64 %135, i64* %137
  %138 = add i64 %133, 2
  %139 = add i64 %136, -8
  %140 = getelementptr i64, i64* %137, i32 -1
  store i64 %99, i64* %140
  %141 = add i64 %138, 3
  store i64 %105, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %142 = add i64 %141, 5
  %143 = getelementptr i64, i64* %140, i32 5
  %144 = load i64, i64* %143
  store i64 %144, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %145 = add i64 %142, 3
  store i64 %108, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %146 = add i64 %145, 5
  %147 = getelementptr i64, i64* %140, i32 6
  store i64 %105, i64* %147
  %148 = add i64 %146, 5
  %149 = add i64 %139, -8
  %150 = getelementptr i64, i64* %140, i32 -1
  store i64 %148, i64* %150
  store i64 %149, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %151 = call %struct.Memory* @sub_2fa0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %76)
  %152 = load i64, i64* @RSP_2312_56234d8dffa8
  %153 = add i64 32, %152
  %154 = inttoptr i64 %153 to i64*
  store i64 %153, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %155 = getelementptr i64, i64* %154, i32 2
  %156 = load i64, i64* %155
  store i64 %156, i64* @R11_2392_56234d8dffa8, align 8, !tbaa !1216
  %157 = load i64, i64* @RAX_2216_56234d8dffa8
  %158 = sub i64 %156, %157
  %159 = icmp ult i64 %156, %157
  %160 = zext i1 %159 to i8
  %161 = icmp eq i64 %158, 0
  %162 = zext i1 %161 to i8
  %163 = or i8 %162, %160
  %164 = icmp eq i8 %163, 0
  br i1 %164, label %inst_4341, label %inst_42da

inst_4386:                                        ; preds = %inst_4223, %inst_4381
  %165 = phi i64 [ ptrtoint (i8* @data_4386 to i64), %inst_4381 ], [ %439, %inst_4223 ]
  %166 = phi %struct.Memory* [ %391, %inst_4381 ], [ %53, %inst_4223 ]
  %167 = add i64 %165, 5
  %168 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170
  store i64 %169, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %171 = call %struct.Memory* @sub_5460(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %166)
  %172 = load i64, i64* @R12_2408_56234d8dffa8
  %173 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %174 = add i64 %173, -8
  %175 = inttoptr i64 %174 to i64*
  store i64 %172, i64* %175
  %176 = load i64, i64* @RBP_2328_56234d8dffa8
  %177 = add i64 %174, -8
  %178 = getelementptr i64, i64* %175, i32 -1
  store i64 %176, i64* %178
  %179 = load i64, i64* @RBX_2232_56234d8dffa8
  %180 = add i64 %177, -8
  %181 = getelementptr i64, i64* %178, i32 -1
  store i64 %179, i64* %181
  %182 = load i64, i64* @RDI_2296_56234d8dffa8
  store i64 %182, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %183 = add i64 %180, -8
  %184 = getelementptr i64, i64* %181, i32 -1
  store i64 ptrtoint (i8* @data_439c to i64), i64* %184
  store i64 %183, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %185 = call %struct.Memory* @ext_208280___errno_location(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %171)
  %186 = load i32*, i32** @RAX_2216_56234d8ed000
  %187 = load i64, i64* @RAX_2216_56234d8dffa8
  %188 = load i32, i32* %186
  %189 = zext i32 %188 to i64
  store i64 %189, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  store i64 %187, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_208220, i8** @RAX_2216_56234d8e76a0
  %190 = load i64, i64* @RBX_2232_56234d8dffa8
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %191 = trunc i64 %190 to i32
  %192 = and i32 %191, 255
  %193 = call i32 @llvm.ctpop.i32(i32 %192) #13, !range !1234
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  store i8 %196, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %197 = icmp eq i64 %190, 0
  %198 = zext i1 %197 to i8
  store i8 %198, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %199 = lshr i64 %190, 63
  %200 = trunc i64 %199 to i8
  store i8 %200, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  store i64 56, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %201 = icmp eq i8 %198, 0
  %202 = select i1 %201, i64 %190, i64 ptrtoint (i8* @data_208220 to i64)
  store i64 %202, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 %202, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %203 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %204 = add i64 %203, -8
  %205 = inttoptr i64 %204 to i64*
  store i64 ptrtoint (i8* @data_43bd to i64), i64* %205
  store i64 %204, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %206 = call %struct.Memory* @sub_5410(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %185)
  %207 = load i32*, i32** @RBP_2328_56234d8ed000
  %208 = load i32, i32* @R12_2408_56234d8dff90
  store i32 %208, i32* %207
  %209 = load i64*, i64** @RSP_2312_56234d8e7800
  %210 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %211 = add i64 %210, 8
  %212 = getelementptr i64, i64* %209, i32 1
  %213 = load i64, i64* %209
  store i64 %213, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %214 = add i64 %211, 8
  %215 = load i64, i64* %212
  store i64 %215, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %216 = add i64 %214, 8
  %217 = getelementptr i64, i64* %212, i32 1
  %218 = load i64, i64* %217
  store i64 %218, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %219 = add i64 %216, 8
  store i64 %219, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %206

inst_4341:                                        ; preds = %inst_42ff, %inst_4285
  %220 = phi %struct.Memory* [ %151, %inst_4285 ], [ %384, %inst_42ff ]
  %221 = load i64*, i64** @RSP_2312_56234d8e7800
  %222 = load i32*, i32** @RSP_2312_56234d8ed000
  %223 = load i64, i64* @RSP_2312_56234d8dffa8
  %224 = bitcast i32* %222 to i64*
  %225 = getelementptr i32, i32* %222, i32 6
  %226 = load i32, i32* %225
  %227 = load i32*, i32** @R13_2424_56234d8ed000
  store i32 %226, i32* %227
  %228 = add i64 40, %223
  %229 = getelementptr i64, i64* %221, i32 5
  %230 = getelementptr i64, i64* %224, i32 5
  %231 = icmp ult i64 %228, %223
  %232 = icmp ult i64 %228, 40
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %235 = trunc i64 %228 to i32
  %236 = and i32 %235, 255
  %237 = call i32 @llvm.ctpop.i32(i32 %236) #13, !range !1234
  %238 = trunc i32 %237 to i8
  %239 = and i8 %238, 1
  %240 = xor i8 %239, 1
  store i8 %240, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %241 = xor i64 40, %223
  %242 = xor i64 %241, %228
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %246 = icmp eq i64 %228, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %248 = lshr i64 %228, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %250 = lshr i64 %223, 63
  %251 = xor i64 %248, %250
  %252 = add nuw nsw i64 %251, %248
  %253 = icmp eq i64 %252, 2
  %254 = zext i1 %253 to i8
  store i8 %254, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %255 = load i64, i64* @R12_2408_56234d8dffa8
  store i64 %255, i64* @RAX_2216_56234d8dffa8, align 8, !tbaa !1216
  %256 = add i64 %228, 8
  %257 = getelementptr i64, i64* %230, i32 1
  %258 = getelementptr i64, i64* %229, i32 1
  %259 = load i64, i64* %230
  store i64 %259, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  %260 = add i64 %256, 8
  %261 = getelementptr i64, i64* %258, i32 1
  %262 = getelementptr i64, i64* %257, i32 1
  %263 = load i64, i64* %258
  store i64 %263, i64* @RBP_2328_56234d8dffa8, align 8, !tbaa !1216
  %264 = add i64 %260, 8
  %265 = getelementptr i64, i64* %262, i32 1
  %266 = getelementptr i64, i64* %261, i32 1
  %267 = load i64, i64* %262
  store i64 %267, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %268 = add i64 %264, 8
  %269 = getelementptr i64, i64* %266, i32 1
  %270 = load i64, i64* %266
  store i64 %270, i64* @R13_2424_56234d8dffa8, align 8, !tbaa !1216
  %271 = add i64 %268, 8
  %272 = getelementptr i64, i64* %265, i32 1
  %273 = load i64, i64* %272
  store i64 %273, i64* @R14_2440_56234d8dffa8, align 8, !tbaa !1216
  %274 = add i64 %271, 8
  %275 = getelementptr i64, i64* %269, i32 1
  %276 = load i64, i64* %275
  store i64 %276, i64* @R15_2456_56234d8dffa8, align 8, !tbaa !1216
  %277 = add i64 %274, 8
  store i64 %277, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  ret %struct.Memory* %220

inst_425d:                                        ; preds = %inst_424b, %inst_4360
  %278 = phi %struct.Memory* [ %486, %inst_4360 ], [ %509, %inst_424b ]
  %279 = load i32, i32* bitcast (i8* @data_208098 to i32*)
  %280 = sext i32 %279 to i64
  %281 = load i32, i32* @R12_2408_56234d8dff90
  %282 = zext i32 %281 to i64
  %283 = and i64 %282, 4294967295
  store i64 0, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %284 = trunc i64 %283 to i32
  %285 = sub i32 %284, %279
  %286 = zext i32 %285 to i64
  %287 = shl i64 %280, 3
  %288 = shl i64 %287, 1
  %289 = shl i64 %286, 32
  %290 = ashr exact i64 %289, 32
  %291 = load i64, i64* @RBX_2232_56234d8dffa8
  %292 = add i64 %291, %288
  store i64 %292, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %293 = shl i64 %290, 3
  %294 = shl i64 %293, 1
  store i64 %294, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %295 = lshr i64 %293, 63
  %296 = trunc i64 %295 to i8
  store i8 %296, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1240
  %297 = trunc i64 %294 to i32
  %298 = and i32 %297, 254
  %299 = call i32 @llvm.ctpop.i32(i32 %298) #13, !range !1234
  %300 = trunc i32 %299 to i8
  %301 = and i8 %300, 1
  %302 = xor i8 %301, 1
  store i8 %302, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1240
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1240
  %303 = icmp eq i64 %294, 0
  %304 = zext i1 %303 to i8
  store i8 %304, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1240
  %305 = lshr i64 %294, 63
  %306 = trunc i64 %305 to i8
  store i8 %306, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1240
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1240
  %307 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %308 = add i64 %307, -8
  %309 = inttoptr i64 %308 to i64*
  store i64 add (i64 ptrtoint (i8* @data_425d to i64), i64 33), i64* %309
  store i64 %308, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %310 = call %struct.Memory* @ext_208308_memset(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %278)
  %311 = load i32, i32* @R12_2408_56234d8dff90
  store i32 %311, i32* bitcast (i8* @data_208098 to i32*)
  br label %inst_4285

inst_42ff:                                        ; preds = %inst_42ed, %inst_42da
  %312 = phi i64 [ %538, %inst_42da ], [ ptrtoint (i8* @data_42ff to i64), %inst_42ed ]
  %313 = phi %struct.Memory* [ %151, %inst_42da ], [ %545, %inst_42ed ]
  %314 = add i64 %312, 3
  %315 = load i64, i64* @RSI_2280_56234d8dffa8
  store i64 %315, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %316 = add i64 %314, 5
  %317 = load i64*, i64** @RSP_2312_56234d8e7800
  %318 = load i64, i64* @RSP_2312_56234d8dffa8
  %319 = getelementptr i64, i64* %317, i32 2
  store i64 %315, i64* %319
  %320 = add i64 %316, 5
  %321 = add i64 %318, -8
  %322 = getelementptr i64, i64* %317, i32 -1
  store i64 %320, i64* %322
  store i64 %321, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %323 = call %struct.Memory* @sub_5210(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %313)
  %324 = load i64, i64* @RSP_2312_56234d8dffa8
  %325 = sub i64 %324, 8
  %326 = inttoptr i64 %325 to i64*
  %327 = inttoptr i64 %325 to i32*
  %328 = icmp ult i64 %324, 8
  %329 = zext i1 %328 to i8
  store i8 %329, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %330 = trunc i64 %325 to i32
  %331 = and i32 %330, 255
  %332 = call i32 @llvm.ctpop.i32(i32 %331) #13, !range !1234
  %333 = trunc i32 %332 to i8
  %334 = and i8 %333, 1
  %335 = xor i8 %334, 1
  store i8 %335, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %336 = xor i64 8, %324
  %337 = xor i64 %336, %325
  %338 = lshr i64 %337, 4
  %339 = trunc i64 %338 to i8
  %340 = and i8 %339, 1
  store i8 %340, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %341 = icmp eq i64 %325, 0
  %342 = zext i1 %341 to i8
  store i8 %342, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %343 = lshr i64 %325, 63
  %344 = trunc i64 %343 to i8
  store i8 %344, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %345 = lshr i64 %324, 63
  %346 = xor i64 %343, %345
  %347 = add nuw nsw i64 %346, %345
  %348 = icmp eq i64 %347, 2
  %349 = zext i1 %348 to i8
  store i8 %349, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %350 = load i64, i64* @RBX_2232_56234d8dffa8
  %351 = add i64 %350, 8
  %352 = load i64, i64* @RAX_2216_56234d8dffa8
  %353 = inttoptr i64 %351 to i64*
  store i64 %352, i64* %353
  %354 = load i64*, i64** @RBP_2328_56234d8e7800
  %355 = load i32*, i32** @RBP_2328_56234d8ed000
  %356 = bitcast i32* %355 to i64*
  %357 = bitcast i64* %354 to i32*
  %358 = load i32, i32* %357
  %359 = zext i32 %358 to i64
  store i64 %359, i64* @R8_2344_56234d8dffa8, align 8, !tbaa !1216
  %360 = getelementptr i64, i64* %354, i32 6
  %361 = load i64, i64* %360
  %362 = add i64 %325, -8
  %363 = getelementptr i64, i64* %326, i32 -1
  %364 = getelementptr i32, i32* %327, i32 -2
  store i64 %361, i64* %363
  %365 = getelementptr i64, i64* %356, i32 5
  %366 = load i64, i64* %365
  %367 = add i64 %362, -8
  %368 = getelementptr i64, i64* %363, i32 -1
  %369 = getelementptr i32, i32* %364, i32 -2
  store i64 %366, i64* %368
  %370 = load i64, i64* @R14_2440_56234d8dffa8
  store i64 %370, i64* @RCX_2248_56234d8dffa8, align 8, !tbaa !1216
  %371 = load i64, i64* @R15_2456_56234d8dffa8
  %372 = add i64 %367, -8
  %373 = getelementptr i64, i64* %368, i32 -1
  %374 = getelementptr i32, i32* %369, i32 -2
  store i64 %371, i64* %373
  %375 = getelementptr i32, i32* %374, i32 15
  %376 = load i32, i32* %375
  %377 = zext i32 %376 to i64
  store i64 %377, i64* @R9_2360_56234d8dffa8, align 8, !tbaa !1216
  store i64 %352, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %378 = getelementptr i64, i64* %373, i32 5
  %379 = load i64, i64* %378
  store i64 %379, i64* @RDX_2264_56234d8dffa8, align 8, !tbaa !1216
  %380 = getelementptr i64, i64* %373, i32 6
  %381 = load i64, i64* %380
  store i64 %381, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i64 %352, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %382 = add i64 %372, -8
  %383 = getelementptr i64, i64* %373, i32 -1
  store i64 ptrtoint (i8* @data_433d to i64), i64* %383
  store i64 %382, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %384 = call %struct.Memory* @sub_2fa0(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %323)
  %385 = load i64, i64* @RSP_2312_56234d8dffa8
  %386 = add i64 32, %385
  store i64 %386, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_4341

inst_4381:                                        ; preds = %inst_41e0
  %387 = add i64 %73, 5
  %388 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %389 = add i64 %388, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %387, i64* %390
  store i64 %389, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %391 = call %struct.Memory* @ext_208278_abort(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %53)
  br label %inst_4386

inst_421a:                                        ; preds = %inst_41e0
  %392 = add i64 %73, 7
  %393 = load i32, i32* bitcast (i8* @data_208098 to i32*)
  %394 = sub i32 %393, %58
  %395 = icmp eq i32 %394, 0
  %396 = zext i1 %395 to i8
  %397 = lshr i32 %394, 31
  %398 = trunc i32 %397 to i8
  %399 = lshr i32 %393, 31
  %400 = xor i32 %399, %66
  %401 = xor i32 %397, %399
  %402 = add nuw nsw i32 %401, %400
  %403 = icmp eq i32 %402, 2
  %404 = add i64 %392, 2
  %405 = add i64 %404, 98
  %406 = icmp eq i8 %396, 0
  %407 = icmp eq i8 %398, 0
  %408 = xor i1 %407, %403
  %409 = and i1 %406, %408
  %410 = select i1 %409, i64 %405, i64 %404
  br i1 %409, label %inst_4285, label %inst_4223

inst_4223:                                        ; preds = %inst_421a
  %411 = zext i32 %58 to i64
  %412 = add i64 %410, 7
  %413 = sub i32 %58, 2147483646
  %414 = icmp ult i32 %58, 2147483646
  %415 = zext i1 %414 to i8
  store i8 %415, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %416 = and i32 %413, 255
  %417 = call i32 @llvm.ctpop.i32(i32 %416) #13, !range !1234
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = xor i8 %419, 1
  store i8 %420, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %421 = xor i64 2147483646, %411
  %422 = trunc i64 %421 to i32
  %423 = xor i32 %413, %422
  %424 = lshr i32 %423, 4
  %425 = trunc i32 %424 to i8
  %426 = and i8 %425, 1
  store i8 %426, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %427 = icmp eq i32 %413, 0
  %428 = zext i1 %427 to i8
  store i8 %428, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %429 = lshr i32 %413, 31
  %430 = trunc i32 %429 to i8
  store i8 %430, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %431 = xor i32 %429, %66
  %432 = add nuw nsw i32 %431, %66
  %433 = icmp eq i32 %432, 2
  %434 = zext i1 %433 to i8
  store i8 %434, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %435 = add i64 %412, 6
  %436 = add i64 %435, 342
  %437 = or i8 %428, %415
  %438 = icmp eq i8 %437, 0
  %439 = select i1 %438, i64 %436, i64 %435
  br i1 %438, label %inst_4386, label %inst_4230

inst_4230:                                        ; preds = %inst_4223
  %440 = add i64 %439, 4
  %441 = load i64, i64* @R15_2456_56234d8dffa8
  %442 = add i64 %441, 1
  %443 = and i64 %442, 4294967295
  store i64 %443, i64* @R12_2408_56234d8dffa8, align 8, !tbaa !1216
  %444 = add i64 %440, 7
  store i8* @data_2080b0, i8** @RAX_2216_56234d8e76a0
  %445 = add i64 %444, 3
  %446 = trunc i64 %443 to i32
  %447 = zext i32 %446 to i64
  %448 = shl i64 %447, 32
  %449 = ashr exact i64 %448, 32
  %450 = add i64 %445, 4
  %451 = shl i64 %449, 3
  %452 = shl i64 %451, 1
  store i64 %452, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  %453 = add i64 %450, 3
  %454 = sub i64 %68, ptrtoint (i8* @data_2080b0 to i64)
  %455 = icmp ult i64 %68, ptrtoint (i8* @data_2080b0 to i64)
  %456 = zext i1 %455 to i8
  store i8 %456, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %457 = trunc i64 %454 to i32
  %458 = and i32 %457, 255
  %459 = call i32 @llvm.ctpop.i32(i32 %458) #13, !range !1234
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  store i8 %462, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %463 = xor i64 ptrtoint (i8* @data_2080b0 to i64), %68
  %464 = xor i64 %463, %454
  %465 = lshr i64 %464, 4
  %466 = trunc i64 %465 to i8
  %467 = and i8 %466, 1
  store i8 %467, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %468 = icmp eq i64 %454, 0
  %469 = zext i1 %468 to i8
  store i8 %469, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %470 = lshr i64 %454, 63
  %471 = trunc i64 %470 to i8
  store i8 %471, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %472 = lshr i64 %68, 63
  %473 = xor i64 %470, %472
  %474 = add nuw nsw i64 %473, %472
  %475 = icmp eq i64 %474, 2
  %476 = zext i1 %475 to i8
  store i8 %476, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %477 = add i64 %453, 6
  %478 = add i64 %477, 277
  %479 = icmp eq i8 %469, 0
  %480 = select i1 %479, i64 %477, i64 %478
  br i1 %468, label %inst_4360, label %inst_424b

inst_4360:                                        ; preds = %inst_4230
  %481 = add i64 %480, 2
  store i64 0, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  store i8 0, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  store i8 1, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  store i8 1, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  store i8 0, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  store i8 0, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  store i8 0, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %482 = add i64 %481, 5
  %483 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %484 = add i64 %483, -8
  %485 = inttoptr i64 %484 to i64*
  store i64 %482, i64* %485
  store i64 %484, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %486 = call %struct.Memory* @sub_5270(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %53)
  %487 = load i64, i64* bitcast (i8* @data_2080b0 to i64*)
  %488 = load i64, i64* bitcast (i8** @data_2080b8 to i64*)
  %489 = zext i64 %488 to i128
  %490 = shl nuw i128 %489, 64
  %491 = zext i64 %487 to i128
  %492 = or i128 %490, %491
  store i128 %492, i128* @XMM0_16_56234d8dffc0, align 1, !tbaa !1241
  %493 = load float*, float** @RAX_2216_56234d8ed640
  %494 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %494, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 %494, i64* bitcast (i8** @data_2080a0 to i64*)
  %495 = load <2 x float>, <2 x float>* @XMM0_16_56234d8ed4d0, align 1
  %496 = load <2 x float>, <2 x float>* @XMM0_24_56234d8ed4d0, align 1
  %497 = extractelement <2 x float> %495, i32 0
  store float %497, float* %493
  %498 = extractelement <2 x float> %495, i32 1
  %499 = getelementptr float, float* %493, i32 1
  store float %498, float* %499
  %500 = extractelement <2 x float> %496, i32 0
  %501 = getelementptr float, float* %493, i32 2
  store float %500, float* %501
  %502 = extractelement <2 x float> %496, i32 1
  %503 = getelementptr float, float* %493, i32 3
  store float %502, float* %503
  br label %inst_425d

inst_424b:                                        ; preds = %inst_4230
  %504 = add i64 %480, 3
  store i64 %68, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %505 = add i64 %504, 5
  %506 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %507 = add i64 %506, -8
  %508 = inttoptr i64 %507 to i64*
  store i64 %505, i64* %508
  store i64 %507, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %509 = call %struct.Memory* @sub_5270(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %53)
  %510 = load i64, i64* @RAX_2216_56234d8dffa8
  store i64 %510, i64* @RBX_2232_56234d8dffa8, align 8, !tbaa !1216
  store i64 %510, i64* bitcast (i8** @data_2080a0 to i64*)
  br label %inst_425d

inst_42da:                                        ; preds = %inst_4285
  %511 = add i64 %157, 1
  store i64 %511, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  store i8* @data_208120, i8** @RAX_2216_56234d8e76a0
  %512 = load i64, i64* @R12_2408_56234d8dffa8
  %513 = sub i64 %512, ptrtoint (i8* @data_208120 to i64)
  %514 = icmp ult i64 %512, ptrtoint (i8* @data_208120 to i64)
  %515 = zext i1 %514 to i8
  store i8 %515, i8* @CF_2065_56234d8dff60, align 1, !tbaa !1220
  %516 = trunc i64 %513 to i32
  %517 = and i32 %516, 255
  %518 = call i32 @llvm.ctpop.i32(i32 %517) #13, !range !1234
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = xor i8 %520, 1
  store i8 %521, i8* @PF_2067_56234d8dff60, align 1, !tbaa !1235
  %522 = xor i64 ptrtoint (i8* @data_208120 to i64), %512
  %523 = xor i64 %522, %513
  %524 = lshr i64 %523, 4
  %525 = trunc i64 %524 to i8
  %526 = and i8 %525, 1
  store i8 %526, i8* @AF_2069_56234d8dff60, align 1, !tbaa !1236
  %527 = icmp eq i64 %513, 0
  %528 = zext i1 %527 to i8
  store i8 %528, i8* @ZF_2071_56234d8dff60, align 1, !tbaa !1237
  %529 = lshr i64 %513, 63
  %530 = trunc i64 %529 to i8
  store i8 %530, i8* @SF_2073_56234d8dff60, align 1, !tbaa !1238
  %531 = lshr i64 %512, 63
  %532 = xor i64 %529, %531
  %533 = add nuw nsw i64 %532, %531
  %534 = icmp eq i64 %533, 2
  %535 = zext i1 %534 to i8
  store i8 %535, i8* @OF_2077_56234d8dff60, align 1, !tbaa !1239
  %536 = load i64*, i64** @RBX_2232_56234d8e7800
  store i64 %511, i64* %536
  %537 = icmp eq i8 %528, 0
  %538 = select i1 %537, i64 add (i64 ptrtoint (i8* @data_42da to i64), i64 19), i64 add (i64 ptrtoint (i8* @data_42da to i64), i64 37)
  br i1 %527, label %inst_42ff, label %inst_42ed

inst_42ed:                                        ; preds = %inst_42da
  %539 = add i64 %538, 3
  store i64 %512, i64* @RDI_2296_56234d8dffa8, align 8, !tbaa !1216
  %540 = add i64 %539, 5
  store i64 %511, i64* %155
  %541 = add i64 %540, 5
  %542 = load i64, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1240
  %543 = add i64 %542, -8
  %544 = inttoptr i64 %543 to i64*
  store i64 %541, i64* %544
  store i64 %543, i64* @RSP_2312_56234d8dffa8, align 8, !tbaa !1216
  %545 = call %struct.Memory* @ext_208270_free(%struct.State* @__mcsema_reg_state, i64 undef, %struct.Memory* %151)
  %546 = load i64, i64* @RSP_2312_56234d8dffa8
  %547 = add i64 %546, 16
  %548 = inttoptr i64 %547 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* @RSI_2280_56234d8dffa8, align 8, !tbaa !1216
  br label %inst_42ff
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_1970_fflush(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @fflush to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @fflush(i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @fseeko(i64, i64, i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @nl_langinfo(i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_2083c8_error(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (...)* @error to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
declare !remill.function.type !1245 i64 @error(...) #10

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @strrchr(i64, i64) #11

; Function Attrs: noinline
define weak x86_64_sysvcc void @__gmon_start__() #10 !remill.function.type !1246 {
  ret void
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @iswprint(i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @mbsinit(i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @ungetc(i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_2083a8_fdopen(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64)* @fdopen to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @fdopen(i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208398___freading(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @__freading to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @__freading(i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208388_ungetc(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64)* @ungetc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1246 extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @strncmp(i64, i64, i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @__errno_location() #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208340_memcmp(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @memcmp to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @memcmp(i64, i64, i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @__ctype_b_loc() #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208368_fileno(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @fileno to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @fileno(i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @lseek(i64, i64, i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @malloc(i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @__cxa_finalize(i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208260___uflow(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @__uflow to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @__uflow(i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @realloc(i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208348_fputs_unlocked(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64)* @fputs_unlocked to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @fputs_unlocked(i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_1940_memcpy(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @memcpy(i64, i64, i64) #11

; Function Attrs: noinline
declare !remill.function.type !1246 extern_weak x86_64_sysvcc void @__libc_start_main(i32 (i32, i8**, i8**)*, i32, i8**, i8*, i32 (i32, i8**, i8**)*, void ()*, void ()*, i32*) #10

; Function Attrs: noinline noreturn
declare !remill.function.type !1245 x86_64_sysvcc void @abort() #12

; Function Attrs: noinline
define internal %struct.Memory* @ext_208330_read(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @read to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @read(i64, i64, i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @write(i64, i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208380_nl_langinfo(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @nl_langinfo to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_1a30_fseeko(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @fseeko to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_208318_ioctl(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (...)* @ioctl to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
declare !remill.function.type !1245 i64 @ioctl(...) #10

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @_exit(i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208360_memcpy(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @textdomain(i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208390___fxstat(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @__fxstat to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @__fxstat(i64, i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208408_mbsinit(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @mbsinit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082a0_write(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @write to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_208310_fscanf(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (...)* @fscanf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
declare !remill.function.type !1245 i64 @fscanf(...) #10

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @getenv(i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_2083e8_getpagesize(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 ()* @getpagesize to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @getpagesize() #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208288_strncmp(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @strncmp to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_208358_strcmp(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64)* @strcmp to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @strcmp(i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_1910_fputs_unlocked(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64)* @fputs_unlocked to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @posix_fadvise(i64, i64, i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_18a0_memset(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @memset(i64, i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_2083f8_fwrite(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64, i64)* @fwrite to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @fwrite(i64, i64, i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082c0_stpcpy(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64)* @stpcpy to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @stpcpy(i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_2083b8___printf_chk(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (...)* @__printf_chk to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
declare !remill.function.type !1245 i64 @__printf_chk(...) #10

; Function Attrs: noinline
define internal %struct.Memory* @ext_208280___errno_location(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 ()* @__errno_location to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_18e0_posix_fadvise(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64, i64)* @posix_fadvise to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_208418___cxa_finalize(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @__cxa_finalize to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_208308_memset(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_1a80___fprintf_chk(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (...)* @__fprintf_chk to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
declare !remill.function.type !1245 i64 @__fprintf_chk(...) #10

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @getopt_long(i64, i64, i64, i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208410_iswprint(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @iswprint to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @setlocale(i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_1a40___cxa_atexit(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @__cxa_atexit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @__cxa_atexit(i64, i64, i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @__ctype_get_mb_cur_max() #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1246 extern_weak x86_64_sysvcc i64 @_ITM_deregisterTMCloneTable(i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_2083d0_open(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64, i64)* @open to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @open(i64, i64, i64, i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @dcgettext(i64, i64, i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @__stack_chk_fail() #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208400___fprintf_chk(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (...)* @__fprintf_chk to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline noreturn
declare !remill.function.type !1245 x86_64_sysvcc void @exit(i32) #12

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1246 extern_weak x86_64_sysvcc i64 @_ITM_registerTMCloneTable(i64, i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @strlen(i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_2083f0_exit(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (void (i32)* @exit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082e0___stack_chk_fail(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 ()* @__stack_chk_fail to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @bindtextdomain(i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_2083b0_setlocale(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64)* @setlocale to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @__fpending(i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208370_malloc(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @malloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_208268_getenv(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @getenv to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082d0___ctype_get_mb_cur_max(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 ()* @__ctype_get_mb_cur_max to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_208420___ctype_b_loc(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 ()* @__ctype_b_loc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @mbrtowc(i64, i64, i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208278_abort(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (void ()* @abort to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_208290__exit(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @_exit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_2083c0_memmove(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @memmove to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @memmove(i64, i64, i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_208298___fpending(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @__fpending to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_208270_free(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @free(i64) #11

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @close(i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082a8_textdomain(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @textdomain to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082b0_fclose(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @fclose to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: nobuiltin noinline
declare !remill.function.type !1245 x86_64_sysvcc i64 @fclose(i64) #11

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082b8_bindtextdomain(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64)* @bindtextdomain to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_208320_close(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @close to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082c8_dcgettext(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @dcgettext to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_17f0_fclose(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @fclose to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_2083a0_realloc(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64)* @realloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082d8_strlen(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64)* @strlen to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082e8_getopt_long(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64, i64, i64)* @getopt_long to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082f0_mbrtowc(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64, i64)* @mbrtowc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_2082f8_strrchr(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64)* @strrchr to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_208300_lseek(%struct.State* %0, i64 %1, %struct.Memory* %2) #10 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* @__mcsema_reg_state, i64 ptrtoint (i64 (i64, i64, i64)* @lseek to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
declare !remill.function.type !1247 void @__mcsema_attach_call() #10

; Function Attrs: naked nobuiltin noinline
define private void @callback_sub_5210() #8 {
  call void asm sideeffect "pushq $0;pushq $$0x5210;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_5210_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_5210(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal void @__mcsema_early_init() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

2:                                                ; preds = %0
  ret void

3:                                                ; preds = %0
  store volatile i1 true, i1* @0
  ret void
}

; Function Attrs: naked nobuiltin noinline
define private void @callback_sub_4870() #8 {
  call void asm sideeffect "pushq $0;pushq $$0x4870;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4870_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_4870(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define private void @callback_sub_2ca0() #8 {
  call void asm sideeffect "pushq $0;pushq $$0x2ca0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_2ca0_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_2ca0(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport x86_64_sysvcc i32 @main(i32 %param0, i8** %param1, i8** %param2) #8 !remill.function.type !1245 {
  call void asm sideeffect "pushq $0;pushq $$0x1b00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret i32 undef
}

define internal %struct.Memory* @main_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_1b00_main(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @fini_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_5bf0_fini(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define private void @callback_sub_4c00() #8 {
  call void asm sideeffect "pushq $0;pushq $$0x4c00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4c00_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_4c00(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define private void @callback_sub_5270() #8 {
  call void asm sideeffect "pushq $0;pushq $$0x5270;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_5270_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_5270(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define private void @callback_sub_49e0() #8 {
  call void asm sideeffect "pushq $0;pushq $$0x49e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_49e0_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_49e0(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal %struct.Memory* @init_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_5b80_init(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dso_local dllexport void @start() #8 !remill.function.type !1245 {
  call void asm sideeffect "pushq $0;pushq $$0x2710;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @start_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_2710_start(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define private void @callback_sub_2810() #8 {
  call void asm sideeffect "pushq $0;pushq $$0x2810;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_2810_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_2810(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define private void @callback_sub_27d0() #8 {
  call void asm sideeffect "pushq $0;pushq $$0x27d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_27d0_wrapper(%struct.State* %0, i64 %1, %struct.Memory* %2) {
  call void @__mcsema_early_init()
  %4 = tail call %struct.Memory* @sub_27d0(%struct.State* @__mcsema_reg_state, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %4
}

define internal void @__mcsema_constructor() {
  call void @init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { alwaysinline inlinehint noduplicate noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { alwaysinline inlinehint noduplicate noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { naked nobuiltin noinline }
attributes #9 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noinline }
attributes #11 = { nobuiltin noinline }
attributes #12 = { noinline noreturn }
attributes #13 = { nounwind }

!llvm.ident = !{!0, !0, !0}
!llvm.module.flags = !{!1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{!"clang version 9.0.0 (tags/RELEASE_900/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !5, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !6, imports: !7, nameTableKind: None)
!5 = !DIFile(filename: "/home/swlab/build/remill/lib/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/swlab/build/remill-build/lib/Arch/X86/Runtime")
!6 = !{}
!7 = !{!8, !13, !20, !24, !31, !35, !40, !42, !50, !54, !58, !72, !76, !80, !84, !88, !93, !97, !101, !105, !109, !117, !121, !125, !127, !131, !135, !140, !146, !150, !154, !156, !164, !168, !176, !178, !182, !186, !190, !194, !199, !204, !209, !210, !211, !212, !214, !215, !216, !217, !218, !219, !220, !276, !280, !297, !300, !305, !313, !318, !322, !326, !330, !334, !336, !338, !342, !348, !352, !358, !364, !366, !370, !374, !378, !382, !393, !395, !399, !403, !407, !409, !413, !417, !421, !423, !425, !429, !437, !441, !445, !449, !451, !457, !459, !465, !469, !473, !477, !481, !485, !489, !491, !493, !497, !501, !505, !507, !511, !515, !517, !519, !523, !527, !531, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !550, !553, !555, !557, !559, !561, !563, !565, !567, !569, !571, !573, !575, !577, !580, !583, !585, !587, !589, !591, !593, !595, !597, !599, !601, !603, !605, !607, !610, !612, !616, !620, !625, !629, !631, !633, !635, !637, !639, !641, !643, !645, !647, !649, !651, !653, !655, !659, !665, !670, !674, !676, !678, !680, !682, !689, !693, !697, !701, !705, !709, !714, !718, !720, !724, !730, !734, !739, !741, !743, !747, !751, !755, !757, !759, !761, !763, !767, !769, !771, !775, !779, !783, !787, !791, !793, !795, !799, !803, !807, !811, !813, !815, !819, !823, !824, !825, !826, !827, !828, !834, !836, !838, !842, !844, !846, !848, !850, !852, !854, !856, !861, !865, !867, !869, !874, !876, !878, !880, !882, !884, !886, !889, !891, !893, !897, !901, !903, !905, !907, !909, !911, !913, !915, !917, !919, !921, !925, !929, !931, !933, !935, !937, !939, !941, !943, !945, !947, !949, !951, !953, !955, !957, !959, !963, !967, !971, !973, !975, !977, !979, !981, !983, !985, !987, !989, !993, !997, !1001, !1003, !1005, !1007, !1011, !1015, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1037, !1039, !1041, !1043, !1047, !1051, !1055, !1057, !1059, !1061, !1063, !1067, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1087, !1091, !1093, !1095, !1097, !1099, !1103, !1107, !1111, !1113, !1115, !1117, !1119, !1121, !1123, !1127, !1131, !1135, !1137, !1141, !1145, !1147, !1149, !1151, !1153, !1155, !1157, !1162, !1164, !1167, !1172, !1174, !1180, !1182, !1184, !1186, !1191, !1193, !1199, !1201, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214}
!8 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !9, entity: !10, file: !12, line: 58)
!9 = !DINamespace(name: "__gnu_debug", scope: null)
!10 = !DINamespace(name: "__debug", scope: !11)
!11 = !DINamespace(name: "std", scope: null)
!12 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/debug/debug.h", directory: "")
!13 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !14, file: !19, line: 52)
!14 = !DISubprogram(name: "abs", scope: !15, file: !15, line: 837, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!15 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!16 = !DISubroutineType(types: !17)
!17 = !{!18, !18}
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/std_abs.h", directory: "")
!20 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !21, file: !23, line: 127)
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !15, line: 62, baseType: !22)
!22 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !15, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!23 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/cstdlib", directory: "")
!24 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !25, file: !23, line: 128)
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !15, line: 70, baseType: !26)
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !15, line: 66, size: 128, flags: DIFlagTypePassByValue, elements: !27, identifier: "_ZTS6ldiv_t")
!27 = !{!28, !30}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !26, file: !15, line: 68, baseType: !29, size: 64)
!29 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !26, file: !15, line: 69, baseType: !29, size: 64, offset: 64)
!31 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !32, file: !23, line: 130)
!32 = !DISubprogram(name: "abort", scope: !15, file: !15, line: 588, type: !33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: 0)
!33 = !DISubroutineType(types: !34)
!34 = !{null}
!35 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !36, file: !23, line: 134)
!36 = !DISubprogram(name: "atexit", scope: !15, file: !15, line: 592, type: !37, flags: DIFlagPrototyped, spFlags: 0)
!37 = !DISubroutineType(types: !38)
!38 = !{!18, !39}
!39 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64)
!40 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !41, file: !23, line: 137)
!41 = !DISubprogram(name: "at_quick_exit", scope: !15, file: !15, line: 597, type: !37, flags: DIFlagPrototyped, spFlags: 0)
!42 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !43, file: !23, line: 140)
!43 = !DISubprogram(name: "atof", scope: !15, file: !15, line: 101, type: !44, flags: DIFlagPrototyped, spFlags: 0)
!44 = !DISubroutineType(types: !45)
!45 = !{!46, !47}
!46 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!48 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !49)
!49 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!50 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !51, file: !23, line: 141)
!51 = !DISubprogram(name: "atoi", scope: !15, file: !15, line: 104, type: !52, flags: DIFlagPrototyped, spFlags: 0)
!52 = !DISubroutineType(types: !53)
!53 = !{!18, !47}
!54 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !55, file: !23, line: 142)
!55 = !DISubprogram(name: "atol", scope: !15, file: !15, line: 107, type: !56, flags: DIFlagPrototyped, spFlags: 0)
!56 = !DISubroutineType(types: !57)
!57 = !{!29, !47}
!58 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !59, file: !23, line: 143)
!59 = !DISubprogram(name: "bsearch", scope: !15, file: !15, line: 817, type: !60, flags: DIFlagPrototyped, spFlags: 0)
!60 = !DISubroutineType(types: !61)
!61 = !{!62, !63, !63, !65, !65, !68}
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!63 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !64, size: 64)
!64 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!65 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !66, line: 46, baseType: !67)
!66 = !DIFile(filename: "libraries/llvm/lib/clang/9.0.0/include/stddef.h", directory: "/home/swlab/build/remill-build")
!67 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!68 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !15, line: 805, baseType: !69)
!69 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !70, size: 64)
!70 = !DISubroutineType(types: !71)
!71 = !{!18, !63, !63}
!72 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !73, file: !23, line: 144)
!73 = !DISubprogram(name: "calloc", scope: !15, file: !15, line: 541, type: !74, flags: DIFlagPrototyped, spFlags: 0)
!74 = !DISubroutineType(types: !75)
!75 = !{!62, !65, !65}
!76 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !77, file: !23, line: 145)
!77 = !DISubprogram(name: "div", scope: !15, file: !15, line: 849, type: !78, flags: DIFlagPrototyped, spFlags: 0)
!78 = !DISubroutineType(types: !79)
!79 = !{!21, !18, !18}
!80 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !81, file: !23, line: 146)
!81 = !DISubprogram(name: "exit", scope: !15, file: !15, line: 614, type: !82, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: 0)
!82 = !DISubroutineType(types: !83)
!83 = !{null, !18}
!84 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !85, file: !23, line: 147)
!85 = !DISubprogram(name: "free", scope: !15, file: !15, line: 563, type: !86, flags: DIFlagPrototyped, spFlags: 0)
!86 = !DISubroutineType(types: !87)
!87 = !{null, !62}
!88 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !89, file: !23, line: 148)
!89 = !DISubprogram(name: "getenv", scope: !15, file: !15, line: 631, type: !90, flags: DIFlagPrototyped, spFlags: 0)
!90 = !DISubroutineType(types: !91)
!91 = !{!92, !47}
!92 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !49, size: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !94, file: !23, line: 149)
!94 = !DISubprogram(name: "labs", scope: !15, file: !15, line: 838, type: !95, flags: DIFlagPrototyped, spFlags: 0)
!95 = !DISubroutineType(types: !96)
!96 = !{!29, !29}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !98, file: !23, line: 150)
!98 = !DISubprogram(name: "ldiv", scope: !15, file: !15, line: 851, type: !99, flags: DIFlagPrototyped, spFlags: 0)
!99 = !DISubroutineType(types: !100)
!100 = !{!25, !29, !29}
!101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !102, file: !23, line: 151)
!102 = !DISubprogram(name: "malloc", scope: !15, file: !15, line: 539, type: !103, flags: DIFlagPrototyped, spFlags: 0)
!103 = !DISubroutineType(types: !104)
!104 = !{!62, !65}
!105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !106, file: !23, line: 153)
!106 = !DISubprogram(name: "mblen", scope: !15, file: !15, line: 919, type: !107, flags: DIFlagPrototyped, spFlags: 0)
!107 = !DISubroutineType(types: !108)
!108 = !{!18, !47, !65}
!109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !110, file: !23, line: 154)
!110 = !DISubprogram(name: "mbstowcs", scope: !15, file: !15, line: 930, type: !111, flags: DIFlagPrototyped, spFlags: 0)
!111 = !DISubroutineType(types: !112)
!112 = !{!65, !113, !116, !65}
!113 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !114)
!114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !115, size: 64)
!115 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!116 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !47)
!117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !118, file: !23, line: 155)
!118 = !DISubprogram(name: "mbtowc", scope: !15, file: !15, line: 922, type: !119, flags: DIFlagPrototyped, spFlags: 0)
!119 = !DISubroutineType(types: !120)
!120 = !{!18, !113, !116, !65}
!121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !122, file: !23, line: 157)
!122 = !DISubprogram(name: "qsort", scope: !15, file: !15, line: 827, type: !123, flags: DIFlagPrototyped, spFlags: 0)
!123 = !DISubroutineType(types: !124)
!124 = !{null, !62, !65, !65, !68}
!125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !126, file: !23, line: 160)
!126 = !DISubprogram(name: "quick_exit", scope: !15, file: !15, line: 620, type: !82, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: 0)
!127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !128, file: !23, line: 163)
!128 = !DISubprogram(name: "rand", scope: !15, file: !15, line: 453, type: !129, flags: DIFlagPrototyped, spFlags: 0)
!129 = !DISubroutineType(types: !130)
!130 = !{!18}
!131 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !132, file: !23, line: 164)
!132 = !DISubprogram(name: "realloc", scope: !15, file: !15, line: 549, type: !133, flags: DIFlagPrototyped, spFlags: 0)
!133 = !DISubroutineType(types: !134)
!134 = !{!62, !62, !65}
!135 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !136, file: !23, line: 165)
!136 = !DISubprogram(name: "srand", scope: !15, file: !15, line: 455, type: !137, flags: DIFlagPrototyped, spFlags: 0)
!137 = !DISubroutineType(types: !138)
!138 = !{null, !139}
!139 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !141, file: !23, line: 166)
!141 = !DISubprogram(name: "strtod", scope: !15, file: !15, line: 117, type: !142, flags: DIFlagPrototyped, spFlags: 0)
!142 = !DISubroutineType(types: !143)
!143 = !{!46, !116, !144}
!144 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !145)
!145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !92, size: 64)
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !147, file: !23, line: 167)
!147 = !DISubprogram(name: "strtol", scope: !15, file: !15, line: 176, type: !148, flags: DIFlagPrototyped, spFlags: 0)
!148 = !DISubroutineType(types: !149)
!149 = !{!29, !116, !144, !18}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !151, file: !23, line: 168)
!151 = !DISubprogram(name: "strtoul", scope: !15, file: !15, line: 180, type: !152, flags: DIFlagPrototyped, spFlags: 0)
!152 = !DISubroutineType(types: !153)
!153 = !{!67, !116, !144, !18}
!154 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !155, file: !23, line: 169)
!155 = !DISubprogram(name: "system", scope: !15, file: !15, line: 781, type: !52, flags: DIFlagPrototyped, spFlags: 0)
!156 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !157, file: !23, line: 171)
!157 = !DISubprogram(name: "wcstombs", scope: !15, file: !15, line: 933, type: !158, flags: DIFlagPrototyped, spFlags: 0)
!158 = !DISubroutineType(types: !159)
!159 = !{!65, !160, !161, !65}
!160 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !92)
!161 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !162)
!162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !163, size: 64)
!163 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !115)
!164 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !165, file: !23, line: 172)
!165 = !DISubprogram(name: "wctomb", scope: !15, file: !15, line: 926, type: !166, flags: DIFlagPrototyped, spFlags: 0)
!166 = !DISubroutineType(types: !167)
!167 = !{!18, !92, !115}
!168 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !170, file: !23, line: 200)
!169 = !DINamespace(name: "__gnu_cxx", scope: null)
!170 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !15, line: 80, baseType: !171)
!171 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !15, line: 76, size: 128, flags: DIFlagTypePassByValue, elements: !172, identifier: "_ZTS7lldiv_t")
!172 = !{!173, !175}
!173 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !171, file: !15, line: 78, baseType: !174, size: 64)
!174 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !171, file: !15, line: 79, baseType: !174, size: 64, offset: 64)
!176 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !177, file: !23, line: 206)
!177 = !DISubprogram(name: "_Exit", scope: !15, file: !15, line: 626, type: !82, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: 0)
!178 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !179, file: !23, line: 210)
!179 = !DISubprogram(name: "llabs", scope: !15, file: !15, line: 841, type: !180, flags: DIFlagPrototyped, spFlags: 0)
!180 = !DISubroutineType(types: !181)
!181 = !{!174, !174}
!182 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !183, file: !23, line: 216)
!183 = !DISubprogram(name: "lldiv", scope: !15, file: !15, line: 855, type: !184, flags: DIFlagPrototyped, spFlags: 0)
!184 = !DISubroutineType(types: !185)
!185 = !{!170, !174, !174}
!186 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !187, file: !23, line: 227)
!187 = !DISubprogram(name: "atoll", scope: !15, file: !15, line: 112, type: !188, flags: DIFlagPrototyped, spFlags: 0)
!188 = !DISubroutineType(types: !189)
!189 = !{!174, !47}
!190 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !191, file: !23, line: 228)
!191 = !DISubprogram(name: "strtoll", scope: !15, file: !15, line: 200, type: !192, flags: DIFlagPrototyped, spFlags: 0)
!192 = !DISubroutineType(types: !193)
!193 = !{!174, !116, !144, !18}
!194 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !195, file: !23, line: 229)
!195 = !DISubprogram(name: "strtoull", scope: !15, file: !15, line: 205, type: !196, flags: DIFlagPrototyped, spFlags: 0)
!196 = !DISubroutineType(types: !197)
!197 = !{!198, !116, !144, !18}
!198 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !200, file: !23, line: 231)
!200 = !DISubprogram(name: "strtof", scope: !15, file: !15, line: 123, type: !201, flags: DIFlagPrototyped, spFlags: 0)
!201 = !DISubroutineType(types: !202)
!202 = !{!203, !116, !144}
!203 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!204 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !205, file: !23, line: 232)
!205 = !DISubprogram(name: "strtold", scope: !15, file: !15, line: 126, type: !206, flags: DIFlagPrototyped, spFlags: 0)
!206 = !DISubroutineType(types: !207)
!207 = !{!208, !116, !144}
!208 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !170, file: !23, line: 240)
!210 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !177, file: !23, line: 242)
!211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !179, file: !23, line: 244)
!212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !213, file: !23, line: 245)
!213 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !169, file: !23, line: 213, type: !184, flags: DIFlagPrototyped, spFlags: 0)
!214 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !183, file: !23, line: 246)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !187, file: !23, line: 248)
!216 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !200, file: !23, line: 249)
!217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !191, file: !23, line: 250)
!218 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !195, file: !23, line: 251)
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !205, file: !23, line: 252)
!220 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !221, file: !222, line: 57)
!221 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !223, file: !222, line: 79, size: 64, flags: DIFlagTypePassByReference | DIFlagNonTrivial, elements: !224, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!222 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/exception_ptr.h", directory: "")
!223 = !DINamespace(name: "__exception_ptr", scope: !11)
!224 = !{!225, !226, !230, !233, !234, !239, !240, !244, !250, !254, !258, !261, !262, !265, !269}
!225 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !221, file: !222, line: 81, baseType: !62, size: 64)
!226 = !DISubprogram(name: "exception_ptr", scope: !221, file: !222, line: 83, type: !227, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, spFlags: 0)
!227 = !DISubroutineType(types: !228)
!228 = !{null, !229, !62}
!229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!230 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !221, file: !222, line: 85, type: !231, scopeLine: 85, flags: DIFlagPrototyped, spFlags: 0)
!231 = !DISubroutineType(types: !232)
!232 = !{null, !229}
!233 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !221, file: !222, line: 86, type: !231, scopeLine: 86, flags: DIFlagPrototyped, spFlags: 0)
!234 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !221, file: !222, line: 88, type: !235, scopeLine: 88, flags: DIFlagPrototyped, spFlags: 0)
!235 = !DISubroutineType(types: !236)
!236 = !{!62, !237}
!237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !238, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!238 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !221)
!239 = !DISubprogram(name: "exception_ptr", scope: !221, file: !222, line: 96, type: !231, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)
!240 = !DISubprogram(name: "exception_ptr", scope: !221, file: !222, line: 98, type: !241, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)
!241 = !DISubroutineType(types: !242)
!242 = !{null, !229, !243}
!243 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !238, size: 64)
!244 = !DISubprogram(name: "exception_ptr", scope: !221, file: !222, line: 101, type: !245, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)
!245 = !DISubroutineType(types: !246)
!246 = !{null, !229, !247}
!247 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !11, file: !248, line: 235, baseType: !249)
!248 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/x86_64-linux-gnu/c++/7.5.0/bits/c++config.h", directory: "")
!249 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!250 = !DISubprogram(name: "exception_ptr", scope: !221, file: !222, line: 105, type: !251, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)
!251 = !DISubroutineType(types: !252)
!252 = !{null, !229, !253}
!253 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !221, size: 64)
!254 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !221, file: !222, line: 118, type: !255, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !229, !243}
!257 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !221, size: 64)
!258 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !221, file: !222, line: 122, type: !259, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)
!259 = !DISubroutineType(types: !260)
!260 = !{!257, !229, !253}
!261 = !DISubprogram(name: "~exception_ptr", scope: !221, file: !222, line: 129, type: !231, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)
!262 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !221, file: !222, line: 132, type: !263, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)
!263 = !DISubroutineType(types: !264)
!264 = !{null, !229, !257}
!265 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !221, file: !222, line: 144, type: !266, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, spFlags: 0)
!266 = !DISubroutineType(types: !267)
!267 = !{!268, !237}
!268 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!269 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !221, file: !222, line: 153, type: !270, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, spFlags: 0)
!270 = !DISubroutineType(types: !271)
!271 = !{!272, !237}
!272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !273, size: 64)
!273 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !274)
!274 = !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !11, file: !275, line: 88, flags: DIFlagFwdDecl)
!275 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/typeinfo", directory: "")
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !223, entity: !277, file: !222, line: 73)
!277 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !11, file: !222, line: 69, type: !278, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: 0)
!278 = !DISubroutineType(types: !279)
!279 = !{null, !221}
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !281, file: !296, line: 64)
!281 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !282, line: 6, baseType: !283)
!282 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!283 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !284, line: 21, baseType: !285)
!284 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!285 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !284, line: 13, size: 64, flags: DIFlagTypePassByValue, elements: !286, identifier: "_ZTS11__mbstate_t")
!286 = !{!287, !288}
!287 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !285, file: !284, line: 15, baseType: !18, size: 32)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !285, file: !284, line: 20, baseType: !289, size: 32, offset: 32)
!289 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !285, file: !284, line: 16, size: 32, flags: DIFlagTypePassByValue, elements: !290, identifier: "_ZTSN11__mbstate_tUt_E")
!290 = !{!291, !292}
!291 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !289, file: !284, line: 18, baseType: !139, size: 32)
!292 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !289, file: !284, line: 19, baseType: !293, size: 32)
!293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !49, size: 32, elements: !294)
!294 = !{!295}
!295 = !DISubrange(count: 4)
!296 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/cwchar", directory: "")
!297 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !298, file: !296, line: 139)
!298 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !299, line: 20, baseType: !139)
!299 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "")
!300 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !301, file: !296, line: 141)
!301 = !DISubprogram(name: "btowc", scope: !302, file: !302, line: 284, type: !303, flags: DIFlagPrototyped, spFlags: 0)
!302 = !DIFile(filename: "/usr/include/wchar.h", directory: "")
!303 = !DISubroutineType(types: !304)
!304 = !{!298, !18}
!305 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !306, file: !296, line: 142)
!306 = !DISubprogram(name: "fgetwc", scope: !302, file: !302, line: 727, type: !307, flags: DIFlagPrototyped, spFlags: 0)
!307 = !DISubroutineType(types: !308)
!308 = !{!298, !309}
!309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !310, size: 64)
!310 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !311, line: 5, baseType: !312)
!311 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "")
!312 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !311, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!313 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !314, file: !296, line: 143)
!314 = !DISubprogram(name: "fgetws", scope: !302, file: !302, line: 756, type: !315, flags: DIFlagPrototyped, spFlags: 0)
!315 = !DISubroutineType(types: !316)
!316 = !{!114, !113, !18, !317}
!317 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !309)
!318 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !319, file: !296, line: 144)
!319 = !DISubprogram(name: "fputwc", scope: !302, file: !302, line: 741, type: !320, flags: DIFlagPrototyped, spFlags: 0)
!320 = !DISubroutineType(types: !321)
!321 = !{!298, !115, !309}
!322 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !323, file: !296, line: 145)
!323 = !DISubprogram(name: "fputws", scope: !302, file: !302, line: 763, type: !324, flags: DIFlagPrototyped, spFlags: 0)
!324 = !DISubroutineType(types: !325)
!325 = !{!18, !161, !317}
!326 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !327, file: !296, line: 146)
!327 = !DISubprogram(name: "fwide", scope: !302, file: !302, line: 573, type: !328, flags: DIFlagPrototyped, spFlags: 0)
!328 = !DISubroutineType(types: !329)
!329 = !{!18, !309, !18}
!330 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !331, file: !296, line: 147)
!331 = !DISubprogram(name: "fwprintf", scope: !302, file: !302, line: 580, type: !332, flags: DIFlagPrototyped, spFlags: 0)
!332 = !DISubroutineType(types: !333)
!333 = !{!18, !317, !161, null}
!334 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !335, file: !296, line: 148)
!335 = !DISubprogram(name: "fwscanf", scope: !302, file: !302, line: 621, type: !332, flags: DIFlagPrototyped, spFlags: 0)
!336 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !337, file: !296, line: 149)
!337 = !DISubprogram(name: "getwc", scope: !302, file: !302, line: 728, type: !307, flags: DIFlagPrototyped, spFlags: 0)
!338 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !339, file: !296, line: 150)
!339 = !DISubprogram(name: "getwchar", scope: !302, file: !302, line: 734, type: !340, flags: DIFlagPrototyped, spFlags: 0)
!340 = !DISubroutineType(types: !341)
!341 = !{!298}
!342 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !343, file: !296, line: 151)
!343 = !DISubprogram(name: "mbrlen", scope: !302, file: !302, line: 307, type: !344, flags: DIFlagPrototyped, spFlags: 0)
!344 = !DISubroutineType(types: !345)
!345 = !{!65, !116, !65, !346}
!346 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !347)
!347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64)
!348 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !349, file: !296, line: 152)
!349 = !DISubprogram(name: "mbrtowc", scope: !302, file: !302, line: 296, type: !350, flags: DIFlagPrototyped, spFlags: 0)
!350 = !DISubroutineType(types: !351)
!351 = !{!65, !113, !116, !65, !346}
!352 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !353, file: !296, line: 153)
!353 = !DISubprogram(name: "mbsinit", scope: !302, file: !302, line: 292, type: !354, flags: DIFlagPrototyped, spFlags: 0)
!354 = !DISubroutineType(types: !355)
!355 = !{!18, !356}
!356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !357, size: 64)
!357 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !359, file: !296, line: 154)
!359 = !DISubprogram(name: "mbsrtowcs", scope: !302, file: !302, line: 337, type: !360, flags: DIFlagPrototyped, spFlags: 0)
!360 = !DISubroutineType(types: !361)
!361 = !{!65, !113, !362, !65, !346}
!362 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !363)
!363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!364 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !365, file: !296, line: 155)
!365 = !DISubprogram(name: "putwc", scope: !302, file: !302, line: 742, type: !320, flags: DIFlagPrototyped, spFlags: 0)
!366 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !367, file: !296, line: 156)
!367 = !DISubprogram(name: "putwchar", scope: !302, file: !302, line: 748, type: !368, flags: DIFlagPrototyped, spFlags: 0)
!368 = !DISubroutineType(types: !369)
!369 = !{!298, !115}
!370 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !371, file: !296, line: 158)
!371 = !DISubprogram(name: "swprintf", scope: !302, file: !302, line: 590, type: !372, flags: DIFlagPrototyped, spFlags: 0)
!372 = !DISubroutineType(types: !373)
!373 = !{!18, !113, !65, !161, null}
!374 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !375, file: !296, line: 160)
!375 = !DISubprogram(name: "swscanf", scope: !302, file: !302, line: 631, type: !376, flags: DIFlagPrototyped, spFlags: 0)
!376 = !DISubroutineType(types: !377)
!377 = !{!18, !161, !161, null}
!378 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !379, file: !296, line: 161)
!379 = !DISubprogram(name: "ungetwc", scope: !302, file: !302, line: 771, type: !380, flags: DIFlagPrototyped, spFlags: 0)
!380 = !DISubroutineType(types: !381)
!381 = !{!298, !298, !309}
!382 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !383, file: !296, line: 162)
!383 = !DISubprogram(name: "vfwprintf", scope: !302, file: !302, line: 598, type: !384, flags: DIFlagPrototyped, spFlags: 0)
!384 = !DISubroutineType(types: !385)
!385 = !{!18, !317, !161, !386}
!386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !387, size: 64)
!387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !5, size: 192, flags: DIFlagTypePassByValue, elements: !388, identifier: "_ZTS13__va_list_tag")
!388 = !{!389, !390, !391, !392}
!389 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !387, file: !5, baseType: !139, size: 32)
!390 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !387, file: !5, baseType: !139, size: 32, offset: 32)
!391 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !387, file: !5, baseType: !62, size: 64, offset: 64)
!392 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !387, file: !5, baseType: !62, size: 64, offset: 128)
!393 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !394, file: !296, line: 164)
!394 = !DISubprogram(name: "vfwscanf", scope: !302, file: !302, line: 673, type: !384, flags: DIFlagPrototyped, spFlags: 0)
!395 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !396, file: !296, line: 167)
!396 = !DISubprogram(name: "vswprintf", scope: !302, file: !302, line: 611, type: !397, flags: DIFlagPrototyped, spFlags: 0)
!397 = !DISubroutineType(types: !398)
!398 = !{!18, !113, !65, !161, !386}
!399 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !400, file: !296, line: 170)
!400 = !DISubprogram(name: "vswscanf", scope: !302, file: !302, line: 685, type: !401, flags: DIFlagPrototyped, spFlags: 0)
!401 = !DISubroutineType(types: !402)
!402 = !{!18, !161, !161, !386}
!403 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !404, file: !296, line: 172)
!404 = !DISubprogram(name: "vwprintf", scope: !302, file: !302, line: 606, type: !405, flags: DIFlagPrototyped, spFlags: 0)
!405 = !DISubroutineType(types: !406)
!406 = !{!18, !161, !386}
!407 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !408, file: !296, line: 174)
!408 = !DISubprogram(name: "vwscanf", scope: !302, file: !302, line: 681, type: !405, flags: DIFlagPrototyped, spFlags: 0)
!409 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !410, file: !296, line: 176)
!410 = !DISubprogram(name: "wcrtomb", scope: !302, file: !302, line: 301, type: !411, flags: DIFlagPrototyped, spFlags: 0)
!411 = !DISubroutineType(types: !412)
!412 = !{!65, !160, !115, !346}
!413 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !414, file: !296, line: 177)
!414 = !DISubprogram(name: "wcscat", scope: !302, file: !302, line: 97, type: !415, flags: DIFlagPrototyped, spFlags: 0)
!415 = !DISubroutineType(types: !416)
!416 = !{!114, !113, !161}
!417 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !418, file: !296, line: 178)
!418 = !DISubprogram(name: "wcscmp", scope: !302, file: !302, line: 106, type: !419, flags: DIFlagPrototyped, spFlags: 0)
!419 = !DISubroutineType(types: !420)
!420 = !{!18, !162, !162}
!421 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !422, file: !296, line: 179)
!422 = !DISubprogram(name: "wcscoll", scope: !302, file: !302, line: 131, type: !419, flags: DIFlagPrototyped, spFlags: 0)
!423 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !424, file: !296, line: 180)
!424 = !DISubprogram(name: "wcscpy", scope: !302, file: !302, line: 87, type: !415, flags: DIFlagPrototyped, spFlags: 0)
!425 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !426, file: !296, line: 181)
!426 = !DISubprogram(name: "wcscspn", scope: !302, file: !302, line: 187, type: !427, flags: DIFlagPrototyped, spFlags: 0)
!427 = !DISubroutineType(types: !428)
!428 = !{!65, !162, !162}
!429 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !430, file: !296, line: 182)
!430 = !DISubprogram(name: "wcsftime", scope: !302, file: !302, line: 835, type: !431, flags: DIFlagPrototyped, spFlags: 0)
!431 = !DISubroutineType(types: !432)
!432 = !{!65, !113, !65, !161, !433}
!433 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !434)
!434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !435, size: 64)
!435 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !436)
!436 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !302, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!437 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !438, file: !296, line: 183)
!438 = !DISubprogram(name: "wcslen", scope: !302, file: !302, line: 222, type: !439, flags: DIFlagPrototyped, spFlags: 0)
!439 = !DISubroutineType(types: !440)
!440 = !{!65, !162}
!441 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !442, file: !296, line: 184)
!442 = !DISubprogram(name: "wcsncat", scope: !302, file: !302, line: 101, type: !443, flags: DIFlagPrototyped, spFlags: 0)
!443 = !DISubroutineType(types: !444)
!444 = !{!114, !113, !161, !65}
!445 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !446, file: !296, line: 185)
!446 = !DISubprogram(name: "wcsncmp", scope: !302, file: !302, line: 109, type: !447, flags: DIFlagPrototyped, spFlags: 0)
!447 = !DISubroutineType(types: !448)
!448 = !{!18, !162, !162, !65}
!449 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !450, file: !296, line: 186)
!450 = !DISubprogram(name: "wcsncpy", scope: !302, file: !302, line: 92, type: !443, flags: DIFlagPrototyped, spFlags: 0)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !452, file: !296, line: 187)
!452 = !DISubprogram(name: "wcsrtombs", scope: !302, file: !302, line: 343, type: !453, flags: DIFlagPrototyped, spFlags: 0)
!453 = !DISubroutineType(types: !454)
!454 = !{!65, !160, !455, !65, !346}
!455 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !456)
!456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !162, size: 64)
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !458, file: !296, line: 188)
!458 = !DISubprogram(name: "wcsspn", scope: !302, file: !302, line: 191, type: !427, flags: DIFlagPrototyped, spFlags: 0)
!459 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !460, file: !296, line: 189)
!460 = !DISubprogram(name: "wcstod", scope: !302, file: !302, line: 377, type: !461, flags: DIFlagPrototyped, spFlags: 0)
!461 = !DISubroutineType(types: !462)
!462 = !{!46, !161, !463}
!463 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !464)
!464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !114, size: 64)
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !466, file: !296, line: 191)
!466 = !DISubprogram(name: "wcstof", scope: !302, file: !302, line: 382, type: !467, flags: DIFlagPrototyped, spFlags: 0)
!467 = !DISubroutineType(types: !468)
!468 = !{!203, !161, !463}
!469 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !470, file: !296, line: 193)
!470 = !DISubprogram(name: "wcstok", scope: !302, file: !302, line: 217, type: !471, flags: DIFlagPrototyped, spFlags: 0)
!471 = !DISubroutineType(types: !472)
!472 = !{!114, !113, !161, !463}
!473 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !474, file: !296, line: 194)
!474 = !DISubprogram(name: "wcstol", scope: !302, file: !302, line: 428, type: !475, flags: DIFlagPrototyped, spFlags: 0)
!475 = !DISubroutineType(types: !476)
!476 = !{!29, !161, !463, !18}
!477 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !478, file: !296, line: 195)
!478 = !DISubprogram(name: "wcstoul", scope: !302, file: !302, line: 433, type: !479, flags: DIFlagPrototyped, spFlags: 0)
!479 = !DISubroutineType(types: !480)
!480 = !{!67, !161, !463, !18}
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !482, file: !296, line: 196)
!482 = !DISubprogram(name: "wcsxfrm", scope: !302, file: !302, line: 135, type: !483, flags: DIFlagPrototyped, spFlags: 0)
!483 = !DISubroutineType(types: !484)
!484 = !{!65, !113, !161, !65}
!485 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !486, file: !296, line: 197)
!486 = !DISubprogram(name: "wctob", scope: !302, file: !302, line: 288, type: !487, flags: DIFlagPrototyped, spFlags: 0)
!487 = !DISubroutineType(types: !488)
!488 = !{!18, !298}
!489 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !490, file: !296, line: 198)
!490 = !DISubprogram(name: "wmemcmp", scope: !302, file: !302, line: 258, type: !447, flags: DIFlagPrototyped, spFlags: 0)
!491 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !492, file: !296, line: 199)
!492 = !DISubprogram(name: "wmemcpy", scope: !302, file: !302, line: 262, type: !443, flags: DIFlagPrototyped, spFlags: 0)
!493 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !494, file: !296, line: 200)
!494 = !DISubprogram(name: "wmemmove", scope: !302, file: !302, line: 267, type: !495, flags: DIFlagPrototyped, spFlags: 0)
!495 = !DISubroutineType(types: !496)
!496 = !{!114, !114, !162, !65}
!497 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !498, file: !296, line: 201)
!498 = !DISubprogram(name: "wmemset", scope: !302, file: !302, line: 271, type: !499, flags: DIFlagPrototyped, spFlags: 0)
!499 = !DISubroutineType(types: !500)
!500 = !{!114, !114, !115, !65}
!501 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !502, file: !296, line: 202)
!502 = !DISubprogram(name: "wprintf", scope: !302, file: !302, line: 587, type: !503, flags: DIFlagPrototyped, spFlags: 0)
!503 = !DISubroutineType(types: !504)
!504 = !{!18, !161, null}
!505 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !506, file: !296, line: 203)
!506 = !DISubprogram(name: "wscanf", scope: !302, file: !302, line: 628, type: !503, flags: DIFlagPrototyped, spFlags: 0)
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !508, file: !296, line: 204)
!508 = !DISubprogram(name: "wcschr", scope: !302, file: !302, line: 164, type: !509, flags: DIFlagPrototyped, spFlags: 0)
!509 = !DISubroutineType(types: !510)
!510 = !{!114, !162, !115}
!511 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !512, file: !296, line: 205)
!512 = !DISubprogram(name: "wcspbrk", scope: !302, file: !302, line: 201, type: !513, flags: DIFlagPrototyped, spFlags: 0)
!513 = !DISubroutineType(types: !514)
!514 = !{!114, !162, !162}
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !516, file: !296, line: 206)
!516 = !DISubprogram(name: "wcsrchr", scope: !302, file: !302, line: 174, type: !509, flags: DIFlagPrototyped, spFlags: 0)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !518, file: !296, line: 207)
!518 = !DISubprogram(name: "wcsstr", scope: !302, file: !302, line: 212, type: !513, flags: DIFlagPrototyped, spFlags: 0)
!519 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !520, file: !296, line: 208)
!520 = !DISubprogram(name: "wmemchr", scope: !302, file: !302, line: 253, type: !521, flags: DIFlagPrototyped, spFlags: 0)
!521 = !DISubroutineType(types: !522)
!522 = !{!114, !162, !115, !65}
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !524, file: !296, line: 248)
!524 = !DISubprogram(name: "wcstold", scope: !302, file: !302, line: 384, type: !525, flags: DIFlagPrototyped, spFlags: 0)
!525 = !DISubroutineType(types: !526)
!526 = !{!208, !161, !463}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !528, file: !296, line: 257)
!528 = !DISubprogram(name: "wcstoll", scope: !302, file: !302, line: 441, type: !529, flags: DIFlagPrototyped, spFlags: 0)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !161, !463, !18}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !532, file: !296, line: 258)
!532 = !DISubprogram(name: "wcstoull", scope: !302, file: !302, line: 448, type: !533, flags: DIFlagPrototyped, spFlags: 0)
!533 = !DISubroutineType(types: !534)
!534 = !{!198, !161, !463, !18}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !524, file: !296, line: 264)
!536 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !528, file: !296, line: 265)
!537 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !532, file: !296, line: 266)
!538 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !466, file: !296, line: 280)
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !394, file: !296, line: 283)
!540 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !400, file: !296, line: 286)
!541 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !408, file: !296, line: 289)
!542 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !524, file: !296, line: 293)
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !528, file: !296, line: 294)
!544 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !532, file: !296, line: 295)
!545 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !546, file: !549, line: 48)
!546 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !547, line: 224, baseType: !548)
!547 = !DIFile(filename: "libraries/llvm/lib/clang/9.0.0/include/stdint.h", directory: "/home/swlab/build/remill-build")
!548 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!549 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/cstdint", directory: "")
!550 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !551, file: !549, line: 49)
!551 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !547, line: 205, baseType: !552)
!552 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!553 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !554, file: !549, line: 50)
!554 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !547, line: 167, baseType: !18)
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !556, file: !549, line: 51)
!556 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !547, line: 96, baseType: !29)
!557 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !558, file: !549, line: 53)
!558 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !547, line: 234, baseType: !546)
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !560, file: !549, line: 54)
!560 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !547, line: 217, baseType: !551)
!561 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !562, file: !549, line: 55)
!562 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !547, line: 186, baseType: !554)
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !564, file: !549, line: 56)
!564 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !547, line: 112, baseType: !556)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !566, file: !549, line: 58)
!566 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !547, line: 232, baseType: !546)
!567 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !568, file: !549, line: 59)
!568 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !547, line: 215, baseType: !551)
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !570, file: !549, line: 60)
!570 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !547, line: 184, baseType: !554)
!571 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !572, file: !549, line: 61)
!572 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !547, line: 110, baseType: !556)
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !574, file: !549, line: 63)
!574 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !547, line: 262, baseType: !29)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !576, file: !549, line: 64)
!576 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !547, line: 249, baseType: !29)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !578, file: !549, line: 66)
!578 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !547, line: 226, baseType: !579)
!579 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!580 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !581, file: !549, line: 67)
!581 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !547, line: 207, baseType: !582)
!582 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!583 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !584, file: !549, line: 68)
!584 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !547, line: 172, baseType: !139)
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !586, file: !549, line: 69)
!586 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !547, line: 98, baseType: !67)
!587 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !588, file: !549, line: 71)
!588 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !547, line: 235, baseType: !578)
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !590, file: !549, line: 72)
!590 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !547, line: 218, baseType: !581)
!591 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !592, file: !549, line: 73)
!592 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !547, line: 187, baseType: !584)
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !594, file: !549, line: 74)
!594 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !547, line: 113, baseType: !586)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !596, file: !549, line: 76)
!596 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !547, line: 233, baseType: !578)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !598, file: !549, line: 77)
!598 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !547, line: 216, baseType: !581)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !600, file: !549, line: 78)
!600 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !547, line: 185, baseType: !584)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !602, file: !549, line: 79)
!602 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !547, line: 111, baseType: !586)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !604, file: !549, line: 81)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !547, line: 263, baseType: !67)
!605 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !606, file: !549, line: 82)
!606 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !547, line: 256, baseType: !67)
!607 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !608, file: !609, line: 44)
!608 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !11, file: !248, line: 231, baseType: !67)
!609 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/ext/new_allocator.h", directory: "")
!610 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !611, file: !609, line: 45)
!611 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !11, file: !248, line: 232, baseType: !29)
!612 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !613, file: !615, line: 53)
!613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !614, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!614 = !DIFile(filename: "/usr/include/locale.h", directory: "")
!615 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/clocale", directory: "")
!616 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !617, file: !615, line: 54)
!617 = !DISubprogram(name: "setlocale", scope: !614, file: !614, line: 122, type: !618, flags: DIFlagPrototyped, spFlags: 0)
!618 = !DISubroutineType(types: !619)
!619 = !{!92, !18, !47}
!620 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !621, file: !615, line: 55)
!621 = !DISubprogram(name: "localeconv", scope: !614, file: !614, line: 125, type: !622, flags: DIFlagPrototyped, spFlags: 0)
!622 = !DISubroutineType(types: !623)
!623 = !{!624}
!624 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !613, size: 64)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !626, file: !628, line: 64)
!626 = !DISubprogram(name: "isalnum", scope: !627, file: !627, line: 108, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!627 = !DIFile(filename: "/usr/include/ctype.h", directory: "")
!628 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/cctype", directory: "")
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !630, file: !628, line: 65)
!630 = !DISubprogram(name: "isalpha", scope: !627, file: !627, line: 109, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !632, file: !628, line: 66)
!632 = !DISubprogram(name: "iscntrl", scope: !627, file: !627, line: 110, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !634, file: !628, line: 67)
!634 = !DISubprogram(name: "isdigit", scope: !627, file: !627, line: 111, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !636, file: !628, line: 68)
!636 = !DISubprogram(name: "isgraph", scope: !627, file: !627, line: 113, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!637 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !638, file: !628, line: 69)
!638 = !DISubprogram(name: "islower", scope: !627, file: !627, line: 112, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!639 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !640, file: !628, line: 70)
!640 = !DISubprogram(name: "isprint", scope: !627, file: !627, line: 114, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!641 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !642, file: !628, line: 71)
!642 = !DISubprogram(name: "ispunct", scope: !627, file: !627, line: 115, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!643 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !644, file: !628, line: 72)
!644 = !DISubprogram(name: "isspace", scope: !627, file: !627, line: 116, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!645 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !646, file: !628, line: 73)
!646 = !DISubprogram(name: "isupper", scope: !627, file: !627, line: 117, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!647 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !648, file: !628, line: 74)
!648 = !DISubprogram(name: "isxdigit", scope: !627, file: !627, line: 118, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!649 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !650, file: !628, line: 75)
!650 = !DISubprogram(name: "tolower", scope: !627, file: !627, line: 122, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!651 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !652, file: !628, line: 76)
!652 = !DISubprogram(name: "toupper", scope: !627, file: !627, line: 125, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!653 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !654, file: !628, line: 87)
!654 = !DISubprogram(name: "isblank", scope: !627, file: !627, line: 130, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!655 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !656, file: !658, line: 98)
!656 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !657, line: 7, baseType: !312)
!657 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!658 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/cstdio", directory: "")
!659 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !660, file: !658, line: 99)
!660 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !661, line: 78, baseType: !662)
!661 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!662 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !663, line: 30, baseType: !664)
!663 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "")
!664 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !663, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !666, file: !658, line: 101)
!666 = !DISubprogram(name: "clearerr", scope: !661, file: !661, line: 757, type: !667, flags: DIFlagPrototyped, spFlags: 0)
!667 = !DISubroutineType(types: !668)
!668 = !{null, !669}
!669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !656, size: 64)
!670 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !671, file: !658, line: 102)
!671 = !DISubprogram(name: "fclose", scope: !661, file: !661, line: 199, type: !672, flags: DIFlagPrototyped, spFlags: 0)
!672 = !DISubroutineType(types: !673)
!673 = !{!18, !669}
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !675, file: !658, line: 103)
!675 = !DISubprogram(name: "feof", scope: !661, file: !661, line: 759, type: !672, flags: DIFlagPrototyped, spFlags: 0)
!676 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !677, file: !658, line: 104)
!677 = !DISubprogram(name: "ferror", scope: !661, file: !661, line: 761, type: !672, flags: DIFlagPrototyped, spFlags: 0)
!678 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !679, file: !658, line: 105)
!679 = !DISubprogram(name: "fflush", scope: !661, file: !661, line: 204, type: !672, flags: DIFlagPrototyped, spFlags: 0)
!680 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !681, file: !658, line: 106)
!681 = !DISubprogram(name: "fgetc", scope: !661, file: !661, line: 477, type: !672, flags: DIFlagPrototyped, spFlags: 0)
!682 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !683, file: !658, line: 107)
!683 = !DISubprogram(name: "fgetpos", scope: !661, file: !661, line: 731, type: !684, flags: DIFlagPrototyped, spFlags: 0)
!684 = !DISubroutineType(types: !685)
!685 = !{!18, !686, !687}
!686 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !669)
!687 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !688)
!688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !660, size: 64)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !690, file: !658, line: 108)
!690 = !DISubprogram(name: "fgets", scope: !661, file: !661, line: 564, type: !691, flags: DIFlagPrototyped, spFlags: 0)
!691 = !DISubroutineType(types: !692)
!692 = !{!92, !160, !18, !686}
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !694, file: !658, line: 109)
!694 = !DISubprogram(name: "fopen", scope: !661, file: !661, line: 232, type: !695, flags: DIFlagPrototyped, spFlags: 0)
!695 = !DISubroutineType(types: !696)
!696 = !{!669, !116, !116}
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !698, file: !658, line: 110)
!698 = !DISubprogram(name: "fprintf", scope: !661, file: !661, line: 312, type: !699, flags: DIFlagPrototyped, spFlags: 0)
!699 = !DISubroutineType(types: !700)
!700 = !{!18, !686, !116, null}
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !702, file: !658, line: 111)
!702 = !DISubprogram(name: "fputc", scope: !661, file: !661, line: 517, type: !703, flags: DIFlagPrototyped, spFlags: 0)
!703 = !DISubroutineType(types: !704)
!704 = !{!18, !18, !669}
!705 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !706, file: !658, line: 112)
!706 = !DISubprogram(name: "fputs", scope: !661, file: !661, line: 626, type: !707, flags: DIFlagPrototyped, spFlags: 0)
!707 = !DISubroutineType(types: !708)
!708 = !{!18, !116, !686}
!709 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !710, file: !658, line: 113)
!710 = !DISubprogram(name: "fread", scope: !661, file: !661, line: 646, type: !711, flags: DIFlagPrototyped, spFlags: 0)
!711 = !DISubroutineType(types: !712)
!712 = !{!65, !713, !65, !65, !686}
!713 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !62)
!714 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !715, file: !658, line: 114)
!715 = !DISubprogram(name: "freopen", scope: !661, file: !661, line: 238, type: !716, flags: DIFlagPrototyped, spFlags: 0)
!716 = !DISubroutineType(types: !717)
!717 = !{!669, !116, !116, !686}
!718 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !719, file: !658, line: 115)
!719 = !DISubprogram(name: "fscanf", scope: !661, file: !661, line: 377, type: !699, flags: DIFlagPrototyped, spFlags: 0)
!720 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !721, file: !658, line: 116)
!721 = !DISubprogram(name: "fseek", scope: !661, file: !661, line: 684, type: !722, flags: DIFlagPrototyped, spFlags: 0)
!722 = !DISubroutineType(types: !723)
!723 = !{!18, !669, !29, !18}
!724 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !725, file: !658, line: 117)
!725 = !DISubprogram(name: "fsetpos", scope: !661, file: !661, line: 736, type: !726, flags: DIFlagPrototyped, spFlags: 0)
!726 = !DISubroutineType(types: !727)
!727 = !{!18, !669, !728}
!728 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !729, size: 64)
!729 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !660)
!730 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !731, file: !658, line: 118)
!731 = !DISubprogram(name: "ftell", scope: !661, file: !661, line: 689, type: !732, flags: DIFlagPrototyped, spFlags: 0)
!732 = !DISubroutineType(types: !733)
!733 = !{!29, !669}
!734 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !735, file: !658, line: 119)
!735 = !DISubprogram(name: "fwrite", scope: !661, file: !661, line: 652, type: !736, flags: DIFlagPrototyped, spFlags: 0)
!736 = !DISubroutineType(types: !737)
!737 = !{!65, !738, !65, !65, !686}
!738 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !63)
!739 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !740, file: !658, line: 120)
!740 = !DISubprogram(name: "getc", scope: !661, file: !661, line: 478, type: !672, flags: DIFlagPrototyped, spFlags: 0)
!741 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !742, file: !658, line: 121)
!742 = !DISubprogram(name: "getchar", scope: !661, file: !661, line: 484, type: !129, flags: DIFlagPrototyped, spFlags: 0)
!743 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !744, file: !658, line: 124)
!744 = !DISubprogram(name: "gets", scope: !661, file: !661, line: 577, type: !745, flags: DIFlagPrototyped, spFlags: 0)
!745 = !DISubroutineType(types: !746)
!746 = !{!92, !92}
!747 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !748, file: !658, line: 126)
!748 = !DISubprogram(name: "perror", scope: !661, file: !661, line: 775, type: !749, flags: DIFlagPrototyped, spFlags: 0)
!749 = !DISubroutineType(types: !750)
!750 = !{null, !47}
!751 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !752, file: !658, line: 127)
!752 = !DISubprogram(name: "printf", scope: !661, file: !661, line: 318, type: !753, flags: DIFlagPrototyped, spFlags: 0)
!753 = !DISubroutineType(types: !754)
!754 = !{!18, !116, null}
!755 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !756, file: !658, line: 128)
!756 = !DISubprogram(name: "putc", scope: !661, file: !661, line: 518, type: !703, flags: DIFlagPrototyped, spFlags: 0)
!757 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !758, file: !658, line: 129)
!758 = !DISubprogram(name: "putchar", scope: !661, file: !661, line: 524, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!759 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !760, file: !658, line: 130)
!760 = !DISubprogram(name: "puts", scope: !661, file: !661, line: 632, type: !52, flags: DIFlagPrototyped, spFlags: 0)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !762, file: !658, line: 131)
!762 = !DISubprogram(name: "remove", scope: !661, file: !661, line: 144, type: !52, flags: DIFlagPrototyped, spFlags: 0)
!763 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !764, file: !658, line: 132)
!764 = !DISubprogram(name: "rename", scope: !661, file: !661, line: 146, type: !765, flags: DIFlagPrototyped, spFlags: 0)
!765 = !DISubroutineType(types: !766)
!766 = !{!18, !47, !47}
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !768, file: !658, line: 133)
!768 = !DISubprogram(name: "rewind", scope: !661, file: !661, line: 694, type: !667, flags: DIFlagPrototyped, spFlags: 0)
!769 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !770, file: !658, line: 134)
!770 = !DISubprogram(name: "scanf", scope: !661, file: !661, line: 383, type: !753, flags: DIFlagPrototyped, spFlags: 0)
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !772, file: !658, line: 135)
!772 = !DISubprogram(name: "setbuf", scope: !661, file: !661, line: 290, type: !773, flags: DIFlagPrototyped, spFlags: 0)
!773 = !DISubroutineType(types: !774)
!774 = !{null, !686, !160}
!775 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !776, file: !658, line: 136)
!776 = !DISubprogram(name: "setvbuf", scope: !661, file: !661, line: 294, type: !777, flags: DIFlagPrototyped, spFlags: 0)
!777 = !DISubroutineType(types: !778)
!778 = !{!18, !686, !160, !18, !65}
!779 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !780, file: !658, line: 137)
!780 = !DISubprogram(name: "sprintf", scope: !661, file: !661, line: 320, type: !781, flags: DIFlagPrototyped, spFlags: 0)
!781 = !DISubroutineType(types: !782)
!782 = !{!18, !160, !116, null}
!783 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !784, file: !658, line: 138)
!784 = !DISubprogram(name: "sscanf", scope: !661, file: !661, line: 385, type: !785, flags: DIFlagPrototyped, spFlags: 0)
!785 = !DISubroutineType(types: !786)
!786 = !{!18, !116, !116, null}
!787 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !788, file: !658, line: 139)
!788 = !DISubprogram(name: "tmpfile", scope: !661, file: !661, line: 159, type: !789, flags: DIFlagPrototyped, spFlags: 0)
!789 = !DISubroutineType(types: !790)
!790 = !{!669}
!791 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !792, file: !658, line: 141)
!792 = !DISubprogram(name: "tmpnam", scope: !661, file: !661, line: 173, type: !745, flags: DIFlagPrototyped, spFlags: 0)
!793 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !794, file: !658, line: 143)
!794 = !DISubprogram(name: "ungetc", scope: !661, file: !661, line: 639, type: !703, flags: DIFlagPrototyped, spFlags: 0)
!795 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !796, file: !658, line: 144)
!796 = !DISubprogram(name: "vfprintf", scope: !661, file: !661, line: 327, type: !797, flags: DIFlagPrototyped, spFlags: 0)
!797 = !DISubroutineType(types: !798)
!798 = !{!18, !686, !116, !386}
!799 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !800, file: !658, line: 145)
!800 = !DISubprogram(name: "vprintf", scope: !661, file: !661, line: 333, type: !801, flags: DIFlagPrototyped, spFlags: 0)
!801 = !DISubroutineType(types: !802)
!802 = !{!18, !116, !386}
!803 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !804, file: !658, line: 146)
!804 = !DISubprogram(name: "vsprintf", scope: !661, file: !661, line: 335, type: !805, flags: DIFlagPrototyped, spFlags: 0)
!805 = !DISubroutineType(types: !806)
!806 = !{!18, !160, !116, !386}
!807 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !808, file: !658, line: 175)
!808 = !DISubprogram(name: "snprintf", scope: !661, file: !661, line: 340, type: !809, flags: DIFlagPrototyped, spFlags: 0)
!809 = !DISubroutineType(types: !810)
!810 = !{!18, !160, !65, !116, null}
!811 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !812, file: !658, line: 176)
!812 = !DISubprogram(name: "vfscanf", scope: !661, file: !661, line: 420, type: !797, flags: DIFlagPrototyped, spFlags: 0)
!813 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !814, file: !658, line: 177)
!814 = !DISubprogram(name: "vscanf", scope: !661, file: !661, line: 428, type: !801, flags: DIFlagPrototyped, spFlags: 0)
!815 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !816, file: !658, line: 178)
!816 = !DISubprogram(name: "vsnprintf", scope: !661, file: !661, line: 344, type: !817, flags: DIFlagPrototyped, spFlags: 0)
!817 = !DISubroutineType(types: !818)
!818 = !{!18, !160, !65, !116, !386}
!819 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !169, entity: !820, file: !658, line: 179)
!820 = !DISubprogram(name: "vsscanf", scope: !661, file: !661, line: 432, type: !821, flags: DIFlagPrototyped, spFlags: 0)
!821 = !DISubroutineType(types: !822)
!822 = !{!18, !116, !116, !386}
!823 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !808, file: !658, line: 185)
!824 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !812, file: !658, line: 186)
!825 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !814, file: !658, line: 187)
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !816, file: !658, line: 188)
!827 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !820, file: !658, line: 189)
!828 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !829, file: !833, line: 83)
!829 = !DISubprogram(name: "acos", scope: !830, file: !830, line: 53, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!830 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "")
!831 = !DISubroutineType(types: !832)
!832 = !{!46, !46}
!833 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/cmath", directory: "")
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !835, file: !833, line: 102)
!835 = !DISubprogram(name: "asin", scope: !830, file: !830, line: 55, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!836 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !837, file: !833, line: 121)
!837 = !DISubprogram(name: "atan", scope: !830, file: !830, line: 57, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !839, file: !833, line: 140)
!839 = !DISubprogram(name: "atan2", scope: !830, file: !830, line: 59, type: !840, flags: DIFlagPrototyped, spFlags: 0)
!840 = !DISubroutineType(types: !841)
!841 = !{!46, !46, !46}
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !843, file: !833, line: 161)
!843 = !DISubprogram(name: "ceil", scope: !830, file: !830, line: 159, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!844 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !845, file: !833, line: 180)
!845 = !DISubprogram(name: "cos", scope: !830, file: !830, line: 62, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !847, file: !833, line: 199)
!847 = !DISubprogram(name: "cosh", scope: !830, file: !830, line: 71, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!848 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !849, file: !833, line: 218)
!849 = !DISubprogram(name: "exp", scope: !830, file: !830, line: 95, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !851, file: !833, line: 237)
!851 = !DISubprogram(name: "fabs", scope: !830, file: !830, line: 162, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!852 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !853, file: !833, line: 256)
!853 = !DISubprogram(name: "floor", scope: !830, file: !830, line: 165, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !855, file: !833, line: 275)
!855 = !DISubprogram(name: "fmod", scope: !830, file: !830, line: 168, type: !840, flags: DIFlagPrototyped, spFlags: 0)
!856 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !857, file: !833, line: 296)
!857 = !DISubprogram(name: "frexp", scope: !830, file: !830, line: 98, type: !858, flags: DIFlagPrototyped, spFlags: 0)
!858 = !DISubroutineType(types: !859)
!859 = !{!46, !46, !860}
!860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64)
!861 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !862, file: !833, line: 315)
!862 = !DISubprogram(name: "ldexp", scope: !830, file: !830, line: 101, type: !863, flags: DIFlagPrototyped, spFlags: 0)
!863 = !DISubroutineType(types: !864)
!864 = !{!46, !46, !18}
!865 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !866, file: !833, line: 334)
!866 = !DISubprogram(name: "log", scope: !830, file: !830, line: 104, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!867 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !868, file: !833, line: 353)
!868 = !DISubprogram(name: "log10", scope: !830, file: !830, line: 107, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!869 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !870, file: !833, line: 372)
!870 = !DISubprogram(name: "modf", scope: !830, file: !830, line: 110, type: !871, flags: DIFlagPrototyped, spFlags: 0)
!871 = !DISubroutineType(types: !872)
!872 = !{!46, !46, !873}
!873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !875, file: !833, line: 384)
!875 = !DISubprogram(name: "pow", scope: !830, file: !830, line: 140, type: !840, flags: DIFlagPrototyped, spFlags: 0)
!876 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !877, file: !833, line: 421)
!877 = !DISubprogram(name: "sin", scope: !830, file: !830, line: 64, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!878 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !879, file: !833, line: 440)
!879 = !DISubprogram(name: "sinh", scope: !830, file: !830, line: 73, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !881, file: !833, line: 459)
!881 = !DISubprogram(name: "sqrt", scope: !830, file: !830, line: 143, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !883, file: !833, line: 478)
!883 = !DISubprogram(name: "tan", scope: !830, file: !830, line: 66, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !885, file: !833, line: 497)
!885 = !DISubprogram(name: "tanh", scope: !830, file: !830, line: 75, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!886 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !887, file: !833, line: 1080)
!887 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !888, line: 150, baseType: !46)
!888 = !DIFile(filename: "/usr/include/math.h", directory: "")
!889 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !890, file: !833, line: 1081)
!890 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !888, line: 149, baseType: !203)
!891 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !892, file: !833, line: 1084)
!892 = !DISubprogram(name: "acosh", scope: !830, file: !830, line: 85, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!893 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !894, file: !833, line: 1085)
!894 = !DISubprogram(name: "acoshf", scope: !830, file: !830, line: 85, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!895 = !DISubroutineType(types: !896)
!896 = !{!203, !203}
!897 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !898, file: !833, line: 1086)
!898 = !DISubprogram(name: "acoshl", scope: !830, file: !830, line: 85, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!899 = !DISubroutineType(types: !900)
!900 = !{!208, !208}
!901 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !902, file: !833, line: 1088)
!902 = !DISubprogram(name: "asinh", scope: !830, file: !830, line: 87, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!903 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !904, file: !833, line: 1089)
!904 = !DISubprogram(name: "asinhf", scope: !830, file: !830, line: 87, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!905 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !906, file: !833, line: 1090)
!906 = !DISubprogram(name: "asinhl", scope: !830, file: !830, line: 87, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !908, file: !833, line: 1092)
!908 = !DISubprogram(name: "atanh", scope: !830, file: !830, line: 89, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!909 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !910, file: !833, line: 1093)
!910 = !DISubprogram(name: "atanhf", scope: !830, file: !830, line: 89, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !912, file: !833, line: 1094)
!912 = !DISubprogram(name: "atanhl", scope: !830, file: !830, line: 89, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !914, file: !833, line: 1096)
!914 = !DISubprogram(name: "cbrt", scope: !830, file: !830, line: 152, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !916, file: !833, line: 1097)
!916 = !DISubprogram(name: "cbrtf", scope: !830, file: !830, line: 152, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!917 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !918, file: !833, line: 1098)
!918 = !DISubprogram(name: "cbrtl", scope: !830, file: !830, line: 152, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!919 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !920, file: !833, line: 1100)
!920 = !DISubprogram(name: "copysign", scope: !830, file: !830, line: 196, type: !840, flags: DIFlagPrototyped, spFlags: 0)
!921 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !922, file: !833, line: 1101)
!922 = !DISubprogram(name: "copysignf", scope: !830, file: !830, line: 196, type: !923, flags: DIFlagPrototyped, spFlags: 0)
!923 = !DISubroutineType(types: !924)
!924 = !{!203, !203, !203}
!925 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !926, file: !833, line: 1102)
!926 = !DISubprogram(name: "copysignl", scope: !830, file: !830, line: 196, type: !927, flags: DIFlagPrototyped, spFlags: 0)
!927 = !DISubroutineType(types: !928)
!928 = !{!208, !208, !208}
!929 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !930, file: !833, line: 1104)
!930 = !DISubprogram(name: "erf", scope: !830, file: !830, line: 228, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!931 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !932, file: !833, line: 1105)
!932 = !DISubprogram(name: "erff", scope: !830, file: !830, line: 228, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!933 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !934, file: !833, line: 1106)
!934 = !DISubprogram(name: "erfl", scope: !830, file: !830, line: 228, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !936, file: !833, line: 1108)
!936 = !DISubprogram(name: "erfc", scope: !830, file: !830, line: 229, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !938, file: !833, line: 1109)
!938 = !DISubprogram(name: "erfcf", scope: !830, file: !830, line: 229, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !940, file: !833, line: 1110)
!940 = !DISubprogram(name: "erfcl", scope: !830, file: !830, line: 229, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!941 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !942, file: !833, line: 1112)
!942 = !DISubprogram(name: "exp2", scope: !830, file: !830, line: 130, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !944, file: !833, line: 1113)
!944 = !DISubprogram(name: "exp2f", scope: !830, file: !830, line: 130, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!945 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !946, file: !833, line: 1114)
!946 = !DISubprogram(name: "exp2l", scope: !830, file: !830, line: 130, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !948, file: !833, line: 1116)
!948 = !DISubprogram(name: "expm1", scope: !830, file: !830, line: 119, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !950, file: !833, line: 1117)
!950 = !DISubprogram(name: "expm1f", scope: !830, file: !830, line: 119, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !952, file: !833, line: 1118)
!952 = !DISubprogram(name: "expm1l", scope: !830, file: !830, line: 119, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !954, file: !833, line: 1120)
!954 = !DISubprogram(name: "fdim", scope: !830, file: !830, line: 326, type: !840, flags: DIFlagPrototyped, spFlags: 0)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !956, file: !833, line: 1121)
!956 = !DISubprogram(name: "fdimf", scope: !830, file: !830, line: 326, type: !923, flags: DIFlagPrototyped, spFlags: 0)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !958, file: !833, line: 1122)
!958 = !DISubprogram(name: "fdiml", scope: !830, file: !830, line: 326, type: !927, flags: DIFlagPrototyped, spFlags: 0)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !960, file: !833, line: 1124)
!960 = !DISubprogram(name: "fma", scope: !830, file: !830, line: 335, type: !961, flags: DIFlagPrototyped, spFlags: 0)
!961 = !DISubroutineType(types: !962)
!962 = !{!46, !46, !46, !46}
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !964, file: !833, line: 1125)
!964 = !DISubprogram(name: "fmaf", scope: !830, file: !830, line: 335, type: !965, flags: DIFlagPrototyped, spFlags: 0)
!965 = !DISubroutineType(types: !966)
!966 = !{!203, !203, !203, !203}
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !968, file: !833, line: 1126)
!968 = !DISubprogram(name: "fmal", scope: !830, file: !830, line: 335, type: !969, flags: DIFlagPrototyped, spFlags: 0)
!969 = !DISubroutineType(types: !970)
!970 = !{!208, !208, !208, !208}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !972, file: !833, line: 1128)
!972 = !DISubprogram(name: "fmax", scope: !830, file: !830, line: 329, type: !840, flags: DIFlagPrototyped, spFlags: 0)
!973 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !974, file: !833, line: 1129)
!974 = !DISubprogram(name: "fmaxf", scope: !830, file: !830, line: 329, type: !923, flags: DIFlagPrototyped, spFlags: 0)
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !976, file: !833, line: 1130)
!976 = !DISubprogram(name: "fmaxl", scope: !830, file: !830, line: 329, type: !927, flags: DIFlagPrototyped, spFlags: 0)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !978, file: !833, line: 1132)
!978 = !DISubprogram(name: "fmin", scope: !830, file: !830, line: 332, type: !840, flags: DIFlagPrototyped, spFlags: 0)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !980, file: !833, line: 1133)
!980 = !DISubprogram(name: "fminf", scope: !830, file: !830, line: 332, type: !923, flags: DIFlagPrototyped, spFlags: 0)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !982, file: !833, line: 1134)
!982 = !DISubprogram(name: "fminl", scope: !830, file: !830, line: 332, type: !927, flags: DIFlagPrototyped, spFlags: 0)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !984, file: !833, line: 1136)
!984 = !DISubprogram(name: "hypot", scope: !830, file: !830, line: 147, type: !840, flags: DIFlagPrototyped, spFlags: 0)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !986, file: !833, line: 1137)
!986 = !DISubprogram(name: "hypotf", scope: !830, file: !830, line: 147, type: !923, flags: DIFlagPrototyped, spFlags: 0)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !988, file: !833, line: 1138)
!988 = !DISubprogram(name: "hypotl", scope: !830, file: !830, line: 147, type: !927, flags: DIFlagPrototyped, spFlags: 0)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !990, file: !833, line: 1140)
!990 = !DISubprogram(name: "ilogb", scope: !830, file: !830, line: 280, type: !991, flags: DIFlagPrototyped, spFlags: 0)
!991 = !DISubroutineType(types: !992)
!992 = !{!18, !46}
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !994, file: !833, line: 1141)
!994 = !DISubprogram(name: "ilogbf", scope: !830, file: !830, line: 280, type: !995, flags: DIFlagPrototyped, spFlags: 0)
!995 = !DISubroutineType(types: !996)
!996 = !{!18, !203}
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !998, file: !833, line: 1142)
!998 = !DISubprogram(name: "ilogbl", scope: !830, file: !830, line: 280, type: !999, flags: DIFlagPrototyped, spFlags: 0)
!999 = !DISubroutineType(types: !1000)
!1000 = !{!18, !208}
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1002, file: !833, line: 1144)
!1002 = !DISubprogram(name: "lgamma", scope: !830, file: !830, line: 230, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1004, file: !833, line: 1145)
!1004 = !DISubprogram(name: "lgammaf", scope: !830, file: !830, line: 230, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1006, file: !833, line: 1146)
!1006 = !DISubprogram(name: "lgammal", scope: !830, file: !830, line: 230, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!1007 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1008, file: !833, line: 1149)
!1008 = !DISubprogram(name: "llrint", scope: !830, file: !830, line: 316, type: !1009, flags: DIFlagPrototyped, spFlags: 0)
!1009 = !DISubroutineType(types: !1010)
!1010 = !{!174, !46}
!1011 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1012, file: !833, line: 1150)
!1012 = !DISubprogram(name: "llrintf", scope: !830, file: !830, line: 316, type: !1013, flags: DIFlagPrototyped, spFlags: 0)
!1013 = !DISubroutineType(types: !1014)
!1014 = !{!174, !203}
!1015 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1016, file: !833, line: 1151)
!1016 = !DISubprogram(name: "llrintl", scope: !830, file: !830, line: 316, type: !1017, flags: DIFlagPrototyped, spFlags: 0)
!1017 = !DISubroutineType(types: !1018)
!1018 = !{!174, !208}
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1020, file: !833, line: 1153)
!1020 = !DISubprogram(name: "llround", scope: !830, file: !830, line: 322, type: !1009, flags: DIFlagPrototyped, spFlags: 0)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1022, file: !833, line: 1154)
!1022 = !DISubprogram(name: "llroundf", scope: !830, file: !830, line: 322, type: !1013, flags: DIFlagPrototyped, spFlags: 0)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1024, file: !833, line: 1155)
!1024 = !DISubprogram(name: "llroundl", scope: !830, file: !830, line: 322, type: !1017, flags: DIFlagPrototyped, spFlags: 0)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1026, file: !833, line: 1158)
!1026 = !DISubprogram(name: "log1p", scope: !830, file: !830, line: 122, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1028, file: !833, line: 1159)
!1028 = !DISubprogram(name: "log1pf", scope: !830, file: !830, line: 122, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1030, file: !833, line: 1160)
!1030 = !DISubprogram(name: "log1pl", scope: !830, file: !830, line: 122, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1032, file: !833, line: 1162)
!1032 = !DISubprogram(name: "log2", scope: !830, file: !830, line: 133, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1034, file: !833, line: 1163)
!1034 = !DISubprogram(name: "log2f", scope: !830, file: !830, line: 133, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1036, file: !833, line: 1164)
!1036 = !DISubprogram(name: "log2l", scope: !830, file: !830, line: 133, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!1037 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1038, file: !833, line: 1166)
!1038 = !DISubprogram(name: "logb", scope: !830, file: !830, line: 125, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1040, file: !833, line: 1167)
!1040 = !DISubprogram(name: "logbf", scope: !830, file: !830, line: 125, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!1041 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1042, file: !833, line: 1168)
!1042 = !DISubprogram(name: "logbl", scope: !830, file: !830, line: 125, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1044, file: !833, line: 1170)
!1044 = !DISubprogram(name: "lrint", scope: !830, file: !830, line: 314, type: !1045, flags: DIFlagPrototyped, spFlags: 0)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!29, !46}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1048, file: !833, line: 1171)
!1048 = !DISubprogram(name: "lrintf", scope: !830, file: !830, line: 314, type: !1049, flags: DIFlagPrototyped, spFlags: 0)
!1049 = !DISubroutineType(types: !1050)
!1050 = !{!29, !203}
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1052, file: !833, line: 1172)
!1052 = !DISubprogram(name: "lrintl", scope: !830, file: !830, line: 314, type: !1053, flags: DIFlagPrototyped, spFlags: 0)
!1053 = !DISubroutineType(types: !1054)
!1054 = !{!29, !208}
!1055 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1056, file: !833, line: 1174)
!1056 = !DISubprogram(name: "lround", scope: !830, file: !830, line: 320, type: !1045, flags: DIFlagPrototyped, spFlags: 0)
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1058, file: !833, line: 1175)
!1058 = !DISubprogram(name: "lroundf", scope: !830, file: !830, line: 320, type: !1049, flags: DIFlagPrototyped, spFlags: 0)
!1059 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1060, file: !833, line: 1176)
!1060 = !DISubprogram(name: "lroundl", scope: !830, file: !830, line: 320, type: !1053, flags: DIFlagPrototyped, spFlags: 0)
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1062, file: !833, line: 1178)
!1062 = !DISubprogram(name: "nan", scope: !830, file: !830, line: 201, type: !44, flags: DIFlagPrototyped, spFlags: 0)
!1063 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1064, file: !833, line: 1179)
!1064 = !DISubprogram(name: "nanf", scope: !830, file: !830, line: 201, type: !1065, flags: DIFlagPrototyped, spFlags: 0)
!1065 = !DISubroutineType(types: !1066)
!1066 = !{!203, !47}
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1068, file: !833, line: 1180)
!1068 = !DISubprogram(name: "nanl", scope: !830, file: !830, line: 201, type: !1069, flags: DIFlagPrototyped, spFlags: 0)
!1069 = !DISubroutineType(types: !1070)
!1070 = !{!208, !47}
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1072, file: !833, line: 1182)
!1072 = !DISubprogram(name: "nearbyint", scope: !830, file: !830, line: 294, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1074, file: !833, line: 1183)
!1074 = !DISubprogram(name: "nearbyintf", scope: !830, file: !830, line: 294, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1076, file: !833, line: 1184)
!1076 = !DISubprogram(name: "nearbyintl", scope: !830, file: !830, line: 294, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1078, file: !833, line: 1186)
!1078 = !DISubprogram(name: "nextafter", scope: !830, file: !830, line: 259, type: !840, flags: DIFlagPrototyped, spFlags: 0)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1080, file: !833, line: 1187)
!1080 = !DISubprogram(name: "nextafterf", scope: !830, file: !830, line: 259, type: !923, flags: DIFlagPrototyped, spFlags: 0)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1082, file: !833, line: 1188)
!1082 = !DISubprogram(name: "nextafterl", scope: !830, file: !830, line: 259, type: !927, flags: DIFlagPrototyped, spFlags: 0)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1084, file: !833, line: 1190)
!1084 = !DISubprogram(name: "nexttoward", scope: !830, file: !830, line: 261, type: !1085, flags: DIFlagPrototyped, spFlags: 0)
!1085 = !DISubroutineType(types: !1086)
!1086 = !{!46, !46, !208}
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1088, file: !833, line: 1191)
!1088 = !DISubprogram(name: "nexttowardf", scope: !830, file: !830, line: 261, type: !1089, flags: DIFlagPrototyped, spFlags: 0)
!1089 = !DISubroutineType(types: !1090)
!1090 = !{!203, !203, !208}
!1091 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1092, file: !833, line: 1192)
!1092 = !DISubprogram(name: "nexttowardl", scope: !830, file: !830, line: 261, type: !927, flags: DIFlagPrototyped, spFlags: 0)
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1094, file: !833, line: 1194)
!1094 = !DISubprogram(name: "remainder", scope: !830, file: !830, line: 272, type: !840, flags: DIFlagPrototyped, spFlags: 0)
!1095 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1096, file: !833, line: 1195)
!1096 = !DISubprogram(name: "remainderf", scope: !830, file: !830, line: 272, type: !923, flags: DIFlagPrototyped, spFlags: 0)
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1098, file: !833, line: 1196)
!1098 = !DISubprogram(name: "remainderl", scope: !830, file: !830, line: 272, type: !927, flags: DIFlagPrototyped, spFlags: 0)
!1099 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1100, file: !833, line: 1198)
!1100 = !DISubprogram(name: "remquo", scope: !830, file: !830, line: 307, type: !1101, flags: DIFlagPrototyped, spFlags: 0)
!1101 = !DISubroutineType(types: !1102)
!1102 = !{!46, !46, !46, !860}
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1104, file: !833, line: 1199)
!1104 = !DISubprogram(name: "remquof", scope: !830, file: !830, line: 307, type: !1105, flags: DIFlagPrototyped, spFlags: 0)
!1105 = !DISubroutineType(types: !1106)
!1106 = !{!203, !203, !203, !860}
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1108, file: !833, line: 1200)
!1108 = !DISubprogram(name: "remquol", scope: !830, file: !830, line: 307, type: !1109, flags: DIFlagPrototyped, spFlags: 0)
!1109 = !DISubroutineType(types: !1110)
!1110 = !{!208, !208, !208, !860}
!1111 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1112, file: !833, line: 1202)
!1112 = !DISubprogram(name: "rint", scope: !830, file: !830, line: 256, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1114, file: !833, line: 1203)
!1114 = !DISubprogram(name: "rintf", scope: !830, file: !830, line: 256, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!1115 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1116, file: !833, line: 1204)
!1116 = !DISubprogram(name: "rintl", scope: !830, file: !830, line: 256, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1118, file: !833, line: 1206)
!1118 = !DISubprogram(name: "round", scope: !830, file: !830, line: 298, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1120, file: !833, line: 1207)
!1120 = !DISubprogram(name: "roundf", scope: !830, file: !830, line: 298, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1122, file: !833, line: 1208)
!1122 = !DISubprogram(name: "roundl", scope: !830, file: !830, line: 298, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1124, file: !833, line: 1210)
!1124 = !DISubprogram(name: "scalbln", scope: !830, file: !830, line: 290, type: !1125, flags: DIFlagPrototyped, spFlags: 0)
!1125 = !DISubroutineType(types: !1126)
!1126 = !{!46, !46, !29}
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1128, file: !833, line: 1211)
!1128 = !DISubprogram(name: "scalblnf", scope: !830, file: !830, line: 290, type: !1129, flags: DIFlagPrototyped, spFlags: 0)
!1129 = !DISubroutineType(types: !1130)
!1130 = !{!203, !203, !29}
!1131 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1132, file: !833, line: 1212)
!1132 = !DISubprogram(name: "scalblnl", scope: !830, file: !830, line: 290, type: !1133, flags: DIFlagPrototyped, spFlags: 0)
!1133 = !DISubroutineType(types: !1134)
!1134 = !{!208, !208, !29}
!1135 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1136, file: !833, line: 1214)
!1136 = !DISubprogram(name: "scalbn", scope: !830, file: !830, line: 276, type: !863, flags: DIFlagPrototyped, spFlags: 0)
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1138, file: !833, line: 1215)
!1138 = !DISubprogram(name: "scalbnf", scope: !830, file: !830, line: 276, type: !1139, flags: DIFlagPrototyped, spFlags: 0)
!1139 = !DISubroutineType(types: !1140)
!1140 = !{!203, !203, !18}
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1142, file: !833, line: 1216)
!1142 = !DISubprogram(name: "scalbnl", scope: !830, file: !830, line: 276, type: !1143, flags: DIFlagPrototyped, spFlags: 0)
!1143 = !DISubroutineType(types: !1144)
!1144 = !{!208, !208, !18}
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1146, file: !833, line: 1218)
!1146 = !DISubprogram(name: "tgamma", scope: !830, file: !830, line: 235, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!1147 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1148, file: !833, line: 1219)
!1148 = !DISubprogram(name: "tgammaf", scope: !830, file: !830, line: 235, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1150, file: !833, line: 1220)
!1150 = !DISubprogram(name: "tgammal", scope: !830, file: !830, line: 235, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!1151 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1152, file: !833, line: 1222)
!1152 = !DISubprogram(name: "trunc", scope: !830, file: !830, line: 302, type: !831, flags: DIFlagPrototyped, spFlags: 0)
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1154, file: !833, line: 1223)
!1154 = !DISubprogram(name: "truncf", scope: !830, file: !830, line: 302, type: !895, flags: DIFlagPrototyped, spFlags: 0)
!1155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1156, file: !833, line: 1224)
!1156 = !DISubprogram(name: "truncl", scope: !830, file: !830, line: 302, type: !899, flags: DIFlagPrototyped, spFlags: 0)
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1158, file: !1161, line: 58)
!1158 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1159, line: 94, baseType: !1160)
!1159 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "")
!1160 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1159, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1161 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/fenv.h", directory: "")
!1162 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1163, file: !1161, line: 59)
!1163 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1159, line: 68, baseType: !582)
!1164 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1165, file: !1161, line: 62)
!1165 = !DISubprogram(name: "feclearexcept", scope: !1166, file: !1166, line: 71, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!1166 = !DIFile(filename: "/usr/include/fenv.h", directory: "")
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1168, file: !1161, line: 63)
!1168 = !DISubprogram(name: "fegetexceptflag", scope: !1166, file: !1166, line: 75, type: !1169, flags: DIFlagPrototyped, spFlags: 0)
!1169 = !DISubroutineType(types: !1170)
!1170 = !{!18, !1171, !18}
!1171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1163, size: 64)
!1172 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1173, file: !1161, line: 64)
!1173 = !DISubprogram(name: "feraiseexcept", scope: !1166, file: !1166, line: 78, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!1174 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1175, file: !1161, line: 65)
!1175 = !DISubprogram(name: "fesetexceptflag", scope: !1166, file: !1166, line: 88, type: !1176, flags: DIFlagPrototyped, spFlags: 0)
!1176 = !DISubroutineType(types: !1177)
!1177 = !{!18, !1178, !18}
!1178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1179, size: 64)
!1179 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1163)
!1180 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1181, file: !1161, line: 66)
!1181 = !DISubprogram(name: "fetestexcept", scope: !1166, file: !1166, line: 92, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!1182 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1183, file: !1161, line: 68)
!1183 = !DISubprogram(name: "fegetround", scope: !1166, file: !1166, line: 104, type: !129, flags: DIFlagPrototyped, spFlags: 0)
!1184 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1185, file: !1161, line: 69)
!1185 = !DISubprogram(name: "fesetround", scope: !1166, file: !1166, line: 107, type: !16, flags: DIFlagPrototyped, spFlags: 0)
!1186 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1187, file: !1161, line: 71)
!1187 = !DISubprogram(name: "fegetenv", scope: !1166, file: !1166, line: 114, type: !1188, flags: DIFlagPrototyped, spFlags: 0)
!1188 = !DISubroutineType(types: !1189)
!1189 = !{!18, !1190}
!1190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1158, size: 64)
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1192, file: !1161, line: 72)
!1192 = !DISubprogram(name: "feholdexcept", scope: !1166, file: !1166, line: 119, type: !1188, flags: DIFlagPrototyped, spFlags: 0)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1194, file: !1161, line: 73)
!1194 = !DISubprogram(name: "fesetenv", scope: !1166, file: !1166, line: 123, type: !1195, flags: DIFlagPrototyped, spFlags: 0)
!1195 = !DISubroutineType(types: !1196)
!1196 = !{!18, !1197}
!1197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1198, size: 64)
!1198 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1158)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1200, file: !1161, line: 74)
!1200 = !DISubprogram(name: "feupdateenv", scope: !1166, file: !1166, line: 128, type: !1195, flags: DIFlagPrototyped, spFlags: 0)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1158, file: !1202, line: 61)
!1202 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/cfenv", directory: "")
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1163, file: !1202, line: 62)
!1204 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1165, file: !1202, line: 65)
!1205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1168, file: !1202, line: 66)
!1206 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1173, file: !1202, line: 67)
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1175, file: !1202, line: 68)
!1208 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1181, file: !1202, line: 69)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1183, file: !1202, line: 71)
!1210 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1185, file: !1202, line: 72)
!1211 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1187, file: !1202, line: 74)
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1192, file: !1202, line: 75)
!1213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1194, file: !1202, line: 76)
!1214 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !11, entity: !1200, file: !1202, line: 77)
!1215 = !{!"base.helper.semantics"}
!1216 = !{!1217, !1217, i64 0}
!1217 = !{!"long", !1218, i64 0}
!1218 = !{!"omnipotent char", !1219, i64 0}
!1219 = !{!"Simple C++ TBAA"}
!1220 = !{!1221, !1218, i64 2065}
!1221 = !{!"_ZTS5State", !1218, i64 16, !1222, i64 2064, !1218, i64 2080, !1223, i64 2088, !1225, i64 2112, !1227, i64 2208, !1228, i64 2480, !1229, i64 2608, !1230, i64 2736, !1218, i64 2760, !1218, i64 2768, !1231, i64 3280}
!1222 = !{!"_ZTS10ArithFlags", !1218, i64 0, !1218, i64 1, !1218, i64 2, !1218, i64 3, !1218, i64 4, !1218, i64 5, !1218, i64 6, !1218, i64 7, !1218, i64 8, !1218, i64 9, !1218, i64 10, !1218, i64 11, !1218, i64 12, !1218, i64 13, !1218, i64 14, !1218, i64 15}
!1223 = !{!"_ZTS8Segments", !1224, i64 0, !1218, i64 2, !1224, i64 4, !1218, i64 6, !1224, i64 8, !1218, i64 10, !1224, i64 12, !1218, i64 14, !1224, i64 16, !1218, i64 18, !1224, i64 20, !1218, i64 22}
!1224 = !{!"short", !1218, i64 0}
!1225 = !{!"_ZTS12AddressSpace", !1217, i64 0, !1226, i64 8, !1217, i64 16, !1226, i64 24, !1217, i64 32, !1226, i64 40, !1217, i64 48, !1226, i64 56, !1217, i64 64, !1226, i64 72, !1217, i64 80, !1226, i64 88}
!1226 = !{!"_ZTS3Reg", !1218, i64 0}
!1227 = !{!"_ZTS3GPR", !1217, i64 0, !1226, i64 8, !1217, i64 16, !1226, i64 24, !1217, i64 32, !1226, i64 40, !1217, i64 48, !1226, i64 56, !1217, i64 64, !1226, i64 72, !1217, i64 80, !1226, i64 88, !1217, i64 96, !1226, i64 104, !1217, i64 112, !1226, i64 120, !1217, i64 128, !1226, i64 136, !1217, i64 144, !1226, i64 152, !1217, i64 160, !1226, i64 168, !1217, i64 176, !1226, i64 184, !1217, i64 192, !1226, i64 200, !1217, i64 208, !1226, i64 216, !1217, i64 224, !1226, i64 232, !1217, i64 240, !1226, i64 248, !1217, i64 256, !1226, i64 264}
!1228 = !{!"_ZTS8X87Stack", !1218, i64 0}
!1229 = !{!"_ZTS3MMX", !1218, i64 0}
!1230 = !{!"_ZTS14FPUStatusFlags", !1218, i64 0, !1218, i64 1, !1218, i64 2, !1218, i64 3, !1218, i64 4, !1218, i64 5, !1218, i64 6, !1218, i64 7, !1218, i64 8, !1218, i64 9, !1218, i64 10, !1218, i64 11, !1218, i64 12, !1218, i64 13, !1218, i64 14, !1218, i64 15, !1218, i64 16, !1218, i64 17, !1218, i64 18, !1218, i64 19, !1218, i64 20}
!1231 = !{!"_ZTS13SegmentCaches", !1232, i64 0, !1232, i64 16, !1232, i64 32, !1232, i64 48, !1232, i64 64, !1232, i64 80}
!1232 = !{!"_ZTS13SegmentShadow", !1218, i64 0, !1233, i64 8, !1233, i64 12}
!1233 = !{!"int", !1218, i64 0}
!1234 = !{i32 0, i32 9}
!1235 = !{!1221, !1218, i64 2067}
!1236 = !{!1221, !1218, i64 2069}
!1237 = !{!1221, !1218, i64 2071}
!1238 = !{!1221, !1218, i64 2073}
!1239 = !{!1221, !1218, i64 2077}
!1240 = !{!1218, !1218, i64 0}
!1241 = !{!1242, !1242, i64 0}
!1242 = !{!"__int128", !1218, i64 0}
!1243 = !{!1221, !1218, i64 2075}
!1244 = !{!1224, !1224, i64 0}
!1245 = !{!"base.entrypoint"}
!1246 = !{!"base.external.cfgexternal"}
!1247 = !{!"base.helper.mcsema"}
